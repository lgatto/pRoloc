[{"path":"https://lgatto.github.io/pRoloc/CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant, version 1.0.0, available http://contributor-covenant.org/version/1/0/0/","code":""},{"path":"https://lgatto.github.io/pRoloc/articles/v01-pRoloc-tutorial.html","id":"foreword","dir":"Articles","previous_headings":"","what":"Foreword","title":"Using pRoloc for spatial proteomics data analysis","text":"MSnbase pRoloc active developed; current functionality evolving new features added regular basis. software free open-source software. use , please support project citing publications: Gatto L. Lilley K.S. MSnbase - R/Bioconductor package isobaric tagged mass spectrometry data visualization, processing quantitation. Bioinformatics 28, 288-289 (2011). Gatto L, Breckels LM, Wieczorek S, Burger T, Lilley KS. Mass-spectrometry-based spatial proteomics data analysis using pRoloc pRolocdata. Bioinformatics. 2014 May 1;30(9):1322-4.. Breckels LM, Mulvey CM, Lilley KS Gatto L. Bioconductor workflow processing analysing spatial proteomics data. F1000Research 2016, 5:2926 doi: 10.12688/f1000research.10411.1. using phenoDisco function, please also cite Breckels L.M., Gatto L., Christoforou ., Groen .J., Kathryn Lilley K.S. Trotter M.W. effect organelle discovery upon sub-cellular protein localisation. J Proteomics, S1874-3919(13)00094-8 (2013). using transfer learning functions, please also cite Breckels LM, Holden S, Wonjar D, Mulvey CM, Christoforou , Groen , Trotter MW, Kohlbacker O, Lilley KS Gatto L (2016). Learning heterogeneous data sources: application spatial proteomics. PLoS Comput Biol 13;12(5):e1004920. doi: 10.1371/journal.pcbi.1004920. using Bayesian generative models, please also cite Bayesian Mixture Modelling Approach Spatial Proteomics Oliver M Crook, Claire M Mulvey, Paul D. W. Kirk, Kathryn S Lilley, Laurent Gatto bioRxiv 282269; doi: https://doi.org/10.1101/282269 introduction spatial proteomics data analysis: Gatto L, Breckels LM, Burger T, Nightingale DJ, Groen AJ, Campbell C, Nikolovski N, Mulvey CM, Christoforou , Ferro M, Lilley KS. foundation reliable spatial proteomics data analysis. Mol Cell Proteomics. 2014 Aug;13(8):1937-52. doi: 10.1074/mcp.M113.036350. pRoloc package contains additional vignettes reference material: pRoloc-tutorial: pRoloc tutorial (vignette). pRoloc-ml: Machine learning techniques available pRoloc. pRoloc-transfer-learning: transfer learning algorithm spatial proteomics. pRoloc-goannotations: Annotating spatial proteomics data. pRoloc-bayesian: Bayesian spatial proteomics pRoloc.","code":""},{"path":"https://lgatto.github.io/pRoloc/articles/v01-pRoloc-tutorial.html","id":"questions-and-bugs","dir":"Articles","previous_headings":"","what":"Questions and bugs","title":"Using pRoloc for spatial proteomics data analysis","text":"welcome contact directly pRoloc. bugs, typos, suggestions questions, please file issue issue tracking system (https://github.com/lgatto/pRoloc/issues) providing much information possible, reproducible example output sessionInfo(). wish reach broader audience general questions proteomics analysis using R, may want use Bioconductor support site: https://support.bioconductor.org/.","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/articles/v01-pRoloc-tutorial.html","id":"spatial-proteomics","dir":"Articles","previous_headings":"Introduction","what":"Spatial proteomics","title":"Using pRoloc for spatial proteomics data analysis","text":"Spatial (organelle) proteomics study localisation proteins inside cells. sub-cellular compartment can organelles, .e. structures defined lipid bi-layers,macro-molecular assemblies proteins nucleic acids large protein complexes. document, focus mass-spectrometry based approaches assay population cells, opposed microscopy based techniques monitor single cells, former primary concern pRoloc, although techniques described infrastructure place also applied processed image data. typical experimental use-case using pRoloc set fractions, originating total cell lysate. fractions can originate continuous gradient, like LOPIT (Dunkley et al. 2006) PCP (Foster et al. 2006) approaches, can discrete fractions. content fractions identified quantified (using labelled un-labelled quantitation techniques). Using relative quantitation known organelle residents, termed organelle markers, organelle-specific profiles along gradient determined new residents identified based matching distribution profiles. See example (Gatto et al. 2010) references therein detailed review organelle proteomics. noted large protein complexes, necessarily separately enclosed within lipid bi-layer, can detected techniques, long distinct profile can defined across fractions.","code":""},{"path":"https://lgatto.github.io/pRoloc/articles/v01-pRoloc-tutorial.html","id":"about-r-and-proloc","dir":"Articles","previous_headings":"Introduction","what":"About R and pRoloc","title":"Using pRoloc for spatial proteomics data analysis","text":"R (R Development Core Team 2011) statistical programming language interactive working environment. can expanded -called packages confer new functionality users. Many packages developed analysis high-throughput biology, notably Bioconductor project (Gentleman et al. 2004). Two packages particular interest , namely MSnbase (Gatto Lilley 2012) pRoloc. former provides flexible infrastructure store manipulate quantitative proteomics data associated meta-data latter implements specific algorithmic technologies analyse organelle proteomics data. Among advantages R robust statistical procedures, good visualisation capabilities, excellent documentation, reproducible research1, power flexibility R language environment rich environment specialised functionality many domains bioinformatics: tools many omics technologies, including proteomics, bio-statistics, gene ontology biological pathway analysis, … Although exists specific graphical user interfaces (GUI), interaction R executed command line interface. mode interaction might look alien new users, experience proven first steep learning curve, great results can achieved non-programmers. Furthermore, specific general documentation plenty beginners advanced course material also widely available. R started, first step enable functionality specific packages load using library function, shown code chunk : MSnbase implements data containers used pRoloc. pRolocdata data package supplies several published organelle proteomics data sets. final setup step, set default colour palette custom plotting functionality use semi-transparent colours code chunk (see ?setStockcol details). facilitates visualisation overlapping points.","code":"library(\"MSnbase\") library(\"pRoloc\") library(\"pRolocdata\") setStockcol(NULL) ## reset first setStockcol(paste0(getStockcol(), 70))"},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/articles/v01-pRoloc-tutorial.html","id":"example-data","dir":"Articles","previous_headings":"Data structures","what":"Example data","title":"Using pRoloc for spatial proteomics data analysis","text":"data used tutorial published (Tan et al. 2009). LOPIT technique (Dunkley et al. 2006) used localise integral associated membrane proteins Drosophila melanogaster embryos. Briefly, embryos collected 0 – 16 hours, homogenised centrifuged collect supernatant, removing cell debris nuclei. Membrane fractionation performed iodixanol gradient fractions quantified using iTRAQ isobaric tags (Ross et al. 2004) follows: fractions 4/5, 114; fractions 12/13, 115; fraction 19, 116 fraction 21, 117. Labelled peptides separated using cation exchange chromatography analysed LS-MS/MS QSTAR XL quadrupole-time--flight mass spectrometer (Applied Biosystems). original localisation analysis performed using partial least square discriminant analysis (PLS-DA). Relative quantitation data retrieved supplementary file pr800866n_si_004.xls (http://pubs.acs.org/doi/suppl/10.1021/pr800866n/suppl_file/pr800866n_si_004.xls) imported R described . concentrate first replicate.","code":""},{"path":"https://lgatto.github.io/pRoloc/articles/v01-pRoloc-tutorial.html","id":"importing-and-loading-data","dir":"Articles","previous_headings":"Data structures","what":"Importing and loading data","title":"Using pRoloc for spatial proteomics data analysis","text":"section illustrates import data comma-separated value (csv) format appropriate R data structure. first section shows original csv (comma separated values) spreadsheet, published authors, one can read file using read.csv function. spreadsheet file similar output many quantitation software. next section, show 2 csv files containing subset columns original pr800866n_si_004-rep1.csv file another short file, created manually, used create appropriate R data.","code":""},{"path":"https://lgatto.github.io/pRoloc/articles/v01-pRoloc-tutorial.html","id":"sec:orgcsv","dir":"Articles","previous_headings":"Data structures > Importing and loading data","what":"The original data file","title":"Using pRoloc for spatial proteomics data analysis","text":"three first lines original spreadsheet, containing data replicate one, illustrated (using function head). contains 888 rows (proteins) 16 columns, including protein identifiers, database accession numbers, gene symbols, reporter ion quantitation values, information related protein identification, …","code":"## The original data for replicate 1, available ## from the pRolocdata package f0 <- dir(system.file(\"extdata\", package = \"pRolocdata\"),       full.names = TRUE,       pattern = \"pr800866n_si_004-rep1.csv\") csv <- read.csv(f0) head(csv, n=3) ##   Protein.ID        FBgn Flybase.Symbol No..peptide.IDs Mascot.score ## 1    CG10060 FBgn0001104    G-ialpha65A               3       179.86 ## 2    CG10067 FBgn0000044         Act57B               5       222.40 ## 3    CG10077 FBgn0035720        CG10077               5       219.65 ##   No..peptides.quantified area.114 area.115 area.116 area.117 ## 1                       1 0.379000 0.281000 0.225000 0.114000 ## 2                       9 0.420000 0.209667 0.206111 0.163889 ## 3                       3 0.187333 0.167333 0.169667 0.476000 ##   PLS.DA.classification Peptide.sequence Precursor.ion.mass ## 1                    PM                                     ## 2                    PM                                     ## 3                                                           ##   Precursor.ion.charge pd.2013 pd.markers ## 1                           PM    unknown ## 2                           PM    unknown ## 3                      unknown    unknown"},{"path":"https://lgatto.github.io/pRoloc/articles/v01-pRoloc-tutorial.html","id":"sec:csv","dir":"Articles","previous_headings":"Data structures > Importing and loading data","what":"From csv files to R data","title":"Using pRoloc for spatial proteomics data analysis","text":"several ways create desired R data object, termed MSnSet, used perform actual sub-cellular localisation prediction. , illustrate method uses separate spreadsheet files quantitation data, feature meta-data sample (fraction) meta-data readMSnSet constructor function, hopefully straightforward new users. exprsFile.csv containing quantitation (expression) data 888 proteins 4 reporter tags. fdataFile.csv containing meta-data 888 features (proteins). pdataFile.csv containing samples (fractions) meta-data. simple file created manually. self-contained data structure, called MSnSet (defined MSnbase package) can now easily generated using readMSnSet constructor, providing respective csv file names shown specifying data comma-separated (sep = \",\"). , call object tan2009r1 display content.","code":"## The quantitation data, from the original data f1 <- dir(system.file(\"extdata\", package = \"pRolocdata\"),       full.names = TRUE, pattern = \"exprsFile.csv\") exprsCsv <- read.csv(f1) ## Feature meta-data, from the original data f2 <- dir(system.file(\"extdata\", package = \"pRolocdata\"),       full.names = TRUE, pattern = \"fdataFile.csv\") fdataCsv <- read.csv(f2) ## Sample meta-data, a new file f3 <- dir(system.file(\"extdata\", package = \"pRolocdata\"),       full.names = TRUE, pattern = \"pdataFile.csv\") pdataCsv <- read.csv(f3) head(exprsCsv, n=3) ##          FBgn     X114     X115     X116     X117 ## 1 FBgn0001104 0.379000 0.281000 0.225000 0.114000 ## 2 FBgn0000044 0.420000 0.209667 0.206111 0.163889 ## 3 FBgn0035720 0.187333 0.167333 0.169667 0.476000 head(fdataCsv, n=3) ##          FBgn ProteinID FlybaseSymbol NoPeptideIDs MascotScore ## 1 FBgn0001104   CG10060   G-ialpha65A            3      179.86 ## 2 FBgn0000044   CG10067        Act57B            5      222.40 ## 3 FBgn0035720   CG10077       CG10077            5      219.65 ##   NoPeptidesQuantified PLSDA ## 1                    1    PM ## 2                    9    PM ## 3                    3 pdataCsv ##   sampleNames Fractions ## 1        X114       4/5 ## 2        X115     12/13 ## 3        X116        19 ## 4        X117        21 tan2009r1 <- readMSnSet(exprsFile = f1,             featureDataFile = f2,             phenoDataFile = f3,             sep = \",\") tan2009r1 ## MSnSet (storageMode: lockedEnvironment) ## assayData: 888 features, 4 samples  ##   element names: exprs  ## protocolData: none ## phenoData ##   sampleNames: X114 X115 X116 X117 ##   varLabels: Fractions ##   varMetadata: labelDescription ## featureData ##   featureNames: FBgn0001104 FBgn0000044 ... FBgn0001215 (888 total) ##   fvarLabels: ProteinID FlybaseSymbol ... PLSDA (6 total) ##   fvarMetadata: labelDescription ## experimentData: use 'experimentData(object)' ## Annotation:   ## - - - Processing information - - - ## Quantitation data loaded: Sat Nov 23 16:05:09 2024  using readMSnSet.  ##  MSnbase version: 2.33.2"},{"path":"https://lgatto.github.io/pRoloc/articles/v01-pRoloc-tutorial.html","id":"a-shorter-input-work-flow","dir":"Articles","previous_headings":"Data structures","what":"A shorter input work flow","title":"Using pRoloc for spatial proteomics data analysis","text":"readMSnSet2 function provides simplified import pipeline. takes single spreadsheet input (default csv) extract columns identified ecol create expression data, others used feature meta-data. ecol can character respective column labels numeric indices. former case, important make sure names match exactly. Special characters like '-' '(' transformed R '.' csv file read . Optionally, one can also specify column used feature names. Note must unique guarantee final object validity. ecol columns can also queried interactively R using getEcols grepEcols function. former return character column names, given splitting character, .e. separation value spreadsheet (typically \",\" csv, \"\\t\" tsv, …). latter can used grep pattern interest obtain relevant column indices. phenoData slot can now updated accordingly using replacement functions phenoData<- pData<- (see ?MSnSet details).","code":"ecol <- paste(\"area\", 114:117, sep = \".\") fname <- \"Protein.ID\" eset <- readMSnSet2(f0, ecol, fname) eset ## MSnSet (storageMode: lockedEnvironment) ## assayData: 888 features, 4 samples  ##   element names: exprs  ## protocolData: none ## phenoData: none ## featureData ##   featureNames: CG10060 CG10067 ... CG9983 (888 total) ##   fvarLabels: Protein.ID FBgn ... pd.markers (12 total) ##   fvarMetadata: labelDescription ## experimentData: use 'experimentData(object)' ## Annotation:   ## - - - Processing information - - - ##  MSnbase version: 2.33.2 getEcols(f0, \",\") ##  [1] \"\\\"Protein ID\\\"\"              \"\\\"FBgn\\\"\"                    ##  [3] \"\\\"Flybase Symbol\\\"\"          \"\\\"No. peptide IDs\\\"\"         ##  [5] \"\\\"Mascot score\\\"\"            \"\\\"No. peptides quantified\\\"\" ##  [7] \"\\\"area 114\\\"\"                \"\\\"area 115\\\"\"                ##  [9] \"\\\"area 116\\\"\"                \"\\\"area 117\\\"\"                ## [11] \"\\\"PLS-DA classification\\\"\"   \"\\\"Peptide sequence\\\"\"        ## [13] \"\\\"Precursor ion mass\\\"\"      \"\\\"Precursor ion charge\\\"\"    ## [15] \"\\\"pd.2013\\\"\"                 \"\\\"pd.markers\\\"\" grepEcols(f0, \"area\", \",\") ## [1]  7  8  9 10 e <- grepEcols(f0, \"area\", \",\") readMSnSet2(f0, e) ## MSnSet (storageMode: lockedEnvironment) ## assayData: 888 features, 4 samples  ##   element names: exprs  ## protocolData: none ## phenoData: none ## featureData ##   featureNames: 1 2 ... 888 (888 total) ##   fvarLabels: Protein.ID FBgn ... pd.markers (12 total) ##   fvarMetadata: labelDescription ## experimentData: use 'experimentData(object)' ## Annotation:   ## - - - Processing information - - - ##  MSnbase version: 2.33.2"},{"path":"https://lgatto.github.io/pRoloc/articles/v01-pRoloc-tutorial.html","id":"the-msnset-class","dir":"Articles","previous_headings":"Data structures > A shorter input work flow","what":"The MSnSet class","title":"Using pRoloc for spatial proteomics data analysis","text":"Although additional specific sub-containers additional meta-data (instance make object MIAPE compliant), feature (sub-container, slot featureData) sample (phenoData slot) important ones. need meet following validity requirements (see figure ): number row expression/quantitation data feature data must equal row names must match exactly, number columns expression/quantitation data number row sample meta-data must equal column/row names must match exactly. common, context pRoloc update feature meta-data (described section @ref(sec:analysis)) adding new columns, without breaking objects validity. Similarly, sample meta-data can also updated adding new sample variables. detailed description MSnSet class available typing ?MSnSet R console. individual parts data object can accessed respective accessor methods: quantitation data can retrieved exprs(tan2009r1), feature meta-data fData(tan2009r1) sample meta-data pData(tan2009r1). advantage structure can manipulated whole respective parts data object remain compatible. code chunk , example, shows extract first 5 proteins 2 first samples: Several data sets, including 3 replicates (Tan et al. 2009), distributed MSnSet instances pRolocdata package. Others include, among others, Arabidopsis thaliana LOPIT data (Dunkley et al. 2006) (dunkley2006) mouse PCP data (Foster et al. 2006) (foster2006). data set can loaded data function, show first replicate (Tan et al. 2009). original marker proteins available feature meta-data variables called markers.orig output partial least square discriminant analysis, applied original publication, PLSDA feature variable. --date marker list experiment can found markers. feature meta-data column can added simple csv markers files using addMarkers function - see ?addMarkers details. organelle markers illustrated using convenience function getMarkers, also done manually accessing feature variables directly using fData(). Important can seen , proteins labelled \"unknown\", defining non marker proteins. convention many pRoloc functions. Missing annotations (empty string) considered unknown localisation; prefer avoid empty strings make absence known localisation explicit using \"unknown\" tag. information used separate marker non-marker (unlabelled) proteins proceeding data visualisation clustering (sections @ref(sec:viz) @ref(sec:usml)) classification analysis (section @ref(sec:sml)).","code":"smallTan <- tan2009r1[1:5, 1:2] dim(smallTan) ## [1] 5 2 exprs(smallTan) ##                 X114     X115 ## FBgn0001104 0.379000 0.281000 ## FBgn0000044 0.420000 0.209667 ## FBgn0035720 0.187333 0.167333 ## FBgn0003731 0.247500 0.253000 ## FBgn0029506 0.216000 0.183000 data(tan2009r1) getMarkers(tan2009r1, fcol = \"markers.orig\") ## organelleMarkers ##            ER         Golgi mitochondrion            PM       unknown  ##            20             6            14            15           833 getMarkers(tan2009r1, fcol = \"PLSDA\") ## organelleMarkers ##      ER/Golgi mitochondrion            PM       unknown  ##           235            74           180           399"},{"path":"https://lgatto.github.io/pRoloc/articles/v01-pRoloc-tutorial.html","id":"prolocs-organelle-markers","dir":"Articles","previous_headings":"Data structures","what":"pRoloc’s organelle markers","title":"Using pRoloc for spatial proteomics data analysis","text":"pRoloc package distributes set markers obtained mining pRolocdata datasets curation various members Cambridge Centre Proteomics. available marker sets can obtained loaded using pRolocmarkers function: markers can added new MSnSet using addMarkers function matching marker names (protein identifiers) feature names MSnSet. See ?addMarkers examples.","code":"pRolocmarkers() ## 14 marker lists (version 2) available: ## Arabidopsis thaliana [atha]: ##  Ids: TAIR, 543 markers ## Drosophila melanogaster [dmel]: ##  Ids: Uniprot, 179 markers ## Gallus gallus [ggal]: ##  Ids: IPI, 102 markers ## Homo sapiens [hsap_christopher]: ##  Ids: Uniprot, 1509 markers ## Homo sapiens [hsap_geladaki]: ##  Ids: Uniprot, 579 markers ## Homo sapiens [hsap_itzhak]: ##  Ids: Uniprot, 1076 markers ## Homo sapiens [hsap_villaneuva]: ##  Ids: Uniprot, 682 markers ## Homo sapiens [hsap]: ##  Ids: Uniprot, 872 markers ## Mus musculus [mmus_christoforou]: ##  Ids: Uniprot, 922 markers ## Mus musculus [mmus]: ##  Ids: Uniprot, 937 markers ## Saccharomyces cerevisiae [scer_sgd]: ##  Ids: SGD, 259 markers ## Saccharomyces cerevisiae [scer_uniprot]: ##  Ids: Uniprot, 259 markers ## Toxoplasma gondii [toxo_barylyuk]: ##  Ids: ToxoDB gene identifier, 718 markers ## Trypanosoma brucei [tryp_moloney]: ##  Ids: TriTrypDB gene identifier, 891 markers head(pRolocmarkers(\"dmel\")) ##       Q7JZN0       Q7KLV9       Q9VIU7       P15348       Q7KMP8       O01367  ##         \"ER\" \"Proteasome\"         \"ER\"    \"Nucleus\" \"Proteasome\"    \"Nucleus\" table(pRolocmarkers(\"dmel\")) ##  ##  40S Ribosome  60S Ribosome  Cytoskeleton            ER         Golgi  ##            22            32             7            24             7  ##      Lysosome Mitochondrion       Nucleus    Peroxisome            PM  ##             8            15            21             4            25  ##    Proteasome  ##            14"},{"path":"https://lgatto.github.io/pRoloc/articles/v01-pRoloc-tutorial.html","id":"data-processing","dir":"Articles","previous_headings":"Data structures","what":"Data processing","title":"Using pRoloc for spatial proteomics data analysis","text":"quantitation data obtained supplementary file normalised sum intensities protein; sum fraction quantitation protein equals 1 (considering rounding errors). can quickly verified computing row sums expression data. normalise method (also available normalize) MSnbase package can used obtain relative quantitation data, illustrated another iTRAQ test data set, available MSnbase. Several normalisation methods available described ?normalise. many algorithms, including classifiers general support vector machines particular, important properly per-process data. Centering scaling data also available scale method. code chunk , first create test MSnSet instance2 illustrate effect normalise(..., method = \"sum\"). Note processing undergone MSnSet instances itraqdata itraqnorm stored another specific sub-container, processingData slot. different features (proteins tan2009r1 data , also represent peptides MS2^2 spectra) characterised unique names. can retrieved featureNames function. look back section @ref(sec:csv), see automatically assigned using first columns exprsFile.csv fdataFile.csv files. thus crucial respective first columns identical. Similarly, sample names can retrieved sampleNames(tan2009r1).","code":"summary(rowSums(exprs(tan2009r1))) ##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  ##  0.9990  0.9999  1.0000  1.0000  1.0001  1.0010 ## create a small illustrative test data data(itraqdata) itraqdata <- quantify(itraqdata, method = \"trap\",               reporters = iTRAQ4) ## the quantification data head(exprs(itraqdata), n = 3) ##     iTRAQ4.114 iTRAQ4.115 iTRAQ4.116 iTRAQ4.117 ## X1   1347.6158  2247.3097  3927.6931  7661.1463 ## X10   739.9861   799.3501   712.5983   940.6793 ## X11 27638.3582 33394.0252 32104.2879 26628.7278 summary(rowSums(exprs(itraqdata))) ##      Min.   1st Qu.    Median      Mean   3rd Qu.      Max.      NA's  ##     59.06   5638.09  15344.43  38010.87  42256.61 305739.04         1 ## normalising to the sum of feature intensitites itraqnorm <- normalise(itraqdata, method = \"sum\") processingData(itraqnorm) ## - - - Processing information - - - ## Data loaded: Wed May 11 18:54:39 2011  ## Updated from version 0.3.0 to 0.3.1 [Fri Jul  8 20:23:25 2016]  ## iTRAQ4 quantification by trapezoidation: Sat Nov 23 16:05:13 2024  ## Normalised (sum): Sat Nov 23 16:05:13 2024  ##  MSnbase version: 1.1.22 head(exprs(itraqnorm), n = 3) ##     iTRAQ4.114 iTRAQ4.115 iTRAQ4.116 iTRAQ4.117 ## X1  0.08875373  0.1480074  0.2586772  0.5045617 ## X10 0.23178064  0.2503748  0.2232022  0.2946424 ## X11 0.23077081  0.2788287  0.2680598  0.2223407 summary(rowSums(exprs(itraqnorm))) ##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  ##       1       1       1       1       1       1       1 head(featureNames(tan2009r1)) ## [1] \"P20353\" \"P53501\" \"Q7KU78\" \"P04412\" \"Q7KJ73\" \"Q7JZN0\""},{"path":"https://lgatto.github.io/pRoloc/articles/v01-pRoloc-tutorial.html","id":"sec:viz","dir":"Articles","previous_headings":"","what":"Data visualisation","title":"Using pRoloc for spatial proteomics data analysis","text":"following sections focus two closely related aspects, data visualisation data analysis (.e. organelle assignments). Data visualisation used context quality control, convince data displays expected properties output processing can trusted. Visualising results localisation prediction also essential, control validity results, proceeding orthogonal (often expensive) dry wet validation.","code":""},{"path":"https://lgatto.github.io/pRoloc/articles/v01-pRoloc-tutorial.html","id":"sec:profplot","dir":"Articles","previous_headings":"Data visualisation","what":"Profile plots","title":"Using pRoloc for spatial proteomics data analysis","text":"underlying principle gradient approaches separated organelles along gradient , generated organelle-specific protein distributions along gradient fractions. natural visualisation shown figure @ref(fig:plotdist1), obtained using sub-setting functionality MSnSet instances plotDist function, illustrated . Distribution protein intensities along fractions separation gradient 4 organelles: mitochondrion (red), ER/Golgi (blue, ER markers green, Golgi markers) plasma membrane (purple).","code":"## indices of the mito markers j <- which(fData(tan2009r1)$markers.orig == \"mitochondrion\") ## indices of all proteins assigned to the mito i <- which(fData(tan2009r1)$PLSDA == \"mitochondrion\") plotDist(tan2009r1[i, ],      markers = featureNames(tan2009r1)[j])"},{"path":"https://lgatto.github.io/pRoloc/articles/v01-pRoloc-tutorial.html","id":"sec:dendro","dir":"Articles","previous_headings":"Data visualisation","what":"Sub-cellular cluster dendrogram","title":"Using pRoloc for spatial proteomics data analysis","text":"gain quick overview distance/similarity sub-cellular clusters, can useful compare average marker profiles, rather profiles, presented profile plots . mrkHClust calculates average class profiles generates resulting dendrogram. Hierarchical clustering. Average distance organelle classes. figure @ref(fig:dendro), see lysosome ribosome 60S separated smallest distance. advantage representation provides quick snapshot average similarity organelles using complete profiles (opposed PCA plot, discussed next section). main drawback ignores variability individual markers (cluster thighness). however good guide thorough exploration data, described next sections. Note colours labels dendrogram (figure @ref(fig:dendro)), match colours used annotate PCA plots, described next section (figure @ref(fig:plot2d). colours defined session level (see getStockcol setStockcol) re-used throughout pRoloc consistent annotation.","code":"mrkHClust(tan2009r1)"},{"path":"https://lgatto.github.io/pRoloc/articles/v01-pRoloc-tutorial.html","id":"sec:avrprofplot","dir":"Articles","previous_headings":"Data visualisation","what":"Average organelle class profile plot","title":"Using pRoloc for spatial proteomics data analysis","text":"can also visualise average organelle class profiles generated mrkConsProfiles using plotConsProfiles. can optionally order organelle classes y-axis according heirachical clustering mrkHClust. See ?mrkHClust details Average organelle class profiles. Protein intensity indicated colour. Organelle classes ordered hierarchical clustering","code":"## histogram hc <- mrkHClust(tan2009r1, plot=FALSE)  ## order of markers according to histogram mm <- getMarkerClasses(tan2009r1) m_order <- levels(factor(mm))[order.dendrogram(hc)]  ## average marker profile fmat <- mrkConsProfiles(tan2009r1)  plotConsProfiles(fmat, order=m_order)"},{"path":"https://lgatto.github.io/pRoloc/articles/v01-pRoloc-tutorial.html","id":"sec:pcalot","dir":"Articles","previous_headings":"Data visualisation","what":"Dimensionality reduction","title":"Using pRoloc for spatial proteomics data analysis","text":"Alternatively, can combine organelle groups one single 2 dimensional figure applying dimensionality reduction technique Principal Component Analysis (PCA) using plot2D function (see figure @ref(fig:plot2d)). protein profile vectors summarised 2 values can visualised two dimensions, variability data maximised along first principal component (PC1). second principal component (PC2) chosen orthogonal PC1 explaining much variance data possible, PC3, PC4, etc. Using PCA representation visualise spatial proteomics experiment, can easily plot proteins figure well many sub-cellular clusters. clusters defined feature meta-data column (slot featureData, accessed data.frame fData function) declared fcol argument (default \"markers\" contains current known markers experiment, original markers published data can found slot \"markers.orig\"). PCA plot. Representation proteins tan2009r1 reduction 4 reporter quantitation data 2 principal components. default value fcol argument \"markers\", necessary specify . however mandatory specify annotation feature variables, visualise set markers described original publication. PCA plot. Reduced set markers tan2009r1 data projected onto 2 principal components. also possible visualise data along 3 dimensions using plot3D function, works like 2 dimension version (figure ). resulting figure can rotated user. can seen figures @ref(fig:plot2d), @ref(fig:plot2dorg) 3D plot , indicate axis labels percentage total variance explained individual PCs. unusual reach 75% along first two PCs, even experiments several tens fractions. One can calculate information PCs setting method = \"scree\" plot2D. figure @ref(fig:scree), see four PCs tan2009r1 data account 58.53, 29.96, 11.52 0 percent total variance. Percentage variance explained. variety dimensionality reduction methods available plot2D: PCA, MDS, kpca, lda, t-SNE, nipals, hexbin, none, scree. Except scree (see ) none (data transformation, can useful data already transformed needs plotted), can used produce visualisation data two dimensions. Two worth discussion ; readers redirected manual page details. Linear discriminant analysis (LDA) project protein occupancy profiles new set dimensions using criterion separation marker classes maximising class variance within class variance ratio. opposed unsupervised PCA, supervised LDA used explore data quality control, can useful assess one organelles preferentially separated. t-Distributed Stochastic Neighbour Embedding (t-SNE)3 (Maaten Hinton 2008) widely applied many areas computational biology generally field need visualise high-dimensional data. t-SNE method non-linear, emphasise separation different features grouping features similar profiles. addition, different transformations applied different regions leading plots can substantially differ PCA plot. result, proximity two dimensions tightness clusters can’t related quantities original data. See Use t-SNE Effectively4 useful non-technical introduction. results algorithm crucially depend values input parameters, particular perplexity, balances global local aspects data. suggested range value ranges 5 50, greater number data points (can assume case modern spatial proteomics experiments). , test effect parameter along suggested range, including default value 30, algorithm converges. parameters can effect results number iterations learning rate epsilon. t-SNE algorithm takes much time complete available methods. cases, saving results re-plotting method none can useful (see ?plot2D). case document, figure , pre-generated rather computed upon compilation.","code":"plot2D(tan2009r1, fcol = \"markers\") addLegend(tan2009r1, fcol = \"markers\", cex = .7,       where = \"bottomright\", ncol = 2) plot2D(tan2009r1, fcol = \"markers.orig\") addLegend(tan2009r1, fcol = \"markers.orig\", where = \"bottomright\") plot3D(tan2009r1) plot2D(tan2009r1, method = \"scree\") perps <- sort(c(30, seq(5, 50, 15))) data(HEK293T2011) par(mfrow = c(2, 3)) plot2D(HEK293T2011, main = \"PCA\") sapply(perps,        function(perp) {        plot2D(HEK293T2011, method = \"t-SNE\",           methargs = list(perplexity = perp))        title(main = paste(\"t-SNE, perplexity\", perp))        })"},{"path":"https://lgatto.github.io/pRoloc/articles/v01-pRoloc-tutorial.html","id":"features-of-interest","dir":"Articles","previous_headings":"Data visualisation","what":"Features of interest","title":"Using pRoloc for spatial proteomics data analysis","text":"addition highlighting sub-cellular niches coloured clusters PCA plot, also possible define arbitrary features interest represent, example, proteins particular pathway set interaction partners. sets proteins recorded FeaturesOfInterest instances, illstrated (using ten first features experiment): Several features interest can combined collections: FeaturesOfInterest instances can now overlaid PCA plot highlightOnPlot function. highlightOnPlot3D can used overlay data onto 3 dimensional figure produced plot3D. Adding features interest PCA plot. See ?FeaturesOfInterest ?highlightOnPlot details.","code":"foi1 <- FeaturesOfInterest(description = \"Feats of interest 1\",                fnames = featureNames(tan2009r1[1:10])) description(foi1) ## [1] \"Feats of interest 1\" foi(foi1) ##  [1] \"P20353\" \"P53501\" \"Q7KU78\" \"P04412\" \"Q7KJ73\" \"Q7JZN0\" \"Q7KLV9\" \"Q9VM65\" ##  [9] \"Q9VCK0\" \"Q9VIU7\" foi2 <- FeaturesOfInterest(description = \"Feats of interest 2\",                fnames = featureNames(tan2009r1[880:888])) foic <- FoICollection(list(foi1, foi2)) foic ## A collection of 2 features of interest. plot2D(tan2009r1, fcol = \"PLSDA\") addLegend(tan2009r1, fcol = \"PLSDA\",       where = \"bottomright\",       cex = .7) highlightOnPlot(tan2009r1, foi1,         col = \"black\", lwd = 2) highlightOnPlot(tan2009r1, foi2,         col = \"purple\", lwd = 2) legend(\"topright\", c(\"FoI 1\", \"FoI 2\"),        bty = \"n\", col = c(\"black\", \"purple\"),        pch = 1)"},{"path":"https://lgatto.github.io/pRoloc/articles/v01-pRoloc-tutorial.html","id":"sec:gui","dir":"Articles","previous_headings":"Data visualisation","what":"Interactive visualisation","title":"Using pRoloc for spatial proteomics data analysis","text":"pRolocGUI application allows one explore spatial proteomics data using interactive, web-based interface (RStudio Inc. 2014). package available Bioconductor can installed started follows: details available vignette can started application clicking question marks, starting vignette R vignette(\"pRolocGUI\") can accessed online (http://bioconductor.org/packages/devel/bioc/vignettes/pRolocGUI/inst/doc/pRolocGUI.html).","code":"library(\"BiocManager\") BiocManager::install(\"pRolocGUI\") library(\"pRolocGUI\") pRolocVis(tan2009r1)"},{"path":"https://lgatto.github.io/pRoloc/articles/v01-pRoloc-tutorial.html","id":"sec:qsep","dir":"Articles","previous_headings":"","what":"Assessing sub-cellular resolution","title":"Using pRoloc for spatial proteomics data analysis","text":"sub-cellular resolution spatial proteomics experiment, .e. quantitation well respective sub-cellular niches separated, can computed QSep function. Briefly, function compares, pairs sub-cellular niches, ratio average Euclidean distance niche j average within distance cluster j. large ratio indicates j well separated respect thighness cluster j. larger distances, better spatial proteomics experiment. , calulate visualise QSep distances hyperLOPIT2015 data:   See Assessing sub-cellular resolution spatial proteomics experiments (Gatto, Breckels, Lilley 2018) details, including large meta-analysis 29 different spatial proteomics experiments.","code":"library(\"pRolocdata\") data(hyperLOPIT2015)  ## Create the object and get a summary hlq <- QSep(hyperLOPIT2015) hlq ## Object of class 'QSep'. ##  Data: hyperLOPIT2015  ##  With 14 sub-cellular clusters. levelPlot(hlq) plot(hlq)"},{"path":"https://lgatto.github.io/pRoloc/articles/v01-pRoloc-tutorial.html","id":"sec:analysis","dir":"Articles","previous_headings":"","what":"Data analysis","title":"Using pRoloc for spatial proteomics data analysis","text":"Classification proteins, .e. assigning sub-cellular localisation proteins, main aspect present data analysis. principle following , basic form, 2 step process. First, algorithm learns known markers shown models data space accordingly. phase also called training phase. second phase, un-labelled proteins, .e. labelled resident organelle, matched model assigned group (organelle). 2 step process called machine learning (ML), computer (machine) learns recognise instances possess certain characteristics classifies without human intervention. however mean results can trusted blindly. paragraph, defined called supervised ML, algorithm presented know instances learns (see section @ref(sec:sml)). Alternatively, un-supervised ML make assumptions group memberships, uses structure data defined sub-groups (see section @ref(sec:usml)). course possible classify data based labelled unlabelled data. extension supervised classification problem described called semi-supervised learning. case, training data consists labelled unlabelled instances obvious goal generating better classifier possible labelled data . phenoDisco algorithm, illustrated context (section @ref(sec:ssml)).","code":""},{"path":"https://lgatto.github.io/pRoloc/articles/v01-pRoloc-tutorial.html","id":"sec:usml","dir":"Articles","previous_headings":"Data analysis","what":"Unsupervised ML","title":"Using pRoloc for spatial proteomics data analysis","text":"plot2D can also used visualise data PCA plot omitting marker definitions, shown figure @ref(fig:plot2dnull). approach avoids bias towards marker definitions concentrate data underlying structure . Plain PCA representation tan2009r1 data. Alternatively, pRoloc also gives access MLInterfaces’s MLean unified interface , among others, unsupervised approaches using k-means (figure @ref(fig:plotKmeans)), hierarchical (figure @ref(fig:plotHclust)) partitioning around medoids (figure @ref(fig:plotPam)), clustering. k-means clustering tan2009r1 data. Hierarchical clustering tan2009r1 data. Partitioning around medoids tan2009r1 data.","code":"plot2D(tan2009r1, fcol = NULL) kcl <- MLearn( ~ ., tan2009r1,  kmeansI, centers=5) plot(kcl, exprs(tan2009r1)) hcl <- MLearn( ~ ., tan2009r1,           hclustI(distFun = dist,               cutParm = list(k = 5))) plot(hcl, labels = FALSE) pcl <- MLearn( ~ ., tan2009r1,  pamI(dist), k = 5) plot(pcl, data = exprs(tan2009r1))"},{"path":"https://lgatto.github.io/pRoloc/articles/v01-pRoloc-tutorial.html","id":"sec:sml","dir":"Articles","previous_headings":"Data analysis","what":"Supervised ML","title":"Using pRoloc for spatial proteomics data analysis","text":"section, show use pRoloc run typical supervised ML analysis. Several ML methods available, including k-nearest neighbour (knn), partial least square discriminant analysis (plsda), random forest (rf), support vector machines (svm), detailed description method outside scope document. use support vector machines illustrate typical pipeline important points paid attention . points equally valid work, pRoloc user perspective, exactly approaches.","code":""},{"path":"https://lgatto.github.io/pRoloc/articles/v01-pRoloc-tutorial.html","id":"classification-algorithm-parameters-optimisation","dir":"Articles","previous_headings":"Data analysis > Supervised ML","what":"Classification algorithm parameters optimisation","title":"Using pRoloc for spatial proteomics data analysis","text":"actually generating model new markers classifying unknown residents, one take care properly setting model parameters. Wrongly set parameters can negative impact classification performance. , create testing (model) training (predict) subsets using known residents, .e. marker proteins. comparing observed expected classification prediction, can assess well given model works using macro F1 score (see ). procedure repeated range possible model parameter values (called grid search), best performing set parameters used construct model markers predict un-labelled proteins. parameter optimisation procedure perform well produce useful results, essential run reasonable amount markers. experience, 15 marker proteins necessary. Model accuracy evaluated using F1 score, F1=2precision×recallprecision+recallF1 = 2 ~ \\frac{precision \\times recall}{precision + recall}, calculated harmonic mean precision (precision=tptp+fpprecision = \\frac{tp}{tp+fp}, measure exactness – returned output relevant result) recall (recall=tptp+fnrecall=\\frac{tp}{tp+fn}, measure completeness – indicating much missed output). aiming high generalisation accuracy, .e high F1F1, indicating marker proteins test data set consistently correctly assigned algorithms. order evaluate well classifier performs profiles exposed creation, implemented following schema. set marker protein profiles, .e. labelled known organelle association, separated training test/validation partitions sampling 80% profile corresponding organelle (.e. stratified) without replacement form training partition StrS_{tr} remainder becoming test/validation partition StsS_{ts}. svm regularisation parameter CC Gaussian kernel width sigmasigma selected using round stratified five-fold cross-validation training partition. pairs parameters (Ci,sigmaj)(C_i, sigma_j) consideration assessed using macro F1 score pair produces best performance subsequently employed training classifier training profiles StrS_{tr} prior assessment test/validation profiles StsS_{ts}. procedure repeated NN times (example 10) order produce NN macro F1 estimated generalisation performance values (figures @ref(fig:params1) @ref(fig:params2)). procedure implemented svmOptimisation. See ?svmOptimisation details, particular range CC sigmasigma parameters relevant feature variable defined fcol parameters, defaults \"markers\". interest time, optimisation executed loaded Assessing parameter optimisation. , see respective distributions 10 macro F1 scores best cost/sigma parameter pairs. See also output f1Count relation plot. Assessing parameter optimisation. Visualisation averaged macro F1 scores, full range parameter values. addition plots figures @ref(fig:params1) @ref(fig:params2), f1Count(params) returns, combination parameters, number best (highest) F1 observations. One can use getParams see default set parameters chosen based executed optimisation. Currently, first best set automatically extracted, users advised critically assess whether wise choice. Important essential emphasise accuracy scores obtained parameter optimisation reflection classification performance set distinct ideally separated spatial clusters. , assume data characterised good separation various spatial niches reflected sub-cellular markers. Quality control data markers using visualisation described section @ref(sec:viz) essential subsequent analyses doomed fail absence separation. classification scores representative reliability final classification (described section @ref(sec:sml)), particular along boundaries separating different sub-cellular niches. High scores optimisation stage requirement proceed analysis, means indicative false positive rate final sub-cellular assignment non-marker proteins.","code":"params <- svmOptimisation(tan2009r1, fcol = \"markers.orig\",               times = 100, xval = 5,               verbose = FALSE) fn <- dir(system.file(\"extdata\", package = \"pRoloc\"),       full.names = TRUE, pattern = \"params.rda\") load(fn) params ## Object of class \"GenRegRes\" ## Algorithm: svm  ## Hyper-parameters: ##  cost: 0.0625 0.125 0.25 0.5 1 2 4 8 16 ##  sigma: 0.01 0.1 1 10 100 1000 ## Design: ##  Replication: 10 x 5-fold X-validation ##  Partitioning: 0.2/0.8 (test/train) ## Results ##  macro F1: ##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  ##  0.8889  0.8889  1.0000  0.9556  1.0000  1.0000  ##  best sigma: 0.1 1    ##  best cost: 0.5 1 plot(params) levelPlot(params) f1Count(params) ##     0.5 1 ## 0.1   1 0 ## 1    NA 5 getParams(params) ## sigma  cost  ##   0.1   0.5"},{"path":"https://lgatto.github.io/pRoloc/articles/v01-pRoloc-tutorial.html","id":"classification","dir":"Articles","previous_headings":"Data analysis > Supervised ML","what":"Classification","title":"Using pRoloc for spatial proteomics data analysis","text":"can now re-use result parameter optimisation (best cost/sigma pair going automatically extracted, using getParams method, although possible set manually), use build model marker proteins predict unknown residents using svmClassification function (see manual page details). default, organelle markers defined \"markers\" feature variables (can defined fcol parameter) e.g. use original markers \"markers.orig\" use case. New feature variables containing organelle assignments assignment probabilities, called scores hereafter, automatically added featureData slot; case, using svm svm.scores labels. Important calculation classification probabilities dependent classification algorithm. probabilities compared across algorithms; reflect biologically relevant sub-cellular localisation probability rather algorithm-specific classification confidence score.} original markers, classification results scores can accessed fData accessor method, e.g. fData(svmres)$svm fData(svmres)$svm.scores. Two helper functions, getMarkers getPredictions available add level automation functionality, assuming default feature labels used. (invisibly) return corresponding feature variable (markers assigned classification) print summary table. fcol parameter must specified getPredictions. also possible defined classification probability classifications set \"unknown\". graphically illustrate organelle-specific score distributions, can use boxplot plot scores respective predicted svm classes, shown figure @ref(fig:predscores). can seen, different organelles characterised different score distributions. Using unique threshold (minprob value 0.78 ) results accepting 72% initial ER predictions 47% mitochondrion predictions. getPredictions function also accepts organelle-specific score thresholds. , calculate organelle-specific median scores. Organelle-specific SVM score distributions. Using scores equates choosing 50% predictions highest scores organelle. can now visualise results using plotting functions presented section @ref(sec:usml), shown figure @ref(fig:svmres). clearly see besides organelle marker clusters assigned high confidence members, many proteins substantially lower prediction scores. Representation svm prediction tan2009r1 data set. svm scores used set point size (cex argument; scores transformed emphasise extremes). Different symbols (fpch) used differentiate markers new assignments.","code":"## manual setting of parameters svmres <- svmClassification(tan2009r1, fcol = \"markers.orig\",                 sigma = 1, cost = 1) ## using default best parameters svmres <- svmClassification(tan2009r1, fcol = \"markers.orig\",                 assessRes = params) ## [1] \"markers.orig\" processingData(svmres) ## - - - Processing information - - - ## Added markers from  'mrk' marker vector. Thu Jul 16 22:53:44 2015  ## Performed svm prediction (sigma=0.1 cost=0.5) Sat Nov 23 16:05:19 2024  ##  MSnbase version: 1.17.12 tail(fvarLabels(svmres), 4) ## [1] \"markers\"    \"markers.tl\" \"svm\"        \"svm.scores\" p1 <- getPredictions(svmres, fcol = \"svm\") ## ans ##  Cytoskeleton            ER         Golgi      Lysosome mitochondrion  ##             7           241            39             8           219  ##       Nucleus    Peroxisome            PM    Proteasome  Ribosome 40S  ##            21             4           282            15            20  ##  Ribosome 60S  ##            32 p1 <- fData(p1)$svm.pred minprob <- median(fData(svmres)$svm.scores) p2 <- getPredictions(svmres, fcol = \"svm\", t = minprob) ## ans ##  Cytoskeleton            ER         Golgi      Lysosome mitochondrion  ##             7           174            21             8           102  ##       Nucleus    Peroxisome            PM    Proteasome  Ribosome 40S  ##            21             4           148            15            20  ##  Ribosome 60S       unknown  ##            32           336 p2 <- fData(p2)$svm.pred table(p1, p2) ##                p2 ## p1              Cytoskeleton  ER Golgi Lysosome mitochondrion Nucleus ##   Cytoskeleton             7   0     0        0             0       0 ##   ER                       0 174     0        0             0       0 ##   Golgi                    0   0    21        0             0       0 ##   Lysosome                 0   0     0        8             0       0 ##   mitochondrion            0   0     0        0           102       0 ##   Nucleus                  0   0     0        0             0      21 ##   Peroxisome               0   0     0        0             0       0 ##   PM                       0   0     0        0             0       0 ##   Proteasome               0   0     0        0             0       0 ##   Ribosome 40S             0   0     0        0             0       0 ##   Ribosome 60S             0   0     0        0             0       0 ##                p2 ## p1              Peroxisome  PM Proteasome Ribosome 40S Ribosome 60S unknown ##   Cytoskeleton           0   0          0            0            0       0 ##   ER                     0   0          0            0            0      67 ##   Golgi                  0   0          0            0            0      18 ##   Lysosome               0   0          0            0            0       0 ##   mitochondrion          0   0          0            0            0     117 ##   Nucleus                0   0          0            0            0       0 ##   Peroxisome             4   0          0            0            0       0 ##   PM                     0 148          0            0            0     134 ##   Proteasome             0   0         15            0            0       0 ##   Ribosome 40S           0   0          0           20            0       0 ##   Ribosome 60S           0   0          0            0           32       0 boxplot(svm.scores ~ svm, data = fData(svmres),     ylab = \"SVM scores\") abline(h = minprob, lwd = 2, lty = 2) ts <- orgQuants(svmres, fcol = \"svm\", t = .5) ##            ER         Golgi mitochondrion            PM  ##     0.8374491     0.6318175     0.7483629     0.7725315 getPredictions(svmres, fcol = \"svm\", t = ts) ## ans ##  Cytoskeleton            ER         Golgi      Lysosome mitochondrion  ##             7           135            26             8           124  ##       Nucleus    Peroxisome            PM    Proteasome  Ribosome 40S  ##            21             4           158            15            20  ##  Ribosome 60S       unknown  ##            32           338 ## MSnSet (storageMode: lockedEnvironment) ## assayData: 888 features, 4 samples  ##   element names: exprs  ## protocolData: none ## phenoData ##   sampleNames: X114 X115 X116 X117 ##   varLabels: Fractions ##   varMetadata: labelDescription ## featureData ##   featureNames: P20353 P53501 ... P07909 (888 total) ##   fvarLabels: FBgn Protein.ID ... svm.pred (19 total) ##   fvarMetadata: labelDescription ## experimentData: use 'experimentData(object)' ##   pubMedIds: 19317464  ## Annotation:   ## - - - Processing information - - - ## Added markers from  'mrk' marker vector. Thu Jul 16 22:53:44 2015  ## Performed svm prediction (sigma=0.1 cost=0.5) Sat Nov 23 16:05:19 2024  ## Added svm predictions according to thresholds: ER = 0.84, Golgi = 0.63, mitochondrion = 0.75, PM = 0.77 Sat Nov 23 16:05:19 2024  ##  MSnbase version: 1.17.12 ptsze <- exp(fData(svmres)$svm.scores) - 1 plot2D(svmres, fcol = \"svm\", fpch = \"markers.orig\",        cex = ptsze) addLegend(svmres, fcol = \"svm\",       where = \"bottomright\",       cex = .5)"},{"path":"https://lgatto.github.io/pRoloc/articles/v01-pRoloc-tutorial.html","id":"sec:bayes","dir":"Articles","previous_headings":"Data analysis","what":"Bayesian generative models","title":"Using pRoloc for spatial proteomics data analysis","text":"also offer generative models , opposed descriptive classifier presented , explicitly model spatial proteomics data. pRoloc, probose two models using T-augmented Gaussian mixtures using repectively Expectration-Maximisation approach maximum posteriori estimation model parameters (TAGM-MAP), MCMC approach (TAGM-MCMC) enables proteome-wide uncertainty quantitation. methods described pRoloc-bayesian vignette. details description methods validation, please refer (Crook et al. 2018).","code":""},{"path":"https://lgatto.github.io/pRoloc/articles/v01-pRoloc-tutorial.html","id":"sec:ssml","dir":"Articles","previous_headings":"Data analysis","what":"Semi-supervised ML","title":"Using pRoloc for spatial proteomics data analysis","text":"obvious original set markers initially used (ER, Golgi, mitochondrion, PM) biologically realistic representation organelle diversity. Manually finding markers however time consuming, requires careful verification annotation, possibly critical subsequent analysis, markers directly used training phase supervised ML approach. can seen PCA plots , inherent structure data can made use automate detection new clusters. phenoDisco algorithm (Breckels et al. 2013) iterative method, combines classification proteins known groups detection new clusters. available pRoloc though phenoDisco function. , interest time, phenoDisco executed vignette dynamically built. data object can located extdata direcoty loaded : results also appended featureData slot. plot2D function, can, previously, utilised visualise results, shown figure @ref(fig:pdres). Representation phenoDisco prediction cluster discovery results.","code":"pdres <- phenoDisco(tan2009r1, GS = 10,                     times = 100, fcol = \"PLSDA\") fn <- dir(system.file(\"extdata\", package = \"pRoloc\"),       full.names = TRUE, pattern = \"pdres.rda\") load(fn) processingData(pdres) ## - - - Processing information - - - ## Combined [888,4] and [1,4] MSnSets Wed Feb 13 17:28:54 2013  ## Run phenoDisco using 'PLSDA': Wed Feb 13 17:28:54 2013  ##   with parameters times=100, GS=10, p=0.05, r=1.  ##  MSnbase version: 1.5.13 tail(fvarLabels(pdres), 3) ## [1] \"PLSDA\"   \"markers\" \"pd\" plot2D(pdres, fcol = \"pd\") addLegend(pdres, fcol = \"pd\", ncol = 2,       where = \"bottomright\",       cex = .5)"},{"path":"https://lgatto.github.io/pRoloc/articles/v01-pRoloc-tutorial.html","id":"sec:followup","dir":"Articles","previous_headings":"Data analysis","what":"Following up on novelty discovery","title":"Using pRoloc for spatial proteomics data analysis","text":"newly discovered phenotypes need carefully validated prior analysis. Indeed, structure data made use discovery algorithm, might represent peculiar structure data match biologically relevant groups. tan2009r1 data submitted careful phenodisco analysis validation (Breckels et al. 2013). results new, augmented marker set available pd.markers feature data. markers represent combined set original markers validated proteins new phenotypes. augmented set markers now employed repeat classification using support vector machine classifier. apply slightly different analysis described section @ref(sec:sml). code chunks , use class specific weights creating svm model; weights set inversely proportional class frequencies. , results pre-computed available extdata package directory. data visualised described previously, use svm classification -posteriori probability set point size. Classification results. results second round classification, using augmented set markers obtained using phenoDisco detailed (Breckels et al. 2013) weighted svm classifier.","code":"getMarkers(tan2009r1, fcol = \"pd.markers\") ## organelleMarkers ##  Cytoskeleton            ER         Golgi      Lysosome mitochondrion  ##             7            20             6             8            14  ##       Nucleus    Peroxisome            PM    Proteasome  Ribosome 40S  ##            20             4            15            11            14  ##  Ribosome 60S       unknown  ##            25           744 w <- classWeights(tan2009r1, fcol = \"pd.markers\") w ##  ##  Cytoskeleton            ER         Golgi      Lysosome mitochondrion  ##    0.14285714    0.05000000    0.16666667    0.12500000    0.07142857  ##       Nucleus    Peroxisome            PM    Proteasome  Ribosome 40S  ##    0.05000000    0.25000000    0.06666667    0.09090909    0.07142857  ##  Ribosome 60S  ##    0.04000000 params2 <- svmOptimisation(tan2009r1, fcol = \"pd.markers\",                times = 10, xval = 5,                class.weights = w,                verbose = FALSE) fn <- dir(system.file(\"extdata\", package = \"pRoloc\"),       full.names = TRUE, pattern = \"params2.rda\") load(fn) tan2009r1 <- svmClassification(tan2009r1, params2,                                class.weights = w,                                fcol = \"pd.markers\") ## [1] \"pd.markers\" ptsze <- exp(fData(tan2009r1)$svm.scores) - 1 plot2D(tan2009r1, fcol = \"svm\", cex = ptsze) addLegend(tan2009r1, fcol = \"svm\",       where = \"bottomright\",       ncol = 2, cex = .5)"},{"path":"https://lgatto.github.io/pRoloc/articles/v01-pRoloc-tutorial.html","id":"sec:ccl","dir":"Articles","previous_headings":"","what":"Conclusions","title":"Using pRoloc for spatial proteomics data analysis","text":"tutorial focuses practical aspects organelles proteomics data analysis using pRoloc. Two important aspects illustrates: (1) data generation, manipulation visualisation (2) application contemporary novel machine learning techniques. crucial parts full analysis pipeline covered raw mass-spectrometry quality control, quantitation, post-analysis data validation. Data analysis trivial task, general, one can assume --shelf algorithm perform well. , one emphasis software presented document allowing users track data processing critically evaluate results.","code":""},{"path":"https://lgatto.github.io/pRoloc/articles/v01-pRoloc-tutorial.html","id":"acknowledgement","dir":"Articles","previous_headings":"","what":"Acknowledgement","title":"Using pRoloc for spatial proteomics data analysis","text":"like thank Dr Daniel J.H. Nightingale, Dr Arnoud J. Groen, Dr Claire M. Mulvey Dr Andy Christoforou organelle marker contributions.","code":""},{"path":"https://lgatto.github.io/pRoloc/articles/v01-pRoloc-tutorial.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Using pRoloc for spatial proteomics data analysis","text":"software respective versions used produce document listed .","code":"## R Under development (unstable) (2024-11-20 r87352) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 24.04.1 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] class_7.3-22         pRolocdata_1.45.1    pRoloc_1.47.1        ##  [4] BiocParallel_1.41.0  MLInterfaces_1.87.0  cluster_2.1.6        ##  [7] annotate_1.85.0      XML_3.99-0.17        AnnotationDbi_1.69.0 ## [10] IRanges_2.41.1       MSnbase_2.33.2       ProtGenerics_1.39.0  ## [13] S4Vectors_0.45.2     mzR_2.41.1           Rcpp_1.0.13-1        ## [16] Biobase_2.67.0       BiocGenerics_0.53.3  generics_0.1.3       ## [19] knitr_1.49           BiocStyle_2.35.0     ##  ## loaded via a namespace (and not attached): ##   [1] splines_4.5.0               filelock_1.0.3              ##   [3] tibble_3.2.1                hardhat_1.4.0               ##   [5] preprocessCore_1.69.0       pROC_1.18.5                 ##   [7] rpart_4.1.23                lifecycle_1.0.4             ##   [9] httr2_1.0.6                 doParallel_1.0.17           ##  [11] globals_0.16.3              lattice_0.22-6              ##  [13] MASS_7.3-61                 MultiAssayExperiment_1.33.1 ##  [15] dendextend_1.19.0           magrittr_2.0.3              ##  [17] limma_3.63.2                plotly_4.10.4               ##  [19] sass_0.4.9                  rmarkdown_2.29              ##  [21] jquerylib_0.1.4             yaml_2.3.10                 ##  [23] MsCoreUtils_1.19.0          DBI_1.2.3                   ##  [25] RColorBrewer_1.1-3          lubridate_1.9.3             ##  [27] abind_1.4-8                 zlibbioc_1.53.0             ##  [29] GenomicRanges_1.59.1        purrr_1.0.2                 ##  [31] mixtools_2.0.0              AnnotationFilter_1.31.0     ##  [33] nnet_7.3-19                 rappdirs_0.3.3              ##  [35] ipred_0.9-15                lava_1.8.0                  ##  [37] GenomeInfoDbData_1.2.13     listenv_0.9.1               ##  [39] gdata_3.0.1                 parallelly_1.39.0           ##  [41] pkgdown_2.1.1.9000          ncdf4_1.23                  ##  [43] codetools_0.2-20            DelayedArray_0.33.2         ##  [45] xml2_1.3.6                  tidyselect_1.2.1            ##  [47] farver_2.1.2                UCSC.utils_1.3.0            ##  [49] viridis_0.6.5               matrixStats_1.4.1           ##  [51] BiocFileCache_2.15.0        jsonlite_1.8.9              ##  [53] caret_6.0-94                e1071_1.7-16                ##  [55] survival_3.7-0              iterators_1.0.14            ##  [57] systemfonts_1.1.0           foreach_1.5.2               ##  [59] segmented_2.1-3             tools_4.5.0                 ##  [61] progress_1.2.3              ragg_1.3.3                  ##  [63] glue_1.8.0                  prodlim_2024.06.25          ##  [65] gridExtra_2.3               SparseArray_1.7.2           ##  [67] xfun_0.49                   MatrixGenerics_1.19.0       ##  [69] GenomeInfoDb_1.43.1         dplyr_1.1.4                 ##  [71] withr_3.0.2                 BiocManager_1.30.25         ##  [73] fastmap_1.2.0               fansi_1.0.6                 ##  [75] digest_0.6.37               timechange_0.3.0            ##  [77] R6_2.5.1                    textshaping_0.4.0           ##  [79] colorspace_2.1-1            gtools_3.9.5                ##  [81] lpSolve_5.6.22              biomaRt_2.63.0              ##  [83] RSQLite_2.3.8               utf8_1.2.4                  ##  [85] tidyr_1.3.1                 hexbin_1.28.5               ##  [87] data.table_1.16.2           recipes_1.1.0               ##  [89] FNN_1.1.4.1                 prettyunits_1.2.0           ##  [91] PSMatch_1.11.0              httr_1.4.7                  ##  [93] htmlwidgets_1.6.4           S4Arrays_1.7.1              ##  [95] ModelMetrics_1.2.2.2        pkgconfig_2.0.3             ##  [97] gtable_0.3.6                timeDate_4041.110           ##  [99] blob_1.2.4                  impute_1.81.0               ## [101] XVector_0.47.0              htmltools_0.5.8.1           ## [103] bookdown_0.41               MALDIquant_1.22.3           ## [105] clue_0.3-66                 scales_1.3.0                ## [107] png_0.1-8                   gower_1.0.1                 ## [109] reshape2_1.4.4              coda_0.19-4.1               ## [111] nlme_3.1-166                curl_6.0.1                  ## [113] proxy_0.4-27                cachem_1.1.0                ## [115] stringr_1.5.1               parallel_4.5.0              ## [117] mzID_1.45.0                 vsn_3.75.0                  ## [119] desc_1.4.3                  pillar_1.9.0                ## [121] grid_4.5.0                  vctrs_0.6.5                 ## [123] pcaMethods_1.99.0           randomForest_4.7-1.2        ## [125] dbplyr_2.5.0                xtable_1.8-4                ## [127] evaluate_1.0.1              mvtnorm_1.3-2               ## [129] cli_3.6.3                   compiler_4.5.0              ## [131] rlang_1.1.4                 crayon_1.5.3                ## [133] future.apply_1.11.3         labeling_0.4.3              ## [135] LaplacesDemon_16.1.6        mclust_6.1.1                ## [137] QFeatures_1.17.0            affy_1.85.0                 ## [139] plyr_1.8.9                  fs_1.6.5                    ## [141] stringi_1.8.4               viridisLite_0.4.2           ## [143] munsell_0.5.1               Biostrings_2.75.1           ## [145] lazyeval_0.2.2              Matrix_1.7-1                ## [147] hms_1.1.3                   bit64_4.5.2                 ## [149] future_1.34.0               ggplot2_3.5.1               ## [151] KEGGREST_1.47.0             statmod_1.5.0               ## [153] SummarizedExperiment_1.37.0 kernlab_0.9-33              ## [155] igraph_2.1.1                memoise_2.0.1               ## [157] affyio_1.77.0               bslib_0.8.0                 ## [159] sampling_2.10               bit_4.5.0"},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/articles/v02-pRoloc-ml.html","id":"sec:intro","dir":"Articles","previous_headings":"","what":"Introduction","title":"Machine learning techniques available in pRoloc","text":"general practical introduction pRoloc, readers referred tutorial, available using vignette(\"pRoloc-tutorial\", package = \"pRoloc\"). following document provides overview algorithms available package. respective section describe unsupervised machine learning (USML), supervised machine learning (SML), semi-supervised machine learning (SSML) implemented novelty detection algorithm transfer learning.","code":""},{"path":"https://lgatto.github.io/pRoloc/articles/v02-pRoloc-ml.html","id":"data-sets","dir":"Articles","previous_headings":"","what":"Data sets","title":"Machine learning techniques available in pRoloc","text":"provide 144 test data sets pRolocdata package can readily used pRoloc. data set can listed pRolocdata loaded data function. data set, including origin, individually documented. data sets distributed MSnSet instances. Briefly, dedicated containers quantitation data well feature sample meta-data. details MSnSets available pRoloc tutorial MSnbase package, defined class.","code":"library(\"pRolocdata\") data(tan2009r1) tan2009r1 ## MSnSet (storageMode: lockedEnvironment) ## assayData: 888 features, 4 samples  ##   element names: exprs  ## protocolData: none ## phenoData ##   sampleNames: X114 X115 X116 X117 ##   varLabels: Fractions ##   varMetadata: labelDescription ## featureData ##   featureNames: P20353 P53501 ... P07909 (888 total) ##   fvarLabels: FBgn Protein.ID ... markers.tl (16 total) ##   fvarMetadata: labelDescription ## experimentData: use 'experimentData(object)' ##   pubMedIds: 19317464  ## Annotation:   ## - - - Processing information - - - ## Added markers from  'mrk' marker vector. Thu Jul 16 22:53:44 2015  ##  MSnbase version: 1.17.12"},{"path":"https://lgatto.github.io/pRoloc/articles/v02-pRoloc-ml.html","id":"other-omics-data","dir":"Articles","previous_headings":"Data sets","what":"Other omics data","title":"Machine learning techniques available in pRoloc","text":"primary biological domain quantitative proteomics, special emphasis spatial proteomics, underlying class infrastructure pRoloc implemented Bioconductor MSnbase package enables conversion /transcriptomics data, particular microarray data available ExpressionSet objects using coercion methods (see MSnSet section MSnbase-development vignette). result, straightforward apply methods summarised detailed pRoloc vignettes data structures.","code":""},{"path":"https://lgatto.github.io/pRoloc/articles/v02-pRoloc-ml.html","id":"sec:usml","dir":"Articles","previous_headings":"","what":"Unsupervised machine learning","title":"Machine learning techniques available in pRoloc","text":"Unsupervised machine learning refers clustering, .e. finding structure quantitative, generally multi-dimensional data set unlabelled data. Currently, unsupervised clustering facilities available plot2D function MLInterfaces package (Carey et al., n.d.). former takes MSnSet instance represents data scatter plot along first two principal components. Arbitrary feature meta-data can represented using different colours point characters. reader referred manual page available ?plot2D details examples. pRoloc also implements MLean method MSnSet instances, allowing use relevant infrastructure organelle proteomics framework. Although provides common interface unsupervised numerous supervised algorithms, refer pRoloc tutorial usage several clustering algorithms. Note Current development efforts terms clustering described Clustering infrastructure wiki page (https://github.com/lgatto/pRoloc/wiki/Clustering-infrastructure) incorporated future version package.","code":""},{"path":"https://lgatto.github.io/pRoloc/articles/v02-pRoloc-ml.html","id":"sec:sml","dir":"Articles","previous_headings":"","what":"Supervised machine learning","title":"Machine learning techniques available in pRoloc","text":"Supervised machine learning refers broad family classification algorithms. algorithms learns modest set labelled data points called training data. training data example consists pair inputs: actual data, generally represented vector numbers class label, representing membership exactly 1 multiple possible classes. two possible classes, refers binary classification. training data used construct model can used classifier new, unlabelled examples. model takes numeric vectors unlabelled data points return, inputs, corresponding mapped class.","code":""},{"path":"https://lgatto.github.io/pRoloc/articles/v02-pRoloc-ml.html","id":"sec:algo","dir":"Articles","previous_headings":"Supervised machine learning","what":"Algorithms used","title":"Machine learning techniques available in pRoloc","text":"k-nearest neighbour (KNN) Function knn package class. row test set, k nearest (Euclidean distance) training set vectors found, classification decided majority vote k classes, ties broken random. simple algorithm often used baseline classifier. ties kth nearest vector, candidates included vote. Partial least square DA (PLS-DA) Function plsda package . Partial least square discriminant analysis used fit standard PLS model classification. Support vector machine (SVM) support vector machine constructs hyperplane (set hyperplanes multiple-class problem), used classification. best separation defined hyperplane largest distance (margin) nearest data points class, also reduces classification generalisation error. assure liner separation classes, data transformed using kernel function high-dimensional space, permitting liner separation classes. pRoloc makes use functions svm package ksvm . Artificial neural network (ANN) Function nnet package . Fits single-hidden-layer neural network, possibly skip-layer connections. Naive Bayes (NB) Function naiveBayes package . Naive Bayes classifier computes conditional -posterior probabilities categorical class variable given independent predictor variables using Bayes rule. Assumes independence predictor variables, Gaussian distribution (given target class) metric predictors. Random Forest (RF) Function randomForest package . Chi-square (χ2\\chi^2) Assignment based squared differences labelled marker new feature classified. Canonical protein correlation profile method (PCP) uses squared differences labelled marker new features. (Andersen et al. 2003), χ2\\chi^2 defined , .e. χ2=∑=1n(xi−mi)2n\\chi^{2} = \\frac{\\sum_{=1}^{n} (x_i - m_i)^{2}}{n}, whereas (Wiese et al. 2007) divide value squared value value reference feature fraction, .e. χ2=∑=1n(xi−mi)2mi\\chi^{2} = \\sum_{=1}^{n}\\frac{(x_i - m_i)^{2}}{m_i}, xix_i normalised intensity feature x fraction , mim_i normalised intensity marker m fraction n number fractions available. use former definition. PerTurbo  (Courty, Burger, Laurent 2011): PerTurbo, original, non-parametric efficient classification method presented . framework, manifold class characterised Laplace-Beltrami operator, evaluated classical methods involving graph Laplacian. classification criterion established thanks measure magnitude spectrum perturbation operator. first experiments show good performances classical algorithms state---art. Moreover, measure derived efficient policy design sampling queries context active learning. Performances collected toy examples real world datasets assess qualities strategy. PerTurbo implementation comes pRoloc packages.","code":""},{"path":"https://lgatto.github.io/pRoloc/articles/v02-pRoloc-ml.html","id":"estimating-algorithm-parameters","dir":"Articles","previous_headings":"Supervised machine learning","what":"Estimating algorithm parameters","title":"Machine learning techniques available in pRoloc","text":"essential applying classification algorithms, wisely set algorithm parameters, can important effect classification. parameters example width sigma Radial Basis Function (Gaussian kernel) exp(−σ∥x−x′∥2)exp(-\\sigma \\| x - x' \\|^2 ) cost (slack) parameter (controlling tolerance mis-classification) SVM classifier. number neighbours k KNN classifier equally important discussed sections. next figure illustrates effect different choices kk using organelle proteomics data (Dunkley et al. 2006) (dunkley2006 pRolocdata). highlighted squared region, can see using low kk (k = 1 left) result specific classification boundaries precisely follow contour marker set opposed higher number neighbours (k = 8 right). one tempted believe optimised classification boundaries preferable, essential remember boundaries specific marker set used construct , absolutely reason expect regions faithfully separate new data points, particular proteins wish classify organelle. words, highly specific k = 1 classification boundaries -fitted marker set , words, lack generalisation new instances. demonstrate using simulated data taken (James et al. 2013) show detrimental effect -fitting new data. figure uses 2 x 100 simulated data points belonging either orange blue classes. genuine classes points known (solid lines) KNN algorithm applied using k = 1 (left) k = 100 (right) respectively (purple dashed lines). organelle proteomics examples, observe k = 1, decision boundaries overly flexible identify patterns data reflect correct boundaries (cases, classifier said low bias high variance). large k used, classifier becomes inflexible produces approximate nearly linear separation boundaries (classifier said low variance high bias). simulated data set, neither k = 1 k = 100 give good predictions test error rates (.e. proportion wrongly classified points) 0.1695 0.1925, respectively. quantify effect flexibility lack thereof defining classification boundaries, (James et al. 2013) calculate classification error rates using training data (training error rate) testing data (testing error rate). latter completely new data used assess model error rate defining algorithm parameters; one often says model used classification seen data. model performs well new data, said generalise well. quality required cases, particular organelle proteomics experiments training data corresponds marker sets. Figure @ref{fig:ISL2} plots respective training testing error rates function 1/k reflection flexibility/complexity model; 1/k = 1, .e. k = 1 (far right), flexible model risk -fitting. Greater values k (towards left) characterise less flexible models. can seen, high values k produce poor performance training testing data. However, training error steadily decreases model complexity increases (smaller k), testing error rate displays typical U-shape: value around k = 10, testing error rate reaches minimum starts increase due -fitting training data lack generalisation model. results show adequate optimisation model parameters essential avoid either flexible models (generalise well new data) models describe decision boundaries adequately. parameter selection achieved cross validation, initial marker proteins separated training data used build classification models independent testing data used assess model new data. recommend book Introduction Statistical Learning (http://www-bcf.usc.edu/~gareth/ISL/) (James et al. 2013) detailed introduction machine learning.","code":""},{"path":"https://lgatto.github.io/pRoloc/articles/v02-pRoloc-ml.html","id":"default-analysis-scheme","dir":"Articles","previous_headings":"Supervised machine learning","what":"Default analysis scheme","title":"Machine learning techniques available in pRoloc","text":", present typical classification analysis using pRoloc. analysis typically consists two steps. first one optimise classifier parameters used training testing (see ). range parameters tested using labelled data, labels known. set parameters, hide labels subset labelled data use part train model apply testing data hidden labels. comparison estimated expected labels enables assess validity model hence adequacy parameters. adequate parameters identified, used infer model complete organelle marker set used infer sub-cellular location unlabelled examples.","code":""},{"path":"https://lgatto.github.io/pRoloc/articles/v02-pRoloc-ml.html","id":"parameter-optimisation","dir":"Articles","previous_headings":"Supervised machine learning","what":"Parameter optimisation","title":"Machine learning techniques available in pRoloc","text":"Algorithmic performance estimated using stratified 20/80 partitioning. 80% partitions subjected 5-fold cross-validation order optimise free parameters via grid search, parameters applied remaining 20%. procedure repeated n = 100 times sample n accuracy metrics (see ) values using n, possibly different, optimised parameters evaluation. Models accuracy evaluated using F1 score, F1=2precision×recallprecision+recallF1 = 2 ~ \\frac{precision \\times recall}{precision + recall}, calculated harmonic mean precision (precision=tptp+fpprecision = \\frac{tp}{tp+fp}, measure exactness – returned output relevant result) recall (recall=tptp+fnrecall=\\frac{tp}{tp+fn}, measure completeness – indicating much missed output). aiming high generalisation accuracy, .e high F1F1, indicating marker proteins test data set consistently correctly assigned algorithms. results optimisation procedure stored GenRegRes object can inspected, plotted best parameter pairs can extracted. given algorithm alg, corresponding parameter optimisation function names algOptimisation , equivalently, algOptimization. See table details. description respective model parameters provided optimisation function manuals, available ?algOptimisation.","code":"params <- svmOptimisation(tan2009r1, times = 10,                           xval = 5, verbose = FALSE) params ## Object of class \"GenRegRes\" ## Algorithm: svm  ## Hyper-parameters: ##  cost: 0.0625 0.125 0.25 0.5 1 2 4 8 16 ##  sigma: 0.001 0.01 0.1 1 10 100 ## Design: ##  Replication: 10 x 5-fold X-validation ##  Partitioning: 0.2/0.8 (test/train) ## Results ##  macro F1: ##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  ##  0.7804  0.8085  0.8211  0.8412  0.8842  0.9385  ##  best sigma: 0.1 1    ##  best cost: 8 16 2 1    ## Use getWarnings() to see warnings."},{"path":"https://lgatto.github.io/pRoloc/articles/v02-pRoloc-ml.html","id":"classification","dir":"Articles","previous_headings":"Supervised machine learning","what":"Classification","title":"Machine learning techniques available in pRoloc","text":"","code":"tan2009r1 <- svmClassification(tan2009r1, params) ## [1] \"markers\" tan2009r1 ## MSnSet (storageMode: lockedEnvironment) ## assayData: 888 features, 4 samples  ##   element names: exprs  ## protocolData: none ## phenoData ##   sampleNames: X114 X115 X116 X117 ##   varLabels: Fractions ##   varMetadata: labelDescription ## featureData ##   featureNames: P20353 P53501 ... P07909 (888 total) ##   fvarLabels: FBgn Protein.ID ... svm.scores (18 total) ##   fvarMetadata: labelDescription ## experimentData: use 'experimentData(object)' ##   pubMedIds: 19317464  ## Annotation:   ## - - - Processing information - - - ## Added markers from  'mrk' marker vector. Thu Jul 16 22:53:44 2015  ## Performed svm prediction (sigma=1 cost=2) Sat Nov 23 16:06:33 2024  ##  MSnbase version: 1.17.12"},{"path":"https://lgatto.github.io/pRoloc/articles/v02-pRoloc-ml.html","id":"customising-model-parameters","dir":"Articles","previous_headings":"Supervised machine learning","what":"Customising model parameters","title":"Machine learning techniques available in pRoloc","text":"illustrate weight different classes according number labelled instances, large sets weighted. strategy can help imbalanced designs.","code":"w <- table(fData(markerMSnSet(dunkley2006))$markers) wpar <- svmOptimisation(dunkley2006, class.weights = w) wres <- svmClassification(dunkley2006, wpar, class.weights = w)"},{"path":"https://lgatto.github.io/pRoloc/articles/v02-pRoloc-ml.html","id":"comparison-of-different-classifiers","dir":"Articles","previous_headings":"","what":"Comparison of different classifiers","title":"Machine learning techniques available in pRoloc","text":"Several supervised machine learning algorithms already applied organelle proteomics data classification: partial least square discriminant analysis (Dunkley et al. 2006, Tan2009), support vector machines (SVMs) (Trotter et al. 2010), random forest (Ohta et al. 2010), neural networks (Tardif et al. 2012), naive Bayes (Nikolovski et al. 2012). HUPO 2011 poster1, show different classification algorithms provide similar performance. extended comparison various datasets distributed pRolocdata package. figure @ref{fig:f1box}, illustrate different algorithms reach similar performances test datasets.","code":""},{"path":"https://lgatto.github.io/pRoloc/articles/v02-pRoloc-ml.html","id":"sec:bayes","dir":"Articles","previous_headings":"","what":"Bayesian generative models","title":"Machine learning techniques available in pRoloc","text":"also offer generative models , opposed descriptive classifier presented , explicitly model spatial proteomics data. pRoloc, probose two models using T-augmented Gaussian mixtures using repectively Expectration-Maximisation approach maximum posteriori estimation model parameters (TAGM-MAP), MCMC approach (TAGM-MCMC) enables proteome-wide uncertainty quantitation. methods described pRoloc-bayesian vignette. details description methods validation, please refer (Crook et al. 2018): Bayesian Mixture Modelling Approach Spatial Proteomics Oliver M Crook, Claire M Mulvey, Paul D. W. Kirk, Kathryn S Lilley, Laurent Gatto bioRxiv 282269; doi: https://doi.org/10.1101/282269","code":""},{"path":"https://lgatto.github.io/pRoloc/articles/v02-pRoloc-ml.html","id":"sec:ssml","dir":"Articles","previous_headings":"","what":"Semi-supervised machine learning","title":"Machine learning techniques available in pRoloc","text":"phenoDisco algorithm semi-supervised novelty detection method (Lisa M. Breckels et al. 2013) (figure ). uses labelled (.e. markers, noted DLD_L) unlabelled (.e. proteins unknown localisation, noted DUD_U) sets input data. algorithm repeated NN times (times argument phenoDisco function). iteration, organelle class DLiD_{L}^{} unlabelled complement clustered using Gaussian mixture modelling. unlabelled members systematically cluster DLiD_{L}^{} pass outlier detection labelled new putative members class ii, example DUD_U merged DLiD_{L}^{} consistently clustered together throughout NN iterations considered members new phenotype.","code":""},{"path":"https://lgatto.github.io/pRoloc/articles/v02-pRoloc-ml.html","id":"sec:tl","dir":"Articles","previous_headings":"","what":"Transfer learning","title":"Machine learning techniques available in pRoloc","text":"multiple sources data available, often beneficial take several account aim increasing information tackle problem interest. times possible combine different sources data, can lead substantially harm performance analysis different data sources variable signal--noise ratio data drawn different domains recorded different encoding (quantitative binary, example). defined following two data source primary data, high signal--noise ratio, general available limited amounts; auxiliary data, limited signal--noise, available large amounts; , transfer learning algorithm efficiently support/complement primary target domain auxiliary data features without compromising integrity primary data. developed transfer learning framework (L. M. Breckels et al. 2016) applied analysis spatial proteomics data, described pRoloc-transfer-learning vignette.","code":""},{"path":"https://lgatto.github.io/pRoloc/articles/v02-pRoloc-ml.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Machine learning techniques available in pRoloc","text":"software respective versions used produce document listed .","code":"## R Under development (unstable) (2024-11-20 r87352) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 24.04.1 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] pRolocdata_1.45.1    pRoloc_1.47.1        BiocParallel_1.41.0  ##  [4] MLInterfaces_1.87.0  cluster_2.1.6        annotate_1.85.0      ##  [7] XML_3.99-0.17        AnnotationDbi_1.69.0 IRanges_2.41.1       ## [10] MSnbase_2.33.2       ProtGenerics_1.39.0  S4Vectors_0.45.2     ## [13] mzR_2.41.1           Rcpp_1.0.13-1        Biobase_2.67.0       ## [16] BiocGenerics_0.53.3  generics_0.1.3       knitr_1.49           ## [19] BiocStyle_2.35.0     ##  ## loaded via a namespace (and not attached): ##   [1] splines_4.5.0               filelock_1.0.3              ##   [3] tibble_3.2.1                hardhat_1.4.0               ##   [5] preprocessCore_1.69.0       pROC_1.18.5                 ##   [7] rpart_4.1.23                lifecycle_1.0.4             ##   [9] httr2_1.0.6                 doParallel_1.0.17           ##  [11] globals_0.16.3              lattice_0.22-6              ##  [13] MASS_7.3-61                 MultiAssayExperiment_1.33.1 ##  [15] dendextend_1.19.0           magrittr_2.0.3              ##  [17] limma_3.63.2                plotly_4.10.4               ##  [19] sass_0.4.9                  rmarkdown_2.29              ##  [21] jquerylib_0.1.4             yaml_2.3.10                 ##  [23] MsCoreUtils_1.19.0          DBI_1.2.3                   ##  [25] RColorBrewer_1.1-3          lubridate_1.9.3             ##  [27] abind_1.4-8                 zlibbioc_1.53.0             ##  [29] GenomicRanges_1.59.1        purrr_1.0.2                 ##  [31] mixtools_2.0.0              AnnotationFilter_1.31.0     ##  [33] nnet_7.3-19                 rappdirs_0.3.3              ##  [35] ipred_0.9-15                lava_1.8.0                  ##  [37] GenomeInfoDbData_1.2.13     listenv_0.9.1               ##  [39] gdata_3.0.1                 parallelly_1.39.0           ##  [41] pkgdown_2.1.1.9000          ncdf4_1.23                  ##  [43] codetools_0.2-20            DelayedArray_0.33.2         ##  [45] xml2_1.3.6                  tidyselect_1.2.1            ##  [47] UCSC.utils_1.3.0            viridis_0.6.5               ##  [49] matrixStats_1.4.1           BiocFileCache_2.15.0        ##  [51] jsonlite_1.8.9              caret_6.0-94                ##  [53] e1071_1.7-16                survival_3.7-0              ##  [55] iterators_1.0.14            systemfonts_1.1.0           ##  [57] foreach_1.5.2               segmented_2.1-3             ##  [59] tools_4.5.0                 progress_1.2.3              ##  [61] ragg_1.3.3                  glue_1.8.0                  ##  [63] prodlim_2024.06.25          gridExtra_2.3               ##  [65] SparseArray_1.7.2           xfun_0.49                   ##  [67] MatrixGenerics_1.19.0       GenomeInfoDb_1.43.1         ##  [69] dplyr_1.1.4                 withr_3.0.2                 ##  [71] BiocManager_1.30.25         fastmap_1.2.0               ##  [73] fansi_1.0.6                 digest_0.6.37               ##  [75] timechange_0.3.0            R6_2.5.1                    ##  [77] textshaping_0.4.0           colorspace_2.1-1            ##  [79] gtools_3.9.5                lpSolve_5.6.22              ##  [81] biomaRt_2.63.0              RSQLite_2.3.8               ##  [83] utf8_1.2.4                  tidyr_1.3.1                 ##  [85] hexbin_1.28.5               data.table_1.16.2           ##  [87] recipes_1.1.0               FNN_1.1.4.1                 ##  [89] class_7.3-22                prettyunits_1.2.0           ##  [91] PSMatch_1.11.0              httr_1.4.7                  ##  [93] htmlwidgets_1.6.4           S4Arrays_1.7.1              ##  [95] ModelMetrics_1.2.2.2        pkgconfig_2.0.3             ##  [97] gtable_0.3.6                timeDate_4041.110           ##  [99] blob_1.2.4                  impute_1.81.0               ## [101] XVector_0.47.0              htmltools_0.5.8.1           ## [103] bookdown_0.41               MALDIquant_1.22.3           ## [105] clue_0.3-66                 scales_1.3.0                ## [107] png_0.1-8                   gower_1.0.1                 ## [109] reshape2_1.4.4              coda_0.19-4.1               ## [111] nlme_3.1-166                curl_6.0.1                  ## [113] proxy_0.4-27                cachem_1.1.0                ## [115] stringr_1.5.1               parallel_4.5.0              ## [117] mzID_1.45.0                 vsn_3.75.0                  ## [119] desc_1.4.3                  pillar_1.9.0                ## [121] grid_4.5.0                  vctrs_0.6.5                 ## [123] pcaMethods_1.99.0           randomForest_4.7-1.2        ## [125] dbplyr_2.5.0                xtable_1.8-4                ## [127] evaluate_1.0.1              mvtnorm_1.3-2               ## [129] cli_3.6.3                   compiler_4.5.0              ## [131] rlang_1.1.4                 crayon_1.5.3                ## [133] future.apply_1.11.3         LaplacesDemon_16.1.6        ## [135] mclust_6.1.1                QFeatures_1.17.0            ## [137] affy_1.85.0                 plyr_1.8.9                  ## [139] fs_1.6.5                    stringi_1.8.4               ## [141] viridisLite_0.4.2           munsell_0.5.1               ## [143] Biostrings_2.75.1           lazyeval_0.2.2              ## [145] Matrix_1.7-1                hms_1.1.3                   ## [147] bit64_4.5.2                 future_1.34.0               ## [149] ggplot2_3.5.1               KEGGREST_1.47.0             ## [151] statmod_1.5.0               SummarizedExperiment_1.37.0 ## [153] kernlab_0.9-33              igraph_2.1.1                ## [155] memoise_2.0.1               affyio_1.77.0               ## [157] bslib_0.8.0                 sampling_2.10               ## [159] bit_4.5.0"},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/articles/v04-pRoloc-goannotations.html","id":"foreword","dir":"Articles","previous_headings":"","what":"Foreword","title":"Annotating spatial proteomics data","text":"document walks users typical pipeline adding annotation information spatial proteomics data. general practical introduction pRoloc spatial proteomics data analysis, readers referred tutorial, available using vignette(\"pRoloc-tutorial\", package = \"pRoloc\").","code":""},{"path":"https://lgatto.github.io/pRoloc/articles/v04-pRoloc-goannotations.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Annotating spatial proteomics data","text":"Exploring protein annotations defining sub-cellular localisation markers (.e. known residents specific sub-cellular niche species, condition interest) play important roles analysis spatial proteomics data. latter essential downstream supervised machine learning (ML) classification protein localisation prediction (see vignette(\"pRoloc-tutorial\", package = \"pRoloc\") vignette(\"pRoloc-ml\", package = \"pRoloc\") information available ML methods) former interesting initial biological interpretation matching annotations data structure. Robust protein-localisation prediction reliant markers reflect true sub-cellular diversity multivariate data. validity markers generally assured expert curation. can time consuming difficult owing limited number marker proteins exist databases elsewhere. Gene Ontology (GO) database, particular cellular compartment (CC) namespace provide good starting point protein annotation marker definition. Nevertheless, automatic extraction databases, particular GO CC, first step sub-cellular localisation analysis requires additional curation counter unreliable annotation based data inaccurate context biological question investigation. facilitate , developed annotation retrieval management system provides flexible framework exploration sub-cellular proteomics data. developed method correlate annotation information multivariate data space identify densely annotated regions assess cluster tightness. Given set proteins share property e.g. specified GO term, k-means clustering used fit data (testing k = 1:5) number k components tested, pairwise Euclidean distances calculated per component, normalised. minimum mean normalised distance extracted used measure cluster tightness. repeated protein/annotation sets. sets ranked according minimum mean normalised distance can displayed explored using pRolocGUI package. vignette present step--step guide showing users (1) add protein annotations, use GO database example, (2) rank order information (e.g. GO terms) according correlation data structure, extraction optimal data specific annotated clusters.","code":""},{"path":"https://lgatto.github.io/pRoloc/articles/v04-pRoloc-goannotations.html","id":"loading-the-data","dir":"Articles","previous_headings":"","what":"Loading the data","title":"Annotating spatial proteomics data","text":"demonstrate pipeline adding ranking annotation information using LOPIT experiment Pluripotent Mouse Embryonic stems (Christoforou et al 2016), available documented pRolocdata data package hyperlopit2015.","code":"library(\"pRoloc\") library(\"pRolocdata\")  ## Subset data for markers for example data(\"hyperLOPIT2015\") hyperLOPIT2015 <- markerMSnSet(hyperLOPIT2015)"},{"path":"https://lgatto.github.io/pRoloc/articles/v04-pRoloc-goannotations.html","id":"adding-sub-cellular-localisation-information","dir":"Articles","previous_headings":"","what":"Adding sub-cellular localisation information","title":"Annotating spatial proteomics data","text":"GO terms associated proteins appear dataset retrieved used create binary matrix 1 (0) position (,j)(,j) indicates term jj () used annotate feature ii. matrix appended stored feature data slot MSnSet dataset using addGoAnnotations function. first however need prepare annotation parameters enable us query Biomart repository using package, able retrieve GO terms. specific Biomart repository query depend species study type features. can set using setAnnotationParams function. code chunk set annotation parameters hyperLOPIT2015 dataset. species used mouse featureNames hyperLOPIT2015 dataset Uniprot accession numbers input function defined inputs = c(\"Mus musculus\", \"UniProtKB/Swiss-Prot ID\"). See ?setAnnotationParams details. Now parameters search defined can use addGoAnnotations function add GO information matrix featureData slot dataset. addGoAnnotations function takes MSnSet instance input (featureNames extracted) downloads CC terms (default, biological process molecular function namespaces also supported) found protein dataset. output MSnSet CC term binary matrix appended fData, default called GOAnnotations (changed using fcol argument). addGoAnnotations function defualt filtering terms evidence codes unless specified evidence argument, see ?addGoAnnotations details. many well-annotated species datasets containing typically thousands proteins, often find many CC terms, many may particularly meaningful. terms can filtered using filerMinMarkers filterMaxMarkers functions.","code":"params <- setAnnotationParams(inputs = c(\"Mouse genes\",                                          \"UniProtKB/Swiss-Prot ID\")) ## Using species Mouse genes (GRCm39) ## Warning: Ensembl will soon enforce the use of https. ## Ensure the 'host' argument includes \"https://\" ## Using feature type UniProtKB/Swiss-Prot ID(s) [e.g. A0A087WPF7] ## Connecting to Biomart... ## Warning: Ensembl will soon enforce the use of https. ## Ensure the 'host' argument includes \"https://\" cc <- addGoAnnotations(hyperLOPIT2015, params,                        namespace = \"cellular_component\") fvarLabels(cc) ##  [1] \"entry.name\"                \"protein.description\"       ##  [3] \"peptides.rep1\"             \"peptides.rep2\"             ##  [5] \"psms.rep1\"                 \"psms.rep2\"                 ##  [7] \"phenodisco.input\"          \"phenodisco.output\"         ##  [9] \"curated.phenodisco.output\" \"markers\"                   ## [11] \"svm.classification\"        \"svm.score\"                 ## [13] \"svm.top.quartile\"          \"final.assignment\"          ## [15] \"first.evidence\"            \"curated.organelles\"        ## [17] \"cytoskeletal.components\"   \"trafficking.proteins\"      ## [19] \"protein.complexes\"         \"signalling.cascades\"       ## [21] \"oct4.interactome\"          \"nanog.interactome\"         ## [23] \"sox2.interactome\"          \"cell.surface.proteins\"     ## [25] \"markers2015\"               \"TAGM\"                      ## [27] \"GOAnnotations\" ## Next we filter the GO term matrix removing any terms that have ## have less than `n` proteins or greater than `p` % of total proteins ## in the dataset (this removes terms that only have very few proteins ## and very general terms) cc <- filterMinMarkers(cc) cc <- filterMaxMarkers(cc)"},{"path":"https://lgatto.github.io/pRoloc/articles/v04-pRoloc-goannotations.html","id":"correlating-and-ordering-annotation-information","dir":"Articles","previous_headings":"","what":"Correlating and ordering annotation information","title":"Annotating spatial proteomics data","text":"Now extracted filtered annotation information dataset re-order GOAnnotations matrix terms according correlation dataset structure. use orderGoAnnotations function. piece annotation information, e.g. GO CC term matrix, function: Extracts instances (proteins) specified term Fits k component clusters subset using kmeans algorithm (default test k = 1:5). Calculates pairwise Euclidean distances per component cluster Normalises component cubed root number instances per component (set heuristically individual tests can set using argument p) Orders annotation information GOAnnotations according minimum normalised Euclidean distance. find high density clusters low mean normalised Euclidean distances. chunk test try fitting k = 1:3 component clusters per term normalise p = 1/3. ordered terms can displayed using pRolocVis function pRolocGUI package.","code":"## Extract markers can use n to specify to select top n terms res <- orderGoAnnotations(cc, k = 1:3, p = 1/3, verbose = FALSE) ## Calculating GO cluster densities library(\"pRolocGUI\") pRolocVis(res, fcol = \"GOAnnotations\")"},{"path":"https://lgatto.github.io/pRoloc/articles/v04-pRoloc-goannotations.html","id":"examining-distances","dir":"Articles","previous_headings":"Correlating and ordering annotation information","what":"Examining distances","title":"Annotating spatial proteomics data","text":"Instead using orderGoAnnotations function wrapper steps 1 - 5 , possible calculate Euclidean distances manually using clustDist function. input MSnSet dataset matrix markers e.g. GOAnnotations appended fData slot. output \"ClustDistList\". \"ClustDist\" \"ClustDistList\" class summarises algorithm information number k’s tested kmeans, mean normalised pairwise Euclidean distances per numer component clusters tested. can use plotClustDist plotComponents visualise results.   output plotClustDist boxplot normalised distances per term output plotComponents set principal components analysis (PCA) plots, one k tested, highlighting component clusters found according kmeans algorithm. getNormDist function can used extract vector normalised distances. can used rank order terms GOAnnotations matrix, per code chunk . Finally, can use pRolocVis function pRolocGUI visualise clusters.","code":"## Now calculate distances dd <- clustDist(cc, fcol = \"GOAnnotations\", k = 1:3, verbose = FALSE) dd[[1]] ## Object of class \"ClustDist\" ## fcol =  GOAnnotations  ##  term =  GO:0005856  ##  id =  cytoskeleton  ##  nrow =  32  ## k's tested: 1 2 3  ##   Size:  32  ##   Size:  24  ##   Size:  11, 15  ## Clusters info: ##       ks.mean    mean ks.norm     norm ## k = 1       1  0.4208       1  0.13253 ## k = 2       1 *0.2104       1 *0.07293 ## k = 3       2  0.2181       2  0.09381 ## Plot normalised distances plot(dd, p = 1/3) ## Examine kmeans clustering plot(dd[[1]], cc) ## Normalise by n^1/3 minDist <- getNormDist(dd, p = 1/3)  ## Get new order according to lowest distance o <- order(minDist)  ## Re-order `GOAnnotations` matrix in `fData` fData(cc)$GOAnnotations <- fData(cc)$GOAnnotations[, o] pRolocVis(cc, fcol = \"GOAnnotations\")"},{"path":"https://lgatto.github.io/pRoloc/articles/v05-pRoloc-transfer-learning.html","id":"sec:intro","dir":"Articles","previous_headings":"","what":"Introduction","title":"A transfer learning algorithm for spatial proteomics","text":"main data source study protein sub-cellular localisation high-throughput mass spectrometry-based experiments LOPIT, PCP similar designs (see (Gatto et al. 2010) general introduction). Recent optimised experiments result high quality data enabling identification 6000 proteins discriminate numerous sub-cellular sub-organellar niches (Christoforou et al. 2016). Supervised semi-supervised machine learning algorithms can applied assign thousands proteins annotated sub-cellular niches (Lisa M. Breckels et al. 2013, Gatto:2014) (see also pRoloc-tutorial vignette). data constitute main source protein localisation termed thereafter primary data. sources data sub-cellular localisation proteins, Gene Ontology (Ashburner et al. 2000) (particular cellular compartment name space), quantitative features derived protein sequences (pseudo amino acid composition) Human Protein Atlas (Uhlen et al. 2010) cite . data, optimised specific system hand , case annotation feature, reliable experimental data, constitute invaluable, often plentiful source auxiliary information. aim transfer learning algorithm combine different sources data improve overall classification. particular, goal support/complement primary target domain (experimental data) auxiliary data (annotation) features without compromising integrity primary data. vignette, describe application transfer learning algorithms localisation proteins pRoloc package, described Breckels LM, Holden S, Wonjar D, Mulvey CM, Christoforou , Groen , Trotter MW, Kohlbacker O, Lilley KS Gatto L (2016). Learning heterogeneous data sources: application spatial proteomics. PLoS Comput Biol 13;12(5):e1004920. doi: 10.1371/journal.pcbi.1004920. Two algorithms developed: transfer learning algorithm based kk-nearest neighbour classifier, coined kNN-TL hereafter, described section @ref(sec:knntl), one based support vector machine algorithm, termed SVM-TL, described section @ref(sec:svmtl).","code":"library(\"pRoloc\")"},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/articles/v05-pRoloc-transfer-learning.html","id":"sec:goaux","dir":"Articles","previous_headings":"Preparing the auxiliary data","what":"The Gene Ontology","title":"A transfer learning algorithm for spatial proteomics","text":"auxiliary data prepared primary data’s features. GO terms associated features retrieved used create binary matrix one (zero) position (,j)(,j) indicates term jj () used annotate feature ii. GO terms retrieved appropriate repository using biomaRt package. specific Biomart repository query depend species study type features. first step prepare annotation parameters enable perform query. pRoloc package provides dedicated infrastructure set query annotation resource prepare GO data subsequent analyses. infrastructure composed : define annotation parameters based species feature types; query resource defined (1) retrieve relevant terms use terms prepare auxiliary data. demonstrate steps using LOPIT experiment Human Embryonic Kidney (HEK293T) fibroblast cells (Lisa M. Breckels et al. 2013), available documented pRolocdata experiment package andy2011.","code":"library(\"pRolocdata\") data(andy2011)"},{"path":"https://lgatto.github.io/pRoloc/articles/v05-pRoloc-transfer-learning.html","id":"sec:ap","dir":"Articles","previous_headings":"Preparing the auxiliary data > The Gene Ontology","what":"Preparing the query parameters","title":"A transfer learning algorithm for spatial proteomics","text":"query parameters stored AnnotationParams objects created setAnnotationParams function. function present first menu 486. species selected, set possible identifier types displayed. also possible pass patterns match species (\"Human genes\") feature type (\"UniProtKB/Swiss-prot ID\"). setAnnotationParams function automatically sets annotation parameters globally ap object need explicitly set later . default parameters can retrieved getAnnotationParams.","code":"ap <- setAnnotationParams(inputs =                               c(\"Human genes\",                                 \"UniProtKB/Swiss-Prot ID\")) ## Using species Human genes (GRCh38.p13) ## Warning: Ensembl will soon enforce the use of https. ## Ensure the 'host' argument includes \"https://\" ## Using feature type UniProtKB/Swiss-Prot ID(s) [e.g. A0A024R1R8] ## Connecting to Biomart... ## Warning: Ensembl will soon enforce the use of https. ## Ensure the 'host' argument includes \"https://\" ap ## Object of class \"AnnotationParams\" ##  Using the 'ENSEMBL_MART_ENSEMBL' BioMart database ##  Using the 'hsapiens_gene_ensembl' dataset ##  Using 'uniprotswissprot' as filter ##  Created on Sat Nov 23 16:07:23 2024"},{"path":"https://lgatto.github.io/pRoloc/articles/v05-pRoloc-transfer-learning.html","id":"sec:auxgo","dir":"Articles","previous_headings":"Preparing the auxiliary data > The Gene Ontology","what":"Preparing the auxiliary data from the GO ontology","title":"A transfer learning algorithm for spatial proteomics","text":"feature names andy2011 data UniProt identifiers, defined ap accession parameters. makeGoSet function takes MSnSet class (feature names extracted) , directly vector characters containing feature names interest retrieve associated GO terms construct auxiliary MSnSet. default, downloads cellular component terms filtering terms evidence codes (see makeGoSet manual details). Unless passed argument, default, globally set AnnotationParams used define Biomart server query. now primary data set, composed 1371 protein quantitative profiles 8 fractions along density gradient auxiliary data set 918 cellular compartment GO terms 1371 features.","code":"data(andy2011) head(featureNames(andy2011)) ## [1] \"O00767\" \"P51648\" \"Q2TAA5\" \"Q9UKV5\" \"Q12797\" \"P16615\" andygoset <- makeGoSet(andy2011) andygoset ## MSnSet (storageMode: lockedEnvironment) ## assayData: 1371 features, 918 samples  ##   element names: exprs  ## protocolData: none ## phenoData: none ## featureData ##   featureNames: O00767 P51648 ... O75312 (1371 total) ##   fvarLabels: Accession.No. Protein.Description ... ##     UniProtKB.entry.name (10 total) ##   fvarMetadata: labelDescription ## experimentData: use 'experimentData(object)' ## Annotation:   ## - - - Processing information - - - ## Constructed GO set using cellular_component namespace [Sat Nov 23 16:07:25 2024]  ##  MSnbase version: 2.33.2 exprs(andygoset)[1:7, 1:4] ##        GO:0016020 GO:0005783 GO:0005789 GO:0005730 ## O00767          1          1          1          1 ## P51648          1          1          1          0 ## Q2TAA5          1          1          1          0 ## Q9UKV5          1          1          1          0 ## Q12797          1          1          1          0 ## P16615          1          1          1          0 ## Q96SQ9          1          1          1          0"},{"path":"https://lgatto.github.io/pRoloc/articles/v05-pRoloc-transfer-learning.html","id":"sec:annotrepro","dir":"Articles","previous_headings":"Preparing the auxiliary data > The Gene Ontology","what":"A note on reproducibility","title":"A transfer learning algorithm for spatial proteomics","text":"generation auxiliary data relies specific Biomart server Mart instances AnnotationParams class actual query server obtain GO terms associated features. utilisation online servers, undergo regular updates, guarantee reproducibility feature/term association time. recommended save store AnnotationParams auxiliary MSnSet instances. Alternatively, possible use Bioconductor infrastructure, specific organism annotations GO.db package use specific versioned (thus traceable) annotations.","code":""},{"path":"https://lgatto.github.io/pRoloc/articles/v05-pRoloc-transfer-learning.html","id":"sec:hpaaux","dir":"Articles","previous_headings":"Preparing the auxiliary data","what":"The Human Protein Atlas","title":"A transfer learning algorithm for spatial proteomics","text":"feature names LOPIT experiment UniProt identifiers, Human Protein Atlas uses Ensembl gene identifiers. first code chunk matches identifier types using Ensembl Biomart server left_join dplyr package. section, copy experimental data andyhpa. , deparse multiple ‘;’-delimited locations contained Human Protein sub-cellular Atlas, create auxiliary binary data matrix (localisations reliability equal Supportive considered; Uncertain assignments ignored - see http://www.proteinatlas.org//antibody+validation details) filter proteins without localisation data.","code":"andyhpa <- andy2011 fvarLabels(andyhpa)[1] <- \"accession\" ## for left_join matching ## convert protein accession numbers to ensembl gene identifiers  library(\"biomaRt\") mart <- useMart(\"ensembl\", dataset = \"hsapiens_gene_ensembl\")  filter <- \"uniprotswissprot\" attrib <- c(\"uniprot_gn_symbol\", \"uniprotswissprot\", \"ensembl_gene_id\") bm <- getBM(attributes = attrib,             filters = filter,             values = fData(andyhpa)[, \"accession\"],             mart = mart) head(bm) ##   uniprot_gn_symbol uniprotswissprot ensembl_gene_id ## 1             ESYT2           A0FGR8 ENSG00000117868 ## 2             ILVBL           A1L0T0 ENSG00000105135 ## 3              NBAS           A2RRP1 ENSG00000151779 ## 4            MTMR11           A4FU01 ENSG00000014914 ## 5           C2orf72           A6NCS6 ENSG00000204128 ## 6              RTL1           A6NKG5 ENSG00000254656 ## HPA data library(\"hpar\") ## This is hpar version 1.49.0, ## based on the Human Protein Atlas ##   Version: 21.1 ##   Release data: 2022.05.31 ##   Ensembl build: 103.38 ## See '?hpar' or 'vignette('hpar')' for details. ## using old version for traceability hpa <- hpar::hpaSubcellularLoc14() ## see ?hpar and browseVignettes('hpar') for documentation ## loading from cache hpa$Reliability <- droplevels(hpa$Reliability) colnames(hpa)[1] <- \"ensembl_gene_id\" hpa <- dplyr::left_join(hpa, bm) ## Joining with `by = join_by(ensembl_gene_id)` hpa <- hpa[!duplicated(hpa$uniprotswissprot), ]  ## match HPA/LOPIT colnames(hpa)[7] <- \"accession\" fd <- dplyr::left_join(fData(andyhpa), hpa) ## Joining with `by = join_by(accession)` rownames(fd) <- featureNames(andyhpa) fData(andyhpa) <- fd stopifnot(validObject(andyhpa))  ## Let's get rid of features without any hpa data lopit <- andyhpa[!is.na(fData(andyhpa)$Main.location), ] ## HPA localisation hpalocs <- c(as.character(fData(lopit)$Main.location),              as.character(fData(lopit)$Other.location)) hpalocs <- hpalocs[!is.na(hpalocs)] hpalocs <- unique(unlist(strsplit(hpalocs, \";\")))  makeHpaSet <- function(x, score2, locs = hpalocs) {     hpamat <- matrix(0, ncol = length(locs), nrow = nrow(x))     colnames(hpamat) <- locs     rownames(hpamat) <- featureNames(x)     for  (i in 1:nrow(hpamat)) {         loc <- unlist(strsplit(as.character(fData(x)[i, \"Main.location\"]), \";\"))         loc2 <- unlist(strsplit(as.character(fData(x)[i, \"Other.location\"]), \";\"))         score <- score2[as.character(fData(x)[i, \"Reliability\"])]         hpamat[i, loc] <- score         hpamat[i, loc2] <- score     }     new(\"MSnSet\", exprs = hpamat,         featureData = featureData(x)) }  hpaset <- makeHpaSet(lopit,                      score2 = c(Supportive = 1, Uncertain = 0)) hpaset <- filterZeroRows(hpaset) ## Removing 318 columns with only 0s. dim(hpaset) ## [1] 669  18 exprs(hpaset)[c(1, 6, 200), 1:3] ##        Endoplasmic reticulum Cytoplasm Vesicles ## O00767                     1         0        0 ## O95302                     0         0        1 ## P10809                     0         0        0"},{"path":"https://lgatto.github.io/pRoloc/articles/v05-pRoloc-transfer-learning.html","id":"sec:ppi","dir":"Articles","previous_headings":"Preparing the auxiliary data","what":"Protein-protein interactions","title":"A transfer learning algorithm for spatial proteomics","text":"Protein-protein interaction data can also used auxiliary data input transfer learning algorithm. Several sources can used directly R: PSICQUIC package provides R interfaces HUPO Proteomics Standard Initiative (HUPO-PSI) project, standardises programmatic access molecular interaction databases. approach enables query great many resources one go , noted vignettes, bulk interactions, recommended directly download databases individual PSICQUIC providers. STRINGdb package provides direct interface STRING protein-protein interactions database. package can used generate table one used . exact procedure described STRINGdb vignette involves mapping protein identifiers map retrieve interaction partners get_neighbors method. Finally, possible use third-party PPI inference results adequately prepare results transfer learning. , described case PPI data tab-delimited format, retrieved directly STRING database. , access PPI spreadsheet file test data, distributed pRolocdata package. file contains 18623 pairwise interactions STRING combined interaction score. , create contingency matrix uses scores encode weight interactions. now contingency matrix reflecting total 19910 interactions 1287 proteins. , keep proteins also available spatial proteomics data (renamed andyppi), subset PPI LOPIT data, create appropriate MSnSet object, filter proteins without interaction scores. now two MSnSet objects containing respectively 520 primary experimental protein profiles along sub-cellular density gradient (andyppi) 520 auxiliary interaction profiles (ppi).","code":"ppif <- system.file(\"extdata/tabdelimited._gHentss2F9k.txt.gz\", package = \"pRolocdata\") ppidf <- read.delim(ppif, header = TRUE, stringsAsFactors = FALSE) head(ppidf) ##   X.node1  node2 node1_string_id node2_string_id node1_external_id ## 1   NUDT5 IMPDH2         1861432         1850365   ENSP00000419628 ## 2    NOP2  RPL23         1858730         1858184   ENSP00000382392 ## 3   HSPA4   ENO1         1848476         1843405   ENSP00000302961 ## 4   RPS13   DKC1         1862013         1855055   ENSP00000435777 ## 5  RPL35A  DDOST         1859718         1856225   ENSP00000393393 ## 6  RPL13A   RPS6         1857955         1857216   ENSP00000375730 ##   node2_external_id neighborhood fusion cooccurence homology coexpression ## 1   ENSP00000321584        0.000      0           0        0        0.112 ## 2   ENSP00000377865        0.000      0           0        0        0.064 ## 3   ENSP00000234590        0.000      0           0        0        0.109 ## 4   ENSP00000358563        0.462      0           0        0        0.202 ## 5   ENSP00000364188        0.000      0           0        0        0.000 ## 6   ENSP00000369757        0.000      0           0        0        0.931 ##   experimental knowledge textmining combined_score ## 1        0.000       0.0      0.370          0.416 ## 2        0.868       0.0      0.000          0.871 ## 3        0.222       0.0      0.436          0.575 ## 4        0.000       0.0      0.354          0.698 ## 5        0.000       0.9      0.265          0.923 ## 6        0.419       0.9      0.240          0.996 uid <- unique(c(ppidf$X.node1, ppidf$node2)) ppim <- diag(length(uid)) colnames(ppim) <- rownames(ppim) <- uid  for (k in 1:nrow(ppidf)) {     i <- ppidf[[k, \"X.node1\"]]     j <- ppidf[[k, \"node2\"]]     ppim[i, j] <- ppidf[[k, \"combined_score\"]] }  ppim[1:5, 1:8] ##        NUDT5 NOP2 HSPA4 RPS13 RPL35A RPL13A CPS1 CTNNB1 ## NUDT5      1    0     0     0  0.000  0.000    0      0 ## NOP2       0    1     0     0  0.000  0.000    0      0 ## HSPA4      0    0     1     0  0.000  0.000    0      0 ## RPS13      0    0     0     1  0.997  0.998    0      0 ## RPL35A     0    0     0     0  1.000  0.999    0      0 andyppi <- andy2011 featureNames(andyppi) <- sub(\"_HUMAN\", \"\", fData(andyppi)$UniProtKB.entry.name) cmn <- intersect(featureNames(andyppi), rownames(ppim)) ppim <- ppim[cmn, ] andyppi <- andyppi[cmn, ]  ppi <- MSnSet(ppim, fData = fData(andyppi),               pData = data.frame(row.names = colnames(ppim))) ppi <- filterZeroCols(ppi) ## Removing 178 columns with only 0s."},{"path":"https://lgatto.github.io/pRoloc/articles/v05-pRoloc-transfer-learning.html","id":"sec:svmtl","dir":"Articles","previous_headings":"","what":"Support vector machine transfer learning","title":"A transfer learning algorithm for spatial proteomics","text":"SVM-TL method descibed (L. M. Breckels et al. 2016) yet incorporated pRoloc package. code implementing method currently available repository: https://github.com/ComputationalProteomicsUnit/lpsvm-tl-code","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/articles/v05-pRoloc-transfer-learning.html","id":"sec:theopt","dir":"Articles","previous_headings":"Nearest neighbour transfer learning","what":"Optimal weights","title":"A transfer learning algorithm for spatial proteomics","text":"weighted nearest neighbours transfer learning algorithm estimates optimal weights different data sources spatial niches described data hand knntlOptimisation function. instance, human data modelled andy2011 andygoset objects1 10 annotated sub-cellular localisations (Golgi, Mitochondrion, PM, Lysosome, Cytosol, Cytosol/Nucleus, Nucleus, Ribosome 60S, Ribosome 40S ER), want know optimally combine primary auxiliary data. look figure @ref(fig:andypca), illustrates experimental separation 10 spatial classes principal component plot, see organelles mitochondrion cytosol cytosol/nucleus well resolved, others Golgi ER less . experiment, former classes expected benefit another data source, latter benefit additional information. PCA plot andy2011. multivariate protein profiles summarised along two first principal components. Proteins unknown localisation represented empty grey points. Protein markers, well-known residents specific sub-cellular niches colour-coded form clusters figure. Let’s define set three possible weights: 0, 0.5 1. weight 1 indicates final results rely exclusively experimental data ignore completely auxiliary data. weight 0 represents opposite situation, primary data ignored auxiliary data considered. weight 0.5 indicates data source contribute equally final results. algorithm’s optimisation step task identify optimal combination class-specific weights given primary auxiliary data pair. optimisation process can quite time consuming many weights many sub-cellular classes, combinations (numberofclassesnumberofweightsnumber~~classes^{number~~weights} possibilities; see ). One generally defined weights (example 0, 0.25, 0.5, 0.75, 1 0, 0.33, 0.67, 1) explore fine-grained integration opportunities. possible weight combinations can calculated thetas function: 3 classes, 3 weights 5 classes, 4 weights human andy2011 data, considering 4 weights, many combinations: actual combination weights tested can defined multiple ways: passing weights matrix explicitly (generated thetas ) th argument; defining increment weights using ; specifying number weights used length.argument. Considering sub-cellular resolution experiment, anticipate mitochondrion, cytosol cytosol/nucleus classes get high weights, ER Golgi assigned lower weights. use nearest neighbour classifier, also need know many neighbours consider classifying protein unknown localisation. knnOptimisation function (see pRoloc-tutorial vignette functions manual page) can run primary auxiliary data sources independently estimate best kPk_P kAk_A values. , based knnOptimisation, use 3 3, kPk_P kAk_A respectively. Finally, assess validity weight selection, repeated certain number times (default value 50). weight optimisation can become time consuming wide range weights many target classes, recommend start lower number iterations, pre-analyse results, proceed iterations eventually combine optimisation results data combineThetaRegRes function proceeding selection best weights. code chunk take much time executed frame vignette. , pass small subset theta matrix minimise computation time. knntlOptimisation function supports parallelised execution using various backends thanks BiocParallel package; appropriate backend defined automatically according underlying architecture user-defined backends can defined BPPARAM argument2. Also, interest time, weights optimisation repeated 5 times . optimisation performed labelled marker examples . removing unlabelled non-marker proteins (unknowns), auxiliary GO columns end containing 0 (GO-protein association observed non-marker proteins), temporarily removed. topt result stores result optimisation step, particular observed theta weights, can directly plotted shown bubble plot . bubble plots give proportion best weights marker class observed optimisation phase. see mitochondrion, cytosol cytosol/nucleus classes predominantly scored height weights (2/3 1), consistent high reliability primary data. Golgi ribosomal clusters (lesser extend ER) favour smaller scores, indicating substantial benefit auxiliary data.","code":"head(thetas(3, by = 0.5)) ## Weigths: ##   (0, 0.5, 1) ##      [,1] [,2] [,3] ## [1,]    0  0.0  0.0 ## [2,]    0  0.0  0.5 ## [3,]    0  0.0  1.0 ## [4,]    0  0.5  0.0 ## [5,]    0  0.5  0.5 ## [6,]    0  0.5  1.0 dim(thetas(3, by = 0.5)) ## Weigths: ##   (0, 0.5, 1) ## [1] 27  3 dim(thetas(5, length.out = 4)) ## Weigths: ##   (0, 0.333333333333333, 0.666666666666667, 1) ## [1] 1024    5 ## marker classes for andy2011 m <- unique(fData(andy2011)$markers.tl) m <- m[m != \"unknown\"] th <- thetas(length(m), length.out=4) ## Weigths: ##   (0, 0.333333333333333, 0.666666666666667, 1) dim(th) ## [1] 1048576      10 topt <- knntlOptimisation(andy2011, andygoset,                           th = th,                           k = c(3, 3),                           fcol = \"markers.tl\",                           times = 50) set.seed(1) i <- sample(nrow(th), 12) topt <- knntlOptimisation(andy2011, andygoset,                           th = th[i, ],                           k = c(3, 3),                           fcol = \"markers.tl\",                           times = 5) ## Removing 501 columns with only 0s. ## Note: vector will be ordered according to classes: Cytosol Cytosol/Nucleus ER Golgi Lysosome Mitochondrion Nucleus PM Ribosome 40S Ribosome 60S (as names are not explicitly defined) topt ## Object of class \"ThetaRegRes\" ## Algorithm: theta  ## Theta hyper-parameters: ##  weights: 0 0.3333333 0.6666667 1  ##  k: 3 3  ##  nrow: 12  ## Design: ##  Replication: 5 x 5-fold X-validation ##  Partitioning: 0.2/0.8 (test/train) ## Results ##  macro F1: ##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  ##  0.8096  0.8401  0.8812  0.8661  0.8869  0.9127  ##  best theta: ##             Cytosol Cytosol.Nucleus ER Golgi Lysosome Mitochondrion Nucleus PM ## weight:0          0               0  5     4        0             0       1  0 ## weight:0.33       0               4  0     0        0             1       0  4 ## weight:0.67       1               1  0     1        0             0       0  0 ## weight:1          4               0  0     0        5             4       4  1 ##             Ribosome.40S Ribosome.60S ## weight:0               5            0 ## weight:0.33            0            4 ## weight:0.67            0            1 ## weight:1               0            0"},{"path":"https://lgatto.github.io/pRoloc/articles/v05-pRoloc-transfer-learning.html","id":"sec:choosep","dir":"Articles","previous_headings":"Nearest neighbour transfer learning","what":"Choosing weights","title":"A transfer learning algorithm for spatial proteomics","text":"set best weights must chosen applied classification unlabelled proteins (formally annotated unknown). can defined manually, based pattern observed weights bubble plot, automatically extracted getParams method3. See ?getParams details favourPrimary function, desirable systematically favour primary data (.e. high weights) different weight combinations perform equally well. provide best parameters extensive parameter optimisation search, provided getParams:","code":"getParams(topt) ##         Cytosol Cytosol/Nucleus              ER           Golgi        Lysosome  ##       1.0000000       0.3333333       0.0000000       0.0000000       1.0000000  ##   Mitochondrion         Nucleus              PM    Ribosome 40S    Ribosome 60S  ##       1.0000000       1.0000000       0.3333333       0.0000000       0.3333333 (bw <- experimentData(andy2011)@other$knntl$thetas) ##         Cytosol Cytosol/Nucleus              ER           Golgi        Lysosome  ##       0.6666667       0.6666667       0.3333333       0.3333333       0.6666667  ##   Mitochondrion         Nucleus              PM    Ribosome 40S    Ribosome 60S  ##       0.6666667       0.3333333       0.3333333       0.0000000       0.3333333"},{"path":"https://lgatto.github.io/pRoloc/articles/v05-pRoloc-transfer-learning.html","id":"sec:thclass","dir":"Articles","previous_headings":"Nearest neighbour transfer learning","what":"Applying best theta weights","title":"A transfer learning algorithm for spatial proteomics","text":"apply best weights learn auxiliary data accordingly classifying unlabelled proteins one sub-cellular niches considered markers.tl (displayed figure @ref(fig:andypca)), pass primary auxiliary data sets, best weights, best k’s (, case marker’s feature variable want use, default markers) knntlClassification function. generate new instance class MSnSet, identical primary data, including classification results classifications scores transfer learning classification algorithm (knntl knntl.scores feature variables respectively). , extract former getPrediction function plot results classification. PCA plot andy2011 transfer learning classification. size points proportional classification scores. Please read pRoloc-tutorial vignette, particular classification section, details proceed exploration classification results classification scores.","code":"andy2011 <- knntlClassification(andy2011, andygoset,                                 bestTheta = bw,                                 k = c(3, 3),                                 fcol = \"markers.tl\") andy2011 <- getPredictions(andy2011, fcol = \"knntl\") ## ans ## Chromatin associated              Cytosol      Cytosol/Nucleus  ##                   11                  293                   43  ##             Endosome                   ER                Golgi  ##                   12                  194                   76  ##             Lysosome        Mitochondrion              Nucleus  ##                   64                  260                  110  ##                   PM         Ribosome 40S         Ribosome 60S  ##                  234                   19                   55 setStockcol(paste0(getStockcol(), \"80\")) ptsze <- exp(fData(andy2011)$knntl.scores) - 1 plot2D(andy2011, fcol = \"knntl\", cex = ptsze) setStockcol(NULL) addLegend(andy2011, where = \"topright\",           fcol = \"markers.tl\",           bty = \"n\", cex = .7)"},{"path":"https://lgatto.github.io/pRoloc/articles/v05-pRoloc-transfer-learning.html","id":"sec:ccl","dir":"Articles","previous_headings":"","what":"Conclusions","title":"A transfer learning algorithm for spatial proteomics","text":"vignette describes application weighted kk-nearest neighbour transfer learning algorithm application sub-cellular localisation prediction proteins using quantitative proteomics data primary data Gene Ontology-derived binary data auxiliary data source. algorithm can used various data sources (show compile binary data Human Protein Atlas section @ref(sec:hpaaux)) successfully applied algorithm (L. M. Breckels et al. 2016) third-party quantitative auxiliary data.","code":""},{"path":"https://lgatto.github.io/pRoloc/articles/v05-pRoloc-transfer-learning.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"A transfer learning algorithm for spatial proteomics","text":"software respective versions used produce document listed .","code":"## R Under development (unstable) (2024-11-20 r87352) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 24.04.1 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.26.so;  LAPACK version 3.12.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] hpar_1.49.0          biomaRt_2.63.0       class_7.3-22         ##  [4] pRolocdata_1.45.1    pRoloc_1.47.1        BiocParallel_1.41.0  ##  [7] MLInterfaces_1.87.0  cluster_2.1.6        annotate_1.85.0      ## [10] XML_3.99-0.17        AnnotationDbi_1.69.0 IRanges_2.41.1       ## [13] MSnbase_2.33.2       ProtGenerics_1.39.0  S4Vectors_0.45.2     ## [16] mzR_2.41.1           Rcpp_1.0.13-1        Biobase_2.67.0       ## [19] BiocGenerics_0.53.3  generics_0.1.3       knitr_1.49           ## [22] BiocStyle_2.35.0     ##  ## loaded via a namespace (and not attached): ##   [1] splines_4.5.0               filelock_1.0.3              ##   [3] tibble_3.2.1                hardhat_1.4.0               ##   [5] preprocessCore_1.69.0       pROC_1.18.5                 ##   [7] rpart_4.1.23                lifecycle_1.0.4             ##   [9] httr2_1.0.6                 doParallel_1.0.17           ##  [11] globals_0.16.3              lattice_0.22-6              ##  [13] MASS_7.3-61                 MultiAssayExperiment_1.33.1 ##  [15] dendextend_1.19.0           magrittr_2.0.3              ##  [17] limma_3.63.2                plotly_4.10.4               ##  [19] sass_0.4.9                  rmarkdown_2.29              ##  [21] jquerylib_0.1.4             yaml_2.3.10                 ##  [23] MsCoreUtils_1.19.0          DBI_1.2.3                   ##  [25] RColorBrewer_1.1-3          lubridate_1.9.3             ##  [27] abind_1.4-8                 zlibbioc_1.53.0             ##  [29] GenomicRanges_1.59.1        purrr_1.0.2                 ##  [31] mixtools_2.0.0              AnnotationFilter_1.31.0     ##  [33] nnet_7.3-19                 rappdirs_0.3.3              ##  [35] ipred_0.9-15                lava_1.8.0                  ##  [37] GenomeInfoDbData_1.2.13     listenv_0.9.1               ##  [39] parallelly_1.39.0           pkgdown_2.1.1.9000          ##  [41] ncdf4_1.23                  codetools_0.2-20            ##  [43] DelayedArray_0.33.2         xml2_1.3.6                  ##  [45] tidyselect_1.2.1            UCSC.utils_1.3.0            ##  [47] viridis_0.6.5               matrixStats_1.4.1           ##  [49] BiocFileCache_2.15.0        jsonlite_1.8.9              ##  [51] caret_6.0-94                e1071_1.7-16                ##  [53] survival_3.7-0              iterators_1.0.14            ##  [55] systemfonts_1.1.0           foreach_1.5.2               ##  [57] segmented_2.1-3             tools_4.5.0                 ##  [59] progress_1.2.3              ragg_1.3.3                  ##  [61] glue_1.8.0                  prodlim_2024.06.25          ##  [63] gridExtra_2.3               SparseArray_1.7.2           ##  [65] xfun_0.49                   MatrixGenerics_1.19.0       ##  [67] GenomeInfoDb_1.43.1         dplyr_1.1.4                 ##  [69] withr_3.0.2                 BiocManager_1.30.25         ##  [71] fastmap_1.2.0               fansi_1.0.6                 ##  [73] digest_0.6.37               mime_0.12                   ##  [75] timechange_0.3.0            R6_2.5.1                    ##  [77] textshaping_0.4.0           colorspace_2.1-1            ##  [79] gtools_3.9.5                lpSolve_5.6.22              ##  [81] RSQLite_2.3.8               utf8_1.2.4                  ##  [83] tidyr_1.3.1                 hexbin_1.28.5               ##  [85] data.table_1.16.2           recipes_1.1.0               ##  [87] FNN_1.1.4.1                 prettyunits_1.2.0           ##  [89] PSMatch_1.11.0              httr_1.4.7                  ##  [91] htmlwidgets_1.6.4           S4Arrays_1.7.1              ##  [93] ModelMetrics_1.2.2.2        pkgconfig_2.0.3             ##  [95] gtable_0.3.6                timeDate_4041.110           ##  [97] blob_1.2.4                  impute_1.81.0               ##  [99] XVector_0.47.0              htmltools_0.5.8.1           ## [101] bookdown_0.41               MALDIquant_1.22.3           ## [103] clue_0.3-66                 scales_1.3.0                ## [105] png_0.1-8                   gower_1.0.1                 ## [107] reshape2_1.4.4              coda_0.19-4.1               ## [109] nlme_3.1-166                curl_6.0.1                  ## [111] proxy_0.4-27                cachem_1.1.0                ## [113] stringr_1.5.1               BiocVersion_3.21.1          ## [115] parallel_4.5.0              mzID_1.45.0                 ## [117] vsn_3.75.0                  desc_1.4.3                  ## [119] pillar_1.9.0                grid_4.5.0                  ## [121] vctrs_0.6.5                 pcaMethods_1.99.0           ## [123] randomForest_4.7-1.2        dbplyr_2.5.0                ## [125] xtable_1.8-4                evaluate_1.0.1              ## [127] mvtnorm_1.3-2               cli_3.6.3                   ## [129] compiler_4.5.0              rlang_1.1.4                 ## [131] crayon_1.5.3                future.apply_1.11.3         ## [133] LaplacesDemon_16.1.6        mclust_6.1.1                ## [135] QFeatures_1.17.0            affy_1.85.0                 ## [137] plyr_1.8.9                  fs_1.6.5                    ## [139] stringi_1.8.4               viridisLite_0.4.2           ## [141] munsell_0.5.1               Biostrings_2.75.1           ## [143] lazyeval_0.2.2              Matrix_1.7-1                ## [145] ExperimentHub_2.15.0        hms_1.1.3                   ## [147] bit64_4.5.2                 future_1.34.0               ## [149] ggplot2_3.5.1               KEGGREST_1.47.0             ## [151] statmod_1.5.0               AnnotationHub_3.15.0        ## [153] SummarizedExperiment_1.37.0 kernlab_0.9-33              ## [155] igraph_2.1.1                memoise_2.0.1               ## [157] affyio_1.77.0               bslib_0.8.0                 ## [159] sampling_2.10               bit_4.5.0"},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Laurent Gatto. Author. Lisa Breckels. Maintainer, author. Thomas Burger. Contributor. Samuel Wieczorek. Contributor. Charlotte Hutchings. Contributor. Oliver Crook. Author.","code":""},{"path":"https://lgatto.github.io/pRoloc/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Gatto L, Breckels LM, Wieczorek S, Burger T, Lilley KS. Mass-spectrometry-based spatial proteomics data analysis using pRoloc pRolocdata. Bioinformatics. 2014 May 1;30(9):1322-4. doi:10.1093/bioinformatics/btu013. Epub 2014 Jan 11. PubMed PMID: 24413670; PubMed Central PMCID: PMC3998135. Breckels LM, Gatto L, Christoforou , Groen AJ, Lilley KS, Trotter MW. effect organelle discovery upon sub-cellular protein localisation. J Proteomics. 2013 Mar 21. doi:pii: S1874-3919(13)00094-8. 10.1016/j.jprot.2013.02.019. PubMed PMID: 23523639. Gatto L., Breckels L.M., Burger T, Nightingale D.J.H., Groen .J., Campbell C., Mulvey C.M., Christoforou ., Ferro M., Lilley K.S. 'foundation reliable spatial proteomics data analysis' Mol Cell Proteomics. 2014 May 20. Breckels LM, Holden SB, Wojnar D, Mulvey CM, Christoforou , Groen , Trotter MW Kohlbacher O, Lilley KS, Gatto L. Learning Heterogeneous Data Sources: Application Spatial Proteomics. PLoS Comput Biol. 2016 May 13;12(5):e1004920. doi: 10.1371/journal.pcbi.1004920. Breckels LM, Mulvey CM, Lilley KS Gatto L. Bioconductor workflow processing analysing spatial proteomics data.  [version 2; peer review: 2 approved]. F1000Research 2018, 5:2926 (https://doi.org/10.12688/f1000research.10411.2) Crook OM, Breckels LM, Lilley KS, Kirk PWD, Gatto L. Bioconductor workflow Bayesian analysis spatial proteomics [version 1; peer review: awaiting peer review]. F1000Research 2019, 8:446 (https://doi.org/10.12688/f1000research.18636.1)","code":"@Article{,   title = {Mass-spectrometry based spatial proteomics data analysis using pRoloc and pRolocdata},   author = {Laurent Gatto and Lisa M. Breckels and Samuel Wieczorek and Thomas Burger and Kathryn S. Lilley},   journal = {Bioinformatics},   year = {2014}, } @Article{,   title = {The effect of organelle discovery upon sub-cellular protein localisation},   author = {Lisa M. Breckels and Laurent Gatto and Andy Christoforou and Arnoud J. Groen and Kathryn S. Lilley and Matthew W. Trotter},   journal = {J Proteomics},   year = {2013}, } @Article{,   title = {A foundation for reliable spatial proteomics data analysis},   author = {Laurent Gatto and Lisa M. Breckels and Thomas Burger and Daniel J. Nightingale and Arnoud J. Groen and Callum Campbell and Claire M. Mulvey and Andy Christroforou and Myriam Ferro and Kathryn S. Lilley},   journal = {Mol Cell Proteomics},   year = {2014}, } @Article{,   title = {Learning from heterogeneous data sources: an application in spatial proteomics},   author = {Lisa M. Breckels and Sean Holden and David Wonjar and Claire M. Mulvey and Andy Christoforou and Arnoud Groen and Matthew W.B. Trotter and Oliver Kohlbacker and Kathryn S. Lilley and Laurent Gatto},   journal = {PLoS Comput Biol},   year = {2016}, } @Article{,   title = {A Bioconductor workflow for processing and analysing spatial proteomics data},   author = {Lisa M. Breckels and Claire M. Mulvey and Kathryn S. Lilley and Laurent Gatto},   journal = {F1000Research},   year = {2016}, } @Article{,   title = {A Bioconductor workflow for the Bayesian analysis of spatial proteomics},   author = {Oliver M. Crook and Lisa M. Breckels and Kathryn S. Lilley and Paul D.W. Kirk and Laurent Gatto},   journal = {F1000Research},   year = {2019}, }"},{"path":"https://lgatto.github.io/pRoloc/index.html","id":"a-unifying-bioinformatics-framework-for-spatial-proteomics","dir":"","previous_headings":"","what":"A unifying bioinformatics framework for spatial proteomics","title":"A unifying bioinformatics framework for spatial proteomics","text":"pRoloc suite set software offers complete software pipeline analyse, visualise interpret mass spectrometry-based spatial proteomics data , example, LOPIT (Localization Organelle Proteins Isotope Tagging), PCP (Protein Correlation Profiling) hyperLOPIT (hyperplexed LOPIT). suite includes pRoloc, mail software focuses data analysis using state---art machine learning, pRolocdata, distributes numerous datasets, pRolocGUI, offers interactive visualisations dedicated spatial proteomics. software distributed part R/Bioconductor project.","code":""},{"path":"https://lgatto.github.io/pRoloc/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"A unifying bioinformatics framework for spatial proteomics","text":"pRoloc software comes ample documentation. main tutorial provides broad overview package functionality. See Articles tab additional manuals. pRolocGUI also offer several documentation files. set video tutorial illustrate pRoloc framework.","code":""},{"path":"https://lgatto.github.io/pRoloc/index.html","id":"help","dir":"","previous_headings":"","what":"Help","title":"A unifying bioinformatics framework for spatial proteomics","text":"Post questions Bioconductor support site, tagging package name pRoloc (maintainer automatically notified email). identify bug feature request, please open issue github development page.","code":""},{"path":"https://lgatto.github.io/pRoloc/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A unifying bioinformatics framework for spatial proteomics","text":"preferred installation procedure uses Bioconductor infrastructure:","code":"## unless BiocManager is already installed install.packages(\"BiocManager\") ## then BiocManager::install(\"pRoloc\") BiocManager::install(\"pRolocdata\") BiocManager::install(\"pRolocGUI\")"},{"path":"https://lgatto.github.io/pRoloc/index.html","id":"pre-releasedevelopment-version","dir":"","previous_headings":"Installation","what":"Pre-release/development version","title":"A unifying bioinformatics framework for spatial proteomics","text":"pre-release/development code github can also installed using BiocManager::install, shown . Note requires working R build environment (.e Rtools Windows - see ). New pre-release features might documented thoroughly tested substantially change prior release. Use risks.","code":"## unless BiocManager is already installed install.packages(\"BiocManager\") ## then, install from github BiocManager::install(\"lgatto/pRoloc\") BiocManager::install(\"lgatto/pRolocdata\") BiocManager::install(\"lgatto/pRolocGUI\")"},{"path":"https://lgatto.github.io/pRoloc/index.html","id":"references","dir":"","previous_headings":"","what":"References:","title":"A unifying bioinformatics framework for spatial proteomics","text":"refences software, use spatial proteomics data analysis: Crook OM, Breckels LM, Lilley KS, Kirk PWD, Gatto L. Bioconductor workflow Bayesian analysis spatial proteomics [version 1; peer review: awaiting peer review]. F1000Research 2019, 8:446 (https://doi.org/10.12688/f1000research.18636.1) Breckels LM, Mulvey CM, Lilley KS Gatto L. Bioconductor workflow processing analysing spatial proteomics data [version 2; peer review: 2 approved]. F1000Research 2018, 5:2926 (https://doi.org/10.12688/f1000research.10411.2) Gatto L, Breckels LM, Burger T, Nightingale DJ, Groen AJ, Campbell C, Nikolovski N, Mulvey CM, Christoforou , Ferro M, Lilley KS. foundation reliable spatial proteomics data analysis Mol Cell Proteomics. 2014 Aug;13(8):1937-52. doi: 10.1074/mcp.M113.036350. Epub 2014 May 20. PubMed PMID: 24846987 Gatto L, Breckels LM, Wieczorek S, Burger T, Lilley KS. Mass-spectrometry-based spatial proteomics data analysis using pRoloc pRolocdata Bioinformatics. 2014 May 1;30(9):1322-4. doi: 10.1093/bioinformatics/btu013. Epub 2014 Jan 11. PubMed PMID: 24413670. Specific algorithms available software: Breckels LM, Gatto L, Christoforou , Groen AJ, Lilley KS, Trotter MW. effect organelle discovery upon sub-cellular protein localisation J Proteomics. 2013 Aug 2;88:129-40. doi: 10.1016/j.jprot.2013.02.019. Epub 2013 Mar 21. PubMed PMID: 23523639. Breckels LM, Holden S, Wojnar D, Mulvey CMM, Christoforou , Groen AJ, Kohlbacher O, Lilley KS Gatto L. Learning heterogeneous data sources: application spatial proteomics 2015 biorXiv, doi: http://dx.doi.org/10.1101/022152 Oliver M Crook, Claire M Mulvey, Paul D. W. Kirk, Kathryn S Lilley, Laurent Gatto Bayesian Mixture Modelling Approach Spatial Proteomics PLOS Computational Biology doi:[10.1371/journal.pcbi.1006516](https://doi.org/10.1371/journal.pcbi.1006516)","code":""},{"path":"https://lgatto.github.io/pRoloc/index.html","id":"more-resource","dir":"","previous_headings":"References:","what":"More resource","title":"A unifying bioinformatics framework for spatial proteomics","text":"R Bioconductor proteomics web page package Bioconductor proteomics workflow","code":""},{"path":"https://lgatto.github.io/pRoloc/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"A unifying bioinformatics framework for spatial proteomics","text":"Contributions package welcome. want contribute package, follow conventions rest functions whenever makes sense . Feel free get touch (preferable opening github issue) discuss suggestions. Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/AnnotationParams-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"Class store annotation parameters automatically query Biomart   server, retrieve relevant annotation set features   interest using, example getGOFromFeatures   makeGoSet.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/AnnotationParams-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class ","text":"Objects can created set setAnnotationParams   function. Object created calling without arguments   setAnnotationParams(), open interactive   interface. Depending value \"many.graphics\" option,   graphical text-based menu open (text interface can   forced setting graphics argument FALSE:   setAnnotationParams(graphics = FALSE)). menu allow   select species interest first type features (ENSEMBL   gene identifier, Entrez id, ...) second. species available ENSEMBL data   available Biomart set attributes interest   available. compatible identifiers downstream queries   automatically filtered displayed user selection. also possible pass parameter inputs, character   vector length 2 containing pattern uniquely matching species   interest (position 1) patterns uniquely matching   feature types (position 2). matches unique, error   thrown. new instance AnnotationParams created   enable easy automatic query Mart instance.   instance invisibly returned stored global variable   pRoloc package's private environment automatic retrieval.   variable containing AnnotationParams instance already   available, can set globally passing argument   setAnnotationParams function. Globally set   AnnotationParams instances can accessed   getAnnotationParams function. See pRoloc-theta vignette details.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/AnnotationParams-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class ","text":"mart: Object class \"Mart\"       biomaRt package. martname: Object class \"character\"       name mart instance. dataset: Object class \"character\"       data set mart instance. filter: Object class \"character\"       filter used querying mart instance. date: Object class \"character\" indicating       current instance created. biomaRtVersion: Object class \"character\"       biomaRt version used create       AnnotationParams instance. .__classVersion__: Object class \"Versions\"       version AnnotationParams class       current instance.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/AnnotationParams-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class ","text":"show signature(object = \"AnnotationParams\"):       display objects.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/AnnotationParams-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class ","text":"Laurent Gatto <lg390@cam.ac.uk>","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/reference/AnnotationParams-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class ","text":"","code":"data(andy2011params) andy2011params #> Object of class \"AnnotationParams\" #>  Using the 'ENSEMBL_MART_ENSEMBL' BioMart database #>  Using the 'hsapiens_gene_ensembl' dataset #>  Using 'uniprotswissprot' as filter #>  Created on Sat May  1 08:58:27 2021 data(dunkley2006params) dunkley2006params #> Object of class \"AnnotationParams\" #>  Using the 'plants_mart' BioMart database #>  Using the 'athaliana_eg_gene' dataset #>  Using 'tair_locus' as filter #>  Created on Tue Mar 12 07:25:12 2024  try(setAnnotationParams(inputs = c(\"nomatch1\", \"nomatch2\"))) #> Error in setAnnotationParams(inputs = c(\"nomatch1\", \"nomatch2\")) :  #>   Couldn't find a unique species match for 'nomatch1'. setAnnotationParams(inputs = c(\"Human genes\",              \"UniProtKB/Swiss-Prot ID\")) #> Using species Human genes (GRCh38.p13) #> Warning: Ensembl will soon enforce the use of https. #> Ensure the 'host' argument includes \"https://\" #> Using feature type UniProtKB/Swiss-Prot ID(s) [e.g. A0A024R1R8] #> Connecting to Biomart... #> Warning: Ensembl will soon enforce the use of https. #> Ensure the 'host' argument includes \"https://\" getAnnotationParams() #> Object of class \"AnnotationParams\" #>  Using the 'ENSEMBL_MART_ENSEMBL' BioMart database #>  Using the 'hsapiens_gene_ensembl' dataset #>  Using 'uniprotswissprot' as filter #>  Created on Sat Nov 23 16:03:28 2024"},{"path":"https://lgatto.github.io/pRoloc/reference/ClustDist-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"ClustDist summaries algorithm information,   running clustDist function, number   k's tested kmeans, mean normalised   pairwise (Euclidean) distances per numer component   clusters tested.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/ClustDist-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class ","text":"Object class created clustDist   function.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/ClustDist-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class ","text":"k: Object class \"numeric\" storing       number k clusters tested. dist: Object class \"list\" storing       list distance matrices. term: Object class \"character\" describing       GO term name. id: Object class \"character\" describing       GO term ID. nrow: Object class \"numeric\" showing       number instances set clustsz: Object class \"list\" describing       number instances cluster k tested components: Object class \"vector\" storing       class membership protein k tested. fcol: Object class \"character\" showing       feature column name corresponding MSnSet       protein set information stored.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/ClustDist-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class ","text":"plot Plots kmeans clustering results. show Shows object.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/ClustDist-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class ","text":"Lisa M Breckels <lms79@cam.ac.uk>","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/ClustDist-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class ","text":"","code":"showClass(\"ClustDist\") #> Class \"ClustDist\" [package \"pRoloc\"] #>  #> Slots: #>                                                                          #> Name:           k       dist       term         id       nrow    clustsz #> Class:    numeric       list  character  character    numeric       list #>                              #> Name:  components       fcol #> Class:     vector  character      library('pRolocdata') #>  #> This is pRolocdata version 1.45.1. #> Use 'pRolocdata()' to list available data sets.   data(dunkley2006)   par <- setAnnotationParams(inputs =                     c(\"Arabidopsis thaliana genes\",                       \"Gene stable ID\")) #> Using species Arabidopsis thaliana genes (TAIR10) #> Warning: Ensembl will soon enforce the use of https. #> Ensure the 'host' argument includes \"https://\" #> Using feature type Gene stable ID(s) [e.g. AT1G01010] #> Connecting to Biomart... #> Warning: Ensembl will soon enforce the use of https. #> Ensure the 'host' argument includes \"https://\"                        ## add protein set/annotation information                     xx <- addGoAnnotations(dunkley2006, par) #> Loading required namespace: GO.db #>       ## filter   xx <- filterMinMarkers(xx, n = 50) #> Retaining 3 out of 79 in GOAnnotations   xx <- filterMaxMarkers(xx, p = .25) #> Retaining 2 out of 3 in GOAnnotations      ## get distances for protein sets   dd <- clustDist(xx) #>    |                                                                               |                                                                      |   0%   |                                                                               |===================================                                   |  50%   |                                                                               |======================================================================| 100%      ## plot clusters for first 'ClustDist' object    ## in the 'ClustDistList'   plot(dd[[1]], xx)       ## plot distances for all protein sets    plot(dd)"},{"path":"https://lgatto.github.io/pRoloc/reference/ClustDistList-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Storing multiple ClustDist instances — ClustDistList-class","title":"Storing multiple ClustDist instances — ClustDistList-class","text":"class storing lists ClustDist   instances.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/ClustDistList-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Storing multiple ClustDist instances — ClustDistList-class","text":"Object class created clustDist   function.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/ClustDistList-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Storing multiple ClustDist instances — ClustDistList-class","text":"x: Object class list containing valid       ClustDist instances. log: Object class list containing object       creation log, containing among elements call       generated object. .__classVersion__: version instance.       development purposes .","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/ClustDistList-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Storing multiple ClustDist instances — ClustDistList-class","text":"\"[[\" Extracts single ClustDist position. \"[\" Extracts one ClustDists       ClustDistList. length Returns number ClustDists. names Returns names ClustDists,       available. replacement method also available. show Display object printing short       summary. lapply(x, FUN, ...) Apply function FUN       element input x. application FUN       returns ClustDist, return value       ClustDistList, otherwise list plot Plots boxplot distance results per       protein set.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/ClustDistList-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Storing multiple ClustDist instances — ClustDistList-class","text":"Lisa M Breckels <lms79@cam.ac.uk>","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/ClustDistList-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Storing multiple ClustDist instances — ClustDistList-class","text":"","code":"library('pRolocdata')   data(dunkley2006)   par <- setAnnotationParams(inputs =                     c(\"Arabidopsis thaliana genes\",                     \"Gene stable ID\")) #> Using species Arabidopsis thaliana genes (TAIR10) #> Warning: Ensembl will soon enforce the use of https. #> Ensure the 'host' argument includes \"https://\" #> Using feature type Gene stable ID(s) [e.g. AT1G01010] #> Connecting to Biomart... #> Warning: Ensembl will soon enforce the use of https. #> Ensure the 'host' argument includes \"https://\"    ## add protein set/annotation information   xx <- addGoAnnotations(dunkley2006, par)    ## filter   xx <- filterMinMarkers(xx, n = 50) #> Retaining 3 out of 79 in GOAnnotations   xx <- filterMaxMarkers(xx, p = .25) #> Retaining 2 out of 3 in GOAnnotations    ## get distances for protein sets   dd <- clustDist(xx) #>    |                                                                               |                                                                      |   0%   |                                                                               |===================================                                   |  50%   |                                                                               |======================================================================| 100%    ## plot distances for all protein sets   plot(dd)     names(dd) #> [1] \"endoplasmic reticulum\" \"Golgi apparatus\"          ## Extract a sub-list of ClustDist objects   dd[1] #> Instance of class 'ClustDistList' containig 1 objects.    ## Extract 1st ClustDist object   dd[[1]] #> Object of class \"ClustDist\" #> fcol =  GOAnnotations  #>  term =  GO:0005783  #>  id =  endoplasmic reticulum  #>  nrow =  91  #> k's tested: 1 2 3 4 5  #>   Size:  91  #>   Size:  88  #>   Size:  80  #>   Size:  NA  #>   Size:  NA  #> Clusters info: #>       ks.mean    mean ks.norm     norm #> k = 1       1  0.1916       1  0.04260 #> k = 2       1  0.1595       1  0.03585 #> k = 3       1 *0.1385       1 *0.03215 #> k = 4      NA      NA      NA       NA #> k = 5      NA      NA      NA       NA"},{"path":"https://lgatto.github.io/pRoloc/reference/GenRegRes-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"Regularisation framework containers.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/GenRegRes-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Class ","text":"Object class created respective regularisation   function: knnOptimisation,   svmOptimisation, plsdaOptimisation,   knntlOptimisation, ...","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/GenRegRes-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class ","text":"algorithm: Object class \"character\" storing       machine learning algorithm name. hyperparameters: Object class \"list\"       respective algorithm hyper-parameters tested. design: Object class \"numeric\" describing       cross-validation design, test data size number       replications. log: Object class \"list\" warnings       thrown hyper-parameters regularisation. seed: Object class \"integer\" random       number generation seed. results: Object class \"matrix\"       dimenstions times (see design) number       hyperparameters + 1 storing macro F1 values respective       best hyper-parameters replication. f1Matrices: Object class \"list\"       respective times cross-validation F1 matrices. cmMatrices: Object class \"list\"       respective times contingency matrices. testPartitions: Object class \"list\"       respective times test partitions. datasize: Object class \"list\" details       respective inner outter training testing data       sizes. ThetaRegRes:  predictions: list predictions       optimisation iterations. otherWeights: Alternative best theta weigts: vector       per iterations, NULL best weights found.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/GenRegRes-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class ","text":"getF1Scores Returns matrix F1 scores       optimisation parameters. f1Count signature(object = \"GenRegRes\", t = \t\"numeric\") signature(object = \"ThetaRegRes\", t = \t\"numeric\"): Constructs table possible parameter       combination count many F1 scores greater equal       t. t missing (default), best F1       score used. method useful conjunctin       plot. getParams Returns best parameters. however strongly       recommended inspect optimisation results.       ThetaRegRes optimisation result, method chose       best parameters can \"median\" (default) \"mean\"       (median mean best weights chosen), \"max\"       (first weights highest macro-F1 score, considering       multiple max scoring combinations possible)       \"count\" (observed weight get maximum number       observations, see f1Count). favourP argument can       used prioritise weights favour primary data       (.e. heigh weights). See favourPrimary .  getSeed Returns seed used optimisation run. getWarnings signature(object = \"GenRegRes\"): Returns       vector recorded warnings. levelPlot signature(object = \"GenRegRes\"): Plots       heatmap optimisation results.       \"GenRegRes\" instances. plot Plots optisisation results. show Shows object.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/GenRegRes-class.html","id":"other-functions","dir":"Reference","previous_headings":"","what":"Other functions","title":"Class ","text":"ThetaRegRes:  combineThetaRegRes(object) Takes list       ThetaRegRes instances combined returnes new       ThetaRegRes instance. favourPrimary(primary, auxiliary, object, verbose = \tTRUE) Takes primary auxiliary data \tsources (two MSnSet instances) \tThetaRegRes object returns updated \tThetaRegRes instance containing best parameters/weigths \t(see getParams function) favouring primary data \tmultiple best theta weights available.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/GenRegRes-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class ","text":"Laurent Gatto <lg390@cam.ac.uk>","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/GenRegRes-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class ","text":"","code":"showClass(\"GenRegRes\") #> Class \"GenRegRes\" [package \"pRoloc\"] #>  #> Slots: #>                                                                        #> Name:        algorithm hyperparameters          design             log #> Class:       character            list         numeric            list #>                                                                        #> Name:             seed         results      f1Matrices      cmMatrices #> Class:         integer          matrix            list            list #>                                        #> Name:   testPartitions        datasize #> Class:            list            list #>  #> Known Subclasses: \"ThetaRegRes\" showClass(\"ThetaRegRes\") #> Class \"ThetaRegRes\" [package \"pRoloc\"] #>  #> Slots: #>                                                                        #> Name:      predictions    otherWeights       algorithm hyperparameters #> Class:            list            list       character            list #>                                                                        #> Name:           design             log            seed         results #> Class:         numeric            list         integer          matrix #>                                                                        #> Name:       f1Matrices      cmMatrices  testPartitions        datasize #> Class:            list            list            list            list #>  #> Extends: \"GenRegRes\""},{"path":"https://lgatto.github.io/pRoloc/reference/MCMCParams.html","id":null,"dir":"Reference","previous_headings":"","what":"Instrastructure to store and process MCMC results — MCMCChains-class","title":"Instrastructure to store and process MCMC results — MCMCChains-class","text":"MCMCParams infrastructure used store process Marchov chain Monte Carlo results T-Augmented Gaussian Mixture model (TAGM) Crook et al. (2018).","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/MCMCParams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Instrastructure to store and process MCMC results — MCMCChains-class","text":"","code":"chains(object)  # S4 method for class 'MCMCParams' show(object)  # S4 method for class 'ComponentParam' show(object)  # S4 method for class 'MCMCChain' show(object)  # S4 method for class 'MCMCChains' length(x)  # S4 method for class 'MCMCParams' length(x)  # S4 method for class 'MCMCChains,ANY,ANY' x[[i, j = \"missing\", drop = \"missing\"]]  # S4 method for class 'MCMCParams,ANY,ANY' x[[i, j = \"missing\", drop = \"missing\"]]  # S4 method for class 'MCMCChains,ANY,ANY,ANY' x[i, j = \"missing\", drop = \"missing\"]  # S4 method for class 'MCMCParams,ANY,ANY,ANY' x[i, j = \"missing\", drop = \"missing\"]  # S4 method for class 'MCMCChains' show(object)"},{"path":"https://lgatto.github.io/pRoloc/reference/MCMCParams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Instrastructure to store and process MCMC results — MCMCChains-class","text":"object instance appropriate class. x Object subset. integer(). length 1 [[. j Missing. drop Missing.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/MCMCParams.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Instrastructure to store and process MCMC results — MCMCChains-class","text":"Objects MCMCParams class created tagmMcmcTrain() function. objects store priors generative TAGM model results MCMC chains, stored instance class MCMCChains can accessed chains() function. summary MCMC chains (class MCMCSummary) can computed tagmMcmcProcess() function. See pRoloc-bayesian vignette examples.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/MCMCParams.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Instrastructure to store and process MCMC results — MCMCChains-class","text":"chains list() containing individual full MCMC chain results MCMCChains instance. element must valid MCMCChain instance. posteriorEstimates data.frame documenting prosterior priors MCMCSummary instance. contains N rows columns tagm.allocation, tagm.probability, tagm.outlier, tagm.probability.lowerquantile, tagm.probability.upperquantile tagm.mean.shannon. diagnostics matrix dimensions 1 2 containing MCMCSummary diagnostics. tagm.joint matrix dimensions N K storing joint probability MCMCSummary instance. method character(1) describing method MCMCParams object. chains Object class MCMCChains containing full MCMC chain results stored MCMCParams object. priors list() summary Object class MCMCSummary summarised MCMC results available MCMCParams instance. n integer(1) indicating number MCMC interactions. Stored MCMCChain instance. K integer(1) indicating number components. Stored MCMCChain instance. N integer(1) indicating number proteins. Stored MCMCChain instance. Component matrix(N, n) component allocation results MCMCChain instance. ComponentProb matrix(N, n, K) component allocation probabilities MCMCChain instance. Outlier matrix(N, n) outlier allocation results. OutlierProb matrix(N, n, 2) outlier allocation probabilities MCMCChain instance.","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/reference/MLearn-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"The MLearn interface for machine learning — MLearn-methods","title":"The MLearn interface for machine learning — MLearn-methods","text":"method implements MLInterfaces'   MLean method instances class   \"MSnSet\".","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/MLearn-methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"The MLearn interface for machine learning — MLearn-methods","text":"signature(formula = \"formula\", data = \"MSnSet\", .method \t= \"learnerSchema\", trainInd = \"numeric\") learning problem stated formula applies       .method schema MSnSet data input       using trainInd numeric indices train data. signature(formula = \"formula\", data = \"MSnSet\", .method \t= \"learnerSchema\", trainInd = \"xvalSpec\") case, instance xvalSpec used       cross-validation. signature(formula = \"formula\", data = \"MSnSet\", .method \t= \"clusteringSchema\", trainInd = \"missing\") Hierarchical (hclustI), k-means (kmeansI)       partitioning around medoids (pamI) clustering algorithms       using MLInterface's MLearn interface.","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/reference/MartInstance-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"Internal infrastructure query/handle several individual mart   instance. See MartInterface.R details.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/MartInstance-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class ","text":"Laurent Gatto <lg390@cam.ac.uk>","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/QSep-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Quantify resolution of a spatial proteomics experiment — QSep-class","title":"Quantify resolution of a spatial proteomics experiment — QSep-class","text":"QSep infrastructure provide way quantify   resolution spatial proteomics experiment, .e. quantify   well annotated sub-cellular clusters separated . QSep function calculates within cluster   average distances. distances divided column-wise   respective within cluster average distance. example, dataset   2 spatial clusters, obtain  Normalised distance represent ratio within average   distances, .e. much bigger average distance cluster   \\(c_i\\) \\(c_j\\) compared average distance within   cluster \\(c_i\\).  Note normalised distance matrix symmetric anymore   normalised distance ratios proportional tightness   reference cluster (along columns). Missing values affect fractions containing NA   distance computed (see example ) used   calculating mean distances. missing values expected   negligible effect, data high proportion missing data   produce skewed distances.  QSep, take   conservative approach, using data provided user,   expect data missingness handled proceeding   analysis.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/QSep-class.html","id":"objects-from-the-class","dir":"Reference","previous_headings":"","what":"Objects from the Class","title":"Quantify resolution of a spatial proteomics experiment — QSep-class","text":"Objects can created calls using constructor   QSep (see ).","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/QSep-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Quantify resolution of a spatial proteomics experiment — QSep-class","text":"x: Object class \"matrix\" containing       pairwise distance matrix, accessible qseq(., norm =       FALSE). xnorm: Object class \"matrix\" containing       normalised pairwise distance matrix, accessible qsep(., \tnorm = TRUE) qsep(.). object: Object class \"character\"       variable name MSnSet object used       generate QSep object. .__classVersion__: Object class \"Versions\"       storing class version object.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/QSep-class.html","id":"extends","dir":"Reference","previous_headings":"","what":"Extends","title":"Quantify resolution of a spatial proteomics experiment — QSep-class","text":"Class \"Versioned\", directly.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/QSep-class.html","id":"methods-and-functions","dir":"Reference","previous_headings":"","what":"Methods and functions","title":"Quantify resolution of a spatial proteomics experiment — QSep-class","text":"QSeq signature(object = \"MSnSet\", fcol = \"character\"):       constructor QSep objects. fcol argument       defines name feature variable annotates       sub-cellular clusters. Non-marker proteins, marked       \"unknown\" automatically removed prior distance       calculation. qsep signature{object = \"QSep\", norm = \"logical\"}:       accessor normalised (norm TRUE,       default) raw (norm FALSE)       pairwise distance matrices. names signature{object = \"QSep\"}: method retrieve       names sub-celluar clusters originally defined       QSep's fcol argument.  replacement method       names(.) <-  also available. summary signature(object = \"QSep\", ..., verbose = \t\"logical\"): Invisible return cluster average       distances prints (verbose TRUE,       default) summary . levelPlot signature(object = \"QSep\", norm = \"logical\", \t...): plots annotated heatmap normalised pairwise \tdistances. norm (default TRUE) defines whether \tnormalised distances plotted. Additional arguments \t... passed levelplot. plot signature(object = \"QSep\", norm = \"logical\"...):       produces boxplot normalised pairwise distances. red       points represent within average distance black points       average distances. norm (default TRUE)       defines whether normalised distances plotted.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/QSep-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Quantify resolution of a spatial proteomics experiment — QSep-class","text":"Assessing sub-cellular resolution spatial proteomics experiments   Laurent Gatto, Lisa M Breckels, Kathryn S Lilley bioRxiv 377630; doi:   https://doi.org/10.1101/377630","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/QSep-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Quantify resolution of a spatial proteomics experiment — QSep-class","text":"Laurent Gatto <lg390@cam.ac.uk>","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/QSep-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quantify resolution of a spatial proteomics experiment — QSep-class","text":"","code":"## Test data from Christoforou et al. 2016 library(\"pRolocdata\") data(hyperLOPIT2015)  ## Create the object and get a summary hlq <- QSep(hyperLOPIT2015) hlq #> Object of class 'QSep'. #>  Data: hyperLOPIT2015  #>  With 14 sub-cellular clusters. summary(hlq) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>  0.9458  3.6189  4.9075  5.1172  6.5779 11.4970   ## mean distance matrix qsep(hlq, norm = FALSE) #>                                       Actin cytoskeleton #> Actin cytoskeleton                             0.1372312 #> Endoplasmic reticulum/Golgi apparatus          0.4690770 #> Mitochondrion                                  0.7536736 #> Extracellular matrix                           0.4030989 #> Nucleus - Chromatin                            0.8050828 #> Cytosol                                        0.5661409 #> Plasma membrane                                0.2164849 #> Nucleus - Non-chromatin                        0.7485378 #> Endosome                                       0.3955070 #> 60S Ribosome                                   0.4991471 #> Lysosome                                       0.3924089 #> Peroxisome                                     0.6861757 #> 40S Ribosome                                   0.5657759 #> Proteasome                                     0.6686545 #>                                       Endoplasmic reticulum/Golgi apparatus #> Actin cytoskeleton                                                0.4690770 #> Endoplasmic reticulum/Golgi apparatus                             0.1315295 #> Mitochondrion                                                     0.4961792 #> Extracellular matrix                                              0.1676919 #> Nucleus - Chromatin                                               0.6674186 #> Cytosol                                                           0.8032906 #> Plasma membrane                                                   0.4314796 #> Nucleus - Non-chromatin                                           0.7266946 #> Endosome                                                          0.3298215 #> 60S Ribosome                                                      0.4405743 #> Lysosome                                                          0.3526493 #> Peroxisome                                                        0.4138766 #> 40S Ribosome                                                      0.6106558 #> Proteasome                                                        0.8685051 #>                                       Mitochondrion Extracellular matrix #> Actin cytoskeleton                        0.7536736            0.4030989 #> Endoplasmic reticulum/Golgi apparatus     0.4961792            0.1676919 #> Mitochondrion                             0.1373421            0.5455040 #> Extracellular matrix                      0.5455040            0.1053434 #> Nucleus - Chromatin                       0.5424170            0.6929457 #> Cytosol                                   0.9585277            0.7755911 #> Plasma membrane                           0.7462545            0.3556568 #> Nucleus - Non-chromatin                   0.7106804            0.7267853 #> Endosome                                  0.7198622            0.2420721 #> 60S Ribosome                              0.5168101            0.4430401 #> Lysosome                                  0.7471831            0.2483814 #> Peroxisome                                0.2418018            0.4724549 #> 40S Ribosome                              0.6601247            0.6060881 #> Proteasome                                0.9917128            0.8497961 #>                                       Nucleus - Chromatin   Cytosol #> Actin cytoskeleton                              0.8050828 0.5661409 #> Endoplasmic reticulum/Golgi apparatus           0.6674186 0.8032906 #> Mitochondrion                                   0.5424170 0.9585277 #> Extracellular matrix                            0.6929457 0.7755911 #> Nucleus - Chromatin                             0.1463443 0.9484646 #> Cytosol                                         0.9484646 0.1414339 #> Plasma membrane                                 0.8341281 0.7443767 #> Nucleus - Non-chromatin                         0.4154339 0.7974210 #> Endosome                                        0.8226749 0.7826439 #> 60S Ribosome                                    0.5602938 0.6438972 #> Lysosome                                        0.8451732 0.7995801 #> Peroxisome                                      0.5094584 0.9068309 #> 40S Ribosome                                    0.6518274 0.5331764 #> Proteasome                                      0.9718751 0.1600117 #>                                       Plasma membrane Nucleus - Non-chromatin #> Actin cytoskeleton                          0.2164849               0.7485378 #> Endoplasmic reticulum/Golgi apparatus       0.4314796               0.7266946 #> Mitochondrion                               0.7462545               0.7106804 #> Extracellular matrix                        0.3556568               0.7267853 #> Nucleus - Chromatin                         0.8341281               0.4154339 #> Cytosol                                     0.7443767               0.7974210 #> Plasma membrane                             0.1148277               0.8199944 #> Nucleus - Non-chromatin                     0.8199944               0.1783578 #> Endosome                                    0.3425939               0.8135370 #> 60S Ribosome                                0.5616175               0.4546378 #> Lysosome                                    0.3274954               0.8365127 #> Peroxisome                                  0.6788467               0.6518952 #> 40S Ribosome                                0.6760487               0.4643483 #> Proteasome                                  0.8444952               0.8064265 #>                                        Endosome 60S Ribosome  Lysosome #> Actin cytoskeleton                    0.3955070   0.49914711 0.3924089 #> Endoplasmic reticulum/Golgi apparatus 0.3298215   0.44057429 0.3526493 #> Mitochondrion                         0.7198622   0.51681006 0.7471831 #> Extracellular matrix                  0.2420721   0.44304012 0.2483814 #> Nucleus - Chromatin                   0.8226749   0.56029383 0.8451732 #> Cytosol                               0.7826439   0.64389721 0.7995801 #> Plasma membrane                       0.3425939   0.56161748 0.3274954 #> Nucleus - Non-chromatin               0.8135370   0.45463783 0.8365127 #> Endosome                              0.1804409   0.54561425 0.1706577 #> 60S Ribosome                          0.5456143   0.08250087 0.5709784 #> Lysosome                              0.1706577   0.57097838 0.1023701 #> Peroxisome                            0.6442550   0.41710740 0.6716427 #> 40S Ribosome                          0.6762709   0.22048766 0.7022256 #> Proteasome                            0.8642925   0.67687443 0.8858795 #>                                       Peroxisome 40S Ribosome Proteasome #> Actin cytoskeleton                     0.6861757   0.56577585 0.66865454 #> Endoplasmic reticulum/Golgi apparatus  0.4138766   0.61065583 0.86850511 #> Mitochondrion                          0.2418018   0.66012471 0.99171284 #> Extracellular matrix                   0.4724549   0.60608808 0.84979611 #> Nucleus - Chromatin                    0.5094584   0.65182738 0.97187508 #> Cytosol                                0.9068309   0.53317641 0.16001172 #> Plasma membrane                        0.6788467   0.67604868 0.84449520 #> Nucleus - Non-chromatin                0.6518952   0.46434826 0.80642652 #> Endosome                               0.6442550   0.67627087 0.86429254 #> 60S Ribosome                           0.4171074   0.22048766 0.67687443 #> Lysosome                               0.6716427   0.70222557 0.88587953 #> Peroxisome                             0.1378630   0.57564364 0.94187426 #> 40S Ribosome                           0.5756436   0.08388726 0.53905744 #> Proteasome                             0.9418743   0.53905744 0.08625819  ## normalised average distance matrix qsep(hlq) #>                                       Actin cytoskeleton #> Actin cytoskeleton                              1.000000 #> Endoplasmic reticulum/Golgi apparatus           3.566325 #> Mitochondrion                                   5.487565 #> Extracellular matrix                            3.826523 #> Nucleus - Chromatin                             5.501293 #> Cytosol                                         4.002866 #> Plasma membrane                                 1.885302 #> Nucleus - Non-chromatin                         4.196833 #> Endosome                                        2.191892 #> 60S Ribosome                                    6.050204 #> Lysosome                                        3.833237 #> Peroxisome                                      4.977229 #> 40S Ribosome                                    6.744479 #> Proteasome                                      7.751780 #>                                       Endoplasmic reticulum/Golgi apparatus #> Actin cytoskeleton                                                 3.418152 #> Endoplasmic reticulum/Golgi apparatus                              1.000000 #> Mitochondrion                                                      3.612725 #> Extracellular matrix                                               1.591860 #> Nucleus - Chromatin                                                4.560606 #> Cytosol                                                            5.679619 #> Plasma membrane                                                    3.757626 #> Nucleus - Non-chromatin                                            4.074365 #> Endosome                                                           1.827864 #> 60S Ribosome                                                       5.340238 #> Lysosome                                                           3.444845 #> Peroxisome                                                         3.002086 #> 40S Ribosome                                                       7.279483 #> Proteasome                                                        10.068668 #>                                       Mitochondrion Extracellular matrix #> Actin cytoskeleton                         5.492000             2.937371 #> Endoplasmic reticulum/Golgi apparatus      3.772380             1.274937 #> Mitochondrion                              1.000000             3.971864 #> Extracellular matrix                       5.178342             1.000000 #> Nucleus - Chromatin                        3.706445             4.735038 #> Cytosol                                    6.777214             5.483772 #> Plasma membrane                            6.498905             3.097308 #> Nucleus - Non-chromatin                    3.984578             4.074873 #> Endosome                                   3.989463             1.341559 #> 60S Ribosome                               6.264298             5.370126 #> Lysosome                                   7.298839             2.426307 #> Peroxisome                                 1.753928             3.426989 #> 40S Ribosome                               7.869189             7.225032 #> Proteasome                                11.497028             9.851773 #>                                       Nucleus - Chromatin  Cytosol #> Actin cytoskeleton                               5.866617 4.125454 #> Endoplasmic reticulum/Golgi apparatus            5.074288 6.107304 #> Mitochondrion                                    3.949387 6.979127 #> Extracellular matrix                             6.577972 7.362505 #> Nucleus - Chromatin                              1.000000 6.481050 #> Cytosol                                          6.706063 1.000000 #> Plasma membrane                                  7.264170 6.482553 #> Nucleus - Non-chromatin                          2.329217 4.470907 #> Endosome                                         4.559249 4.337398 #> 60S Ribosome                                     6.791368 7.804732 #> Lysosome                                         8.256053 7.810677 #> Peroxisome                                       3.695397 6.577769 #> 40S Ribosome                                     7.770279 6.355869 #> Proteasome                                      11.267046 1.855032 #>                                       Plasma membrane Nucleus - Non-chromatin #> Actin cytoskeleton                           1.577520                5.454575 #> Endoplasmic reticulum/Golgi apparatus        3.280478                5.524955 #> Mitochondrion                                5.433546                5.174528 #> Extracellular matrix                         3.376167                6.899202 #> Nucleus - Chromatin                          5.699765                2.838743 #> Cytosol                                      5.263072                5.638118 #> Plasma membrane                              1.000000                7.141084 #> Nucleus - Non-chromatin                      4.597470                1.000000 #> Endosome                                     1.898649                4.508607 #> 60S Ribosome                                 6.807412                5.510703 #> Lysosome                                     3.199131                8.171452 #> Peroxisome                                   4.924068                4.728573 #> 40S Ribosome                                 8.059015                5.535385 #> Proteasome                                   9.790319                9.348985 #>                                        Endosome 60S Ribosome  Lysosome #> Actin cytoskeleton                     2.882049     3.637272  2.859474 #> Endoplasmic reticulum/Golgi apparatus  2.507586     3.349623  2.681142 #> Mitochondrion                          5.241381     3.762940  5.440307 #> Extracellular matrix                   2.297934     4.205676  2.357826 #> Nucleus - Chromatin                    5.621503     3.828601  5.775239 #> Cytosol                                5.533638     4.552637  5.653384 #> Plasma membrane                        2.983548     4.890957  2.852059 #> Nucleus - Non-chromatin                4.561265     2.549022  4.690083 #> Endosome                               1.000000     3.023784  0.945782 #> 60S Ribosome                           6.613436     1.000000  6.920877 #> Lysosome                               1.667066     5.577587  1.000000 #> Peroxisome                             4.673155     3.025521  4.871813 #> 40S Ribosome                           8.061664     2.628381  8.371064 #> Proteasome                            10.019831     7.847074 10.270091 #>                                       Peroxisome 40S Ribosome Proteasome #> Actin cytoskeleton                      5.000144     4.122794   4.872468 #> Endoplasmic reticulum/Golgi apparatus   3.146645     4.642729   6.603120 #> Mitochondrion                           1.760581     4.806427   7.220750 #> Extracellular matrix                    4.484904     5.753452   8.066916 #> Nucleus - Chromatin                     3.481232     4.454068   6.641018 #> Cytosol                                 6.411695     3.769793   1.131353 #> Plasma membrane                         5.911872     5.887504   7.354454 #> Nucleus - Non-chromatin                 3.654986     2.603465   4.521399 #> Endosome                                3.570449     3.747880   4.789893 #> 60S Ribosome                            5.055794     2.672549   8.204452 #> Lysosome                                6.560924     6.859672   8.653691 #> Peroxisome                              1.000000     4.175476   6.831959 #> 40S Ribosome                            6.862111     1.000000   6.425975 #> Proteasome                             10.919244     6.249348   1.000000  ## Update the organelle cluster names for better ## rendering on the plots names(hlq) <- sub(\"/\", \"\\n\", names(hlq)) names(hlq) <- sub(\" - \", \"\\n\", names(hlq)) names(hlq) #>  [1] \"Actin cytoskeleton\"                     #>  [2] \"Endoplasmic reticulum\\nGolgi apparatus\" #>  [3] \"Mitochondrion\"                          #>  [4] \"Extracellular matrix\"                   #>  [5] \"Nucleus\\nChromatin\"                     #>  [6] \"Cytosol\"                                #>  [7] \"Plasma membrane\"                        #>  [8] \"Nucleus\\nNon-chromatin\"                 #>  [9] \"Endosome\"                               #> [10] \"60S Ribosome\"                           #> [11] \"Lysosome\"                               #> [12] \"Peroxisome\"                             #> [13] \"40S Ribosome\"                           #> [14] \"Proteasome\"                              ## Heatmap of the normalised intensities levelPlot(hlq)   ## Boxplot of the normalised intensities par(mar = c(3, 10, 2, 1)) plot(hlq)   ## Boxplot of all between cluster average distances x <- summary(hlq, verbose = FALSE) boxplot(x)   ## Missing data example, for 4 proteins and 3 fractions x <- rbind(c(1.1, 1.2, 1.3), rep(1, 3), c(NA, 1, 1), c(1, 1, NA)) rownames(x) <- paste0(\"P\", 1:4) colnames(x) <- paste0(\"F\", 1:3)  ## P1 is the reference, against which we will calculate distances. P2 ## has a complete profile, producing the *real* distance. P3 and P4 have ## missing values in the first and last fraction respectively. x #>     F1  F2  F3 #> P1 1.1 1.2 1.3 #> P2 1.0 1.0 1.0 #> P3  NA 1.0 1.0 #> P4 1.0 1.0  NA  ## If we drop F1 in P3, which represents a small difference of 0.1, the ## distance only considers F2 and F3, and increases. If we drop F3 in ## P4, which represents a large distance of 0.3, the distance only ## considers F1 and F2, and decreases.  dist(x)"},{"path":"https://lgatto.github.io/pRoloc/reference/SpatProtVis-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class SpatProtVis — SpatProtVis-class","title":"Class SpatProtVis — SpatProtVis-class","text":"class spatial proteomics visualisation, upon instantiation,   pre-computes defined visualisations. Objects can created   SpatProtVis constructor visualised plot   method. class essentially wrapper around several calls   plot2D stores dimensionality reduction   outputs, likely updated future.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/SpatProtVis-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class SpatProtVis — SpatProtVis-class","text":"","code":"SpatProtVis(x, methods, dims, methargs, ...)"},{"path":"https://lgatto.github.io/pRoloc/reference/SpatProtVis-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class SpatProtVis — SpatProtVis-class","text":"x instance class MSnSet visualise. methods Dimensionality reduction methods used     visualise data. Must contained plot2Dmethods     (except \"scree\"). See plot2D details. dims list numerics defining dimensions used     plotting. Default 1 2. provided, length     list must identical length methods. methargs list additional arguments passed     visualisation method. provided, length list must     identical length methods. ... Additional arguments. Currently ignored.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/SpatProtVis-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class SpatProtVis — SpatProtVis-class","text":"vismats: \"list\" matrices containing       feature projections 2 dimensions. data: original spatial proteomics data stored       \"MSnSet\". methargs: \"list\" additional plotting     arguments. objname: \"character\" defining name       dataset. default, set using variable name used       object creation.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/SpatProtVis-class.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Class SpatProtVis — SpatProtVis-class","text":"plot: Generates figures respective       methods additional arguments defined       constructor. used interactive session, user       prompted press 'Return' new figures displayed. show: simple textual summary object.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/SpatProtVis-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Class SpatProtVis — SpatProtVis-class","text":"Laurent Gatto <lg390@cam.ac.uk>","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/reference/SpatProtVis-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class SpatProtVis — SpatProtVis-class","text":"","code":"library(\"pRolocdata\") data(dunkley2006) ## Default parameters for a set of methods ## (in the interest of time, don't use t-SNE) m <- c(\"PCA\", \"MDS\", \"kpca\") vis <- SpatProtVis(dunkley2006, methods = m) #> Producting PCA visualisation... #> Producting MDS visualisation... #> Producting kpca visualisation... vis #> Object of class \"SpatProtVis\" #>  Data: dunkley2006  #>  Visualisation methods: PCA, MDS, kpca plot(vis)    #> Done. plot(vis, legend = \"topleft\")    #> Done.  ## Setting method arguments margs <- c(list(kpar = list(sigma = 0.1)),            list(kpar = list(sigma = 1.0)),            list(kpar = list(sigma = 10)),            list(kpar = list(sigma = 100))) vis <- SpatProtVis(dunkley2006,                    methods = rep(\"kpca\", 4),                    methargs = margs) #> Producting kpca visualisation... #> Producting kpca visualisation... #> Producting kpca visualisation... #> Producting kpca visualisation... par(mfrow = c(2, 2)) plot(vis)  #> Done.  ## Multiple PCA plots but different PCs dims <- list(c(1, 2), c(3, 4)) vis <- SpatProtVis(dunkley2006, methods = c(\"PCA\", \"PCA\"), dims = dims) #> Producting PCA visualisation... #> Producting PCA visualisation... plot(vis) #> Done."},{"path":"https://lgatto.github.io/pRoloc/reference/addGoAnnotations.html","id":null,"dir":"Reference","previous_headings":"","what":"Add GO annotations — addGoAnnotations","title":"Add GO annotations — addGoAnnotations","text":"Adds GO annotations feature data","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/addGoAnnotations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add GO annotations — addGoAnnotations","text":"","code":"addGoAnnotations(   object,   params,   evidence,   useID = FALSE,   fcol = \"GOAnnotations\",   ... )"},{"path":"https://lgatto.github.io/pRoloc/reference/addGoAnnotations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add GO annotations — addGoAnnotations","text":"object instance class MSnSet. params instance class AnnotationParams. missing, getAnnotationParams used. evidence GO evidence filtering. useID Logical. GO term names identifiers used? TRUE, identifiers used. FALSE GO term names used. fcol Character. Name matrix annotations added fData default GOAnnotations ... arguments passed makeGoSet","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/addGoAnnotations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add GO annotations — addGoAnnotations","text":"updated MSnSet new feature data column called GOAnnotations containing matrix GO annotations","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/addGoAnnotations.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add GO annotations — addGoAnnotations","text":"Lisa M Breckels","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/addGoAnnotations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add GO annotations — addGoAnnotations","text":"","code":"library(pRolocdata) data(dunkley2006) par <- setAnnotationParams(inputs =                    c(\"Arabidopsis thaliana genes\",                    \"Gene stable ID\")) #> Using species Arabidopsis thaliana genes (TAIR10) #> Warning: Ensembl will soon enforce the use of https. #> Ensure the 'host' argument includes \"https://\" #> Using feature type Gene stable ID(s) [e.g. AT1G01010] #> Connecting to Biomart... #> Warning: Ensembl will soon enforce the use of https. #> Ensure the 'host' argument includes \"https://\" ## add protein sets/annotation information xx <- addGoAnnotations(dunkley2006, par) dim(fData(xx)$GOAnnotations) #> [1] 689  79  ## filter sets xx <- filterMinMarkers(xx, n = 50) #> Retaining 3 out of 79 in GOAnnotations dim(fData(xx)$GOAnnotations) #> [1] 689   3 xx <- filterMaxMarkers(xx, p = .25) #> Retaining 2 out of 3 in GOAnnotations dim(fData(xx)$GOAnnotations) #> [1] 689   2  ## Subset for specific protein sets sub <- subsetMarkers(xx, keep = c(\"vacuole\")) #> Warning: GO markers vacuole not found  ## Order protein sets res <- orderGoAnnotations(xx, k = 1:3, p = 1/3, verbose = FALSE) #> Calculating GO cluster densities if (interactive()) { pRolocVis(res, fcol = \"GOAnnotations\") }"},{"path":"https://lgatto.github.io/pRoloc/reference/addLegend.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds a legend — addLegend","title":"Adds a legend — addLegend","text":"Adds legend plot2D figure.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/addLegend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds a legend — addLegend","text":"","code":"addLegend(   object,   fcol = \"markers\",   where = c(\"bottomleft\", \"bottom\", \"bottomright\", \"left\", \"topleft\", \"top\", \"topright\",     \"right\", \"center\", \"other\"),   col,   bty = \"n\",   ... )"},{"path":"https://lgatto.github.io/pRoloc/reference/addLegend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds a legend — addLegend","text":"object instance class MSnSet fcol Feature meta-data label (fData column name) defining groups differentiated using different colours. Default markers. One \"bottomleft\" (default), \"bottomright\", \"topleft\", \"topright\" \"\" defining location legend. \"\" opens new graphics device, locations passed legend. col character defining point colours. bty Box type, legend. Default set \"n\". ... Additional parameters passed legend.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/addLegend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds a legend — addLegend","text":"Invisibly returns NULL","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/addLegend.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adds a legend — addLegend","text":"function updated version 1.3.6 recycle default colours organelle classes provided. See plot2D details.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/addLegend.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Adds a legend — addLegend","text":"Laurent Gatto","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/addMarkers.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds markers to the data — addMarkers","title":"Adds markers to the data — addMarkers","text":"function adds 'markers' feature variable. markers read comma separated values (csv) spreadsheet file. markers file expected 2 columns (others ignored) first name marker features second group label. Alternatively, markers named vector provided pRolocmarkers function can also used.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/addMarkers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds markers to the data — addMarkers","text":"","code":"addMarkers(object, markers, mcol = \"markers\", fcol, verbose = TRUE)"},{"path":"https://lgatto.github.io/pRoloc/reference/addMarkers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds markers to the data — addMarkers","text":"object instance class MSnSet. markers character name markers' csv file named character markers provided pRolocmarkers. mcol character length 1 defining feature variable label newly added markers. Default \"markers\". fcol optional feature variable used match markers. missing, feature names used. verbose logical indicating number markers marker table printed console.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/addMarkers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds markers to the data — addMarkers","text":"new instance class MSnSet additional markers feature variable.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/addMarkers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Adds markers to the data — addMarkers","text":"essential assure featureNames(object) (fcol, see ) marker names (first column) match, .e. feature identifiers case fold used.","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/reference/addMarkers.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Adds markers to the data — addMarkers","text":"Laurent Gatto","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/addMarkers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds markers to the data — addMarkers","text":"","code":"library(\"pRolocdata\") data(dunkley2006) atha <- pRolocmarkers(\"atha\") try(addMarkers(dunkley2006, atha)) ## markers already exists #> Error in addMarkers(dunkley2006, atha) :  #>   Detected an existing 'markers' feature column. fData(dunkley2006)$markers.org <- fData(dunkley2006)$markers fData(dunkley2006)$markers <- NULL marked <- addMarkers(dunkley2006, atha) #> Markers in data: 255 out of 689 #> organelleMarkers #>            ER      ER Lumen   ER Membrane      Envelope         Golgi  #>            21             9            42             3            27  #> Mitochondrion            PM       Plastid      Ribosome           STR  #>            50            42            22             8             2  #>           TGN       Vacuole       unknown  #>            13            16           434  fvarLabels(marked) #> [1] \"assigned\"     \"evidence\"     \"method\"       \"new\"          \"pd.2013\"      #> [6] \"pd.markers\"   \"markers.orig\" \"markers.org\"  \"markers\"      ## if 'makers' already exists marked <- addMarkers(marked, atha, mcol = \"markers2\") #> Markers in data: 255 out of 689 #> organelleMarkers #>            ER      ER Lumen   ER Membrane      Envelope         Golgi  #>            21             9            42             3            27  #> Mitochondrion            PM       Plastid      Ribosome           STR  #>            50            42            22             8             2  #>           TGN       Vacuole       unknown  #>            13            16           434  fvarLabels(marked) #>  [1] \"assigned\"     \"evidence\"     \"method\"       \"new\"          \"pd.2013\"      #>  [6] \"pd.markers\"   \"markers.orig\" \"markers.org\"  \"markers\"      \"markers2\"     stopifnot(all.equal(fData(marked)$markers, fData(marked)$markers2)) plot2D(marked) addLegend(marked, where = \"topleft\", cex = .7)"},{"path":"https://lgatto.github.io/pRoloc/reference/checkFeatureNamesOverlap.html","id":null,"dir":"Reference","previous_headings":"","what":"Check feature names overlap — checkFeatureNamesOverlap","title":"Check feature names overlap — checkFeatureNamesOverlap","text":"Checks marker unknown feature overlap two MSnSet instances.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/checkFeatureNamesOverlap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check feature names overlap — checkFeatureNamesOverlap","text":"","code":"checkFeatureNamesOverlap(x, y, fcolx = \"markers\", fcoly, verbose = TRUE)"},{"path":"https://lgatto.github.io/pRoloc/reference/checkFeatureNamesOverlap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check feature names overlap — checkFeatureNamesOverlap","text":"x MSnSet instance. y MSnSet instance. fcolx feature variable separate unknown (fData(y)$coly == \"unknown\") marker features x object. fcoly fcolx, y object. missing, value fcolx used. verbose TRUE (default), overlap printed console.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/checkFeatureNamesOverlap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check feature names overlap — checkFeatureNamesOverlap","text":"Invisibly returns named list common markers, unique x markers, unique y markers , common unknowns, unique x unknowns unique y unknowns.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/checkFeatureNamesOverlap.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check feature names overlap — checkFeatureNamesOverlap","text":"Laurent Gatto","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/checkFeatureNamesOverlap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check feature names overlap — checkFeatureNamesOverlap","text":"","code":"library(\"pRolocdata\") data(andy2011) data(andy2011goCC) checkFeatureNamesOverlap(andy2011, andy2011goCC) #> Common markers:  404  #> Unique x markers:  0  #> Unique y markers:  0  #> Common unkowns:  967  #> Unique x unknowns:  0  #> Unique y unknowns:  0  featureNames(andy2011goCC)[1] <- \"ABC\" res <- checkFeatureNamesOverlap(andy2011, andy2011goCC) #> Common markers:  403  #> Unique x markers:  1  #> Unique y markers:  1  #> Common unkowns:  967  #> Unique x unknowns:  0  #> Unique y unknowns:  0  res$markersX #> [1] \"O00767\" res$markersY #> [1] \"ABC\""},{"path":"https://lgatto.github.io/pRoloc/reference/checkFvarOverlap.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare a feature variable overlap — checkFvarOverlap","title":"Compare a feature variable overlap — checkFvarOverlap","text":"Extracts qualitative feature variables two MSnSet instances compares contingency table.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/checkFvarOverlap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare a feature variable overlap — checkFvarOverlap","text":"","code":"checkFvarOverlap(x, y, fcolx = \"markers\", fcoly, verbose = TRUE)"},{"path":"https://lgatto.github.io/pRoloc/reference/checkFvarOverlap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare a feature variable overlap — checkFvarOverlap","text":"x MSnSet instance. y MSnSet instance. fcolx feature variable separate unknown (fData(y)$coly == \"unknown\") marker features x object. fcoly fcolx, y object. missing, value fcolx used. verbose TRUE (default), contingency table feature variables printed .","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/checkFvarOverlap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare a feature variable overlap — checkFvarOverlap","text":"Invisibly returns named list values diagonal, upper lower triangles contingency table.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/checkFvarOverlap.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compare a feature variable overlap — checkFvarOverlap","text":"Laurent Gatto","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/checkFvarOverlap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare a feature variable overlap — checkFvarOverlap","text":"","code":"library(\"pRolocdata\") data(dunkley2006) res <- checkFvarOverlap(dunkley2006, dunkley2006,                         \"markers\", \"markers.orig\") #>                my #> mx               ER Golgi  PM mit/plastid unknown vacuole #>   ER lumen       11     0   0           0       3       0 #>   ER membrane    21     0   0           0      24       0 #>   Golgi           0    27   0           0       1       0 #>   Mitochondrion   0     0   0          13      42       0 #>   PM              0     0  28           0      18       0 #>   Plastid         0     0   0           7      13       0 #>   Ribosome        0     0   0           0      19       0 #>   TGN             0     0   0           0      13       0 #>   unknown        17     0   0           6     405       0 #>   vacuole         0     0   0           0       9      12 str(res) #> List of 3 #>  $ matches         : int [1:6] 11 0 0 13 18 0 #>  $ lower.mismatches: int [1:39] 21 0 0 0 0 0 0 17 0 27 ... #>  $ upper.mismatches: int [1:39] 21 0 0 0 0 0 0 17 0 27 ..."},{"path":"https://lgatto.github.io/pRoloc/reference/chi2-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"The PCP 'chi square' method — chi2-methods","title":"The PCP 'chi square' method — chi2-methods","text":"original protein correlation profiling (PCP), Andersen et   al. use peptide normalised profiles along gradient fractions   compared reference profiles (set profiles)   computing \\(Chi^2\\) values,   \\(\\frac{\\sum (x_i - x_p)^2}{x_p}\\),   \\(x_i\\) normalised value peptide fraction   \\(x_p\\) value marker (Wiese et al., 2007).   protein \\(Chi^2\\) computed median peptide   \\(Chi^2\\) values. Peptides proteins similar profiles   markers small \\(Chi^2\\) values. chi2 methods implement idea compute Chi^2   values sets proteins.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/chi2-methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"The PCP 'chi square' method — chi2-methods","text":"signature(x = \"matrix\", y = \"matrix\", method = \t\"character\", fun = \"NULL\", na.rm = \"logical\") Compute nrow(x) times nrow(y) \\(Chi^2\\) values,       x, y feature pair. Method one       \"Andersen2003\" \"Wiese2007\"; former (default)       computed \\(Chi^2\\) sum(y-x)^2/length(x),       latter uses sum((y-x)^2/x). na.rm defines missing       values (NA NaN) removed prior       summation. fun defines summarise \\(Chi^2\\)       values; default, NULL, combine \\(Chi^2\\)       values. signature(x = \"matrix\", y = \"numeric\", method = \t\"character\", na.rm = \"logical\") Computes nrow(x) \\(Chi^2\\) values, \\((x_i, \ty)\\) pairs. See arguments. signature(x = \"numeric\", y = \"matrix\", method = \t\"character\", na.rm = \"logical\") Computes nrow(y) \\(Chi^2\\) values, \\((x, \ty_i)\\) pairs.  See arguments. signature(x = \"numeric\", y = \"numeric\", method = \t\"character\", na.rm = \"logical\") Computes \\(Chi^2\\) value \\((x, y)\\) pairs.  See       arguments.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/chi2-methods.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The PCP 'chi square' method — chi2-methods","text":"Andersen, J. S., Wilkinson, C. J., Mayor, T., Mortensen, P. et al.,   Proteomic characterization human centrosome protein   correlation profiling. Nature 2003, 426, 570 - 574. Wiese, S., Gronemeyer, T., Ofman, R., Kunze, M. et al., Proteomics   characterization mouse kidney peroxisomes tandem mass   spectrometry protein correlation profiling. Mol. Cell. Proteomics   2007, 6, 2045 - 2057.","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/reference/chi2-methods.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The PCP 'chi square' method — chi2-methods","text":"Laurent Gatto <lg390@cam.ac.uk>","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/chi2-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The PCP 'chi square' method — chi2-methods","text":"","code":"mrk <- rnorm(6) prot <- matrix(rnorm(60), ncol = 6) chi2(mrk, prot, method = \"Andersen2003\") #>  [1] 1.889892 4.245629 3.462126 3.920920 1.775587 4.896485 3.378966 3.712108 #>  [9] 3.825797 2.702991 chi2(mrk, prot, method = \"Wiese2007\") #>  [1]  -3.159876  11.164487 -11.367923   2.059008  -2.893832   2.777984 #>  [7] -10.243224   4.752001   5.091183  -1.412432  pepmark <- matrix(rnorm(18), ncol = 6) pepprot <- matrix(rnorm(60), ncol = 6) chi2(pepmark, pepprot) #>            [,1]      [,2]      [,3] #>  [1,] 1.1599707 0.8097051 2.1489121 #>  [2,] 1.1419376 1.5022289 1.6690684 #>  [3,] 0.9912393 2.6529197 0.9081877 #>  [4,] 1.0178592 1.5370036 1.0208939 #>  [5,] 2.0740377 5.3225284 2.2989775 #>  [6,] 1.7693526 0.5850152 1.7361577 #>  [7,] 1.7893898 1.9202860 1.4503931 #>  [8,] 0.5207063 1.7531744 0.3803269 #>  [9,] 0.5394268 1.1915734 0.8901226 #> [10,] 0.7455153 0.7556420 1.2791638 chi2(pepmark, pepprot, fun = sum) #>  [1] 4.118588 4.313235 4.552347 3.575757 9.695544 4.090525 5.160069 2.654208 #>  [9] 2.621123 2.780321"},{"path":"https://lgatto.github.io/pRoloc/reference/classWeights.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate class weights — classWeights","title":"Calculate class weights — classWeights","text":"Calculates class weights used parameter optimisation classification svmOptimisation svmClassification - see pRoloc tutorial vignette example. weights calculated non-unknown classes inverse number observations.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/classWeights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate class weights — classWeights","text":"","code":"classWeights(object, fcol = \"markers\")"},{"path":"https://lgatto.github.io/pRoloc/reference/classWeights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate class weights — classWeights","text":"object instance class MSnSet fcol name features weighted","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/classWeights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate class weights — classWeights","text":"table class weights","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/classWeights.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate class weights — classWeights","text":"Laurent Gatto","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/classWeights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate class weights — classWeights","text":"","code":"library(\"pRolocdata\") data(hyperLOPIT2015) classWeights(hyperLOPIT2015) #>  #>                          40S Ribosome                          60S Ribosome  #>                           0.037037037                           0.023255814  #>                    Actin cytoskeleton                               Cytosol  #>                           0.076923077                           0.023255814  #> Endoplasmic reticulum/Golgi apparatus                              Endosome  #>                           0.009345794                           0.076923077  #>                  Extracellular matrix                              Lysosome  #>                           0.076923077                           0.030303030  #>                         Mitochondrion                   Nucleus - Chromatin  #>                           0.002610966                           0.015625000  #>               Nucleus - Non-chromatin                            Peroxisome  #>                           0.011764706                           0.058823529  #>                       Plasma membrane                            Proteasome  #>                           0.019607843                           0.029411765  data(dunkley2006) classWeights(dunkley2006) #>  #>      ER lumen   ER membrane         Golgi Mitochondrion            PM  #>    0.07142857    0.02222222    0.03571429    0.01818182    0.02173913  #>       Plastid      Ribosome           TGN       vacuole  #>    0.05000000    0.05263158    0.07692308    0.04761905"},{"path":"https://lgatto.github.io/pRoloc/reference/clustDist.html","id":null,"dir":"Reference","previous_headings":"","what":"Pairwise Distance Computation for Protein Information Sets — clustDist","title":"Pairwise Distance Computation for Protein Information Sets — clustDist","text":"function computes mean (normalised) pairwise distances pre-defined sets proteins.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/clustDist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pairwise Distance Computation for Protein Information Sets — clustDist","text":"","code":"clustDist(object, k = 1:5, fcol = \"GOAnnotations\", n = 5, verbose = TRUE, seed)"},{"path":"https://lgatto.github.io/pRoloc/reference/clustDist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pairwise Distance Computation for Protein Information Sets — clustDist","text":"object instance class \"MSnSet\". k number clusters try fitting protein set. Default k = 1:5. fcol feature meta-data containing matrix protein sets/ marker definitions. Default GOAnnotations. n minimum number proteins per set. protein sets contain less n instances ignored. Defualt 5. verbose logical defining whether progress bar displayed. seed optional seed random number generator.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/clustDist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pairwise Distance Computation for Protein Information Sets — clustDist","text":"instance \"ClustDistList\" containing \"ClustDist\" instance every protein set, summarises algorithm information number k's tested kmeans, mean normalised pairwise Euclidean distances per numer component clusters tested.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/clustDist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pairwise Distance Computation for Protein Information Sets — clustDist","text":"input function MSnSet dataset containing matrix appended feature data slot identifying membership protein instances pre-defined set(s) e.g. specific Gene Ontology term etc. protein set, clustDist function () extracts instances belonging set, (ii) using kmeans algorithm fits tests k = c(1:5) (default) cluster components set, (iii) calculates mean pairwise distance k tested. Note: currently distances calcualted Euclidean space, distance metrics supported future). output list ClustDist objects, one per information cluster. ClustDist class summarises algorithm information number k's tested kmeans, mean normalised pairwise Euclidean distances per numer component clusters tested. See ?ClustDist details.","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/reference/clustDist.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Pairwise Distance Computation for Protein Information Sets — clustDist","text":"Lisa Breckels","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/clustDist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pairwise Distance Computation for Protein Information Sets — clustDist","text":"","code":"library(pRolocdata) data(dunkley2006) par <- setAnnotationParams(inputs =                    c(\"Arabidopsis thaliana genes\",                    \"Gene stable ID\")) #> Using species Arabidopsis thaliana genes (TAIR10) #> Warning: Ensembl will soon enforce the use of https. #> Ensure the 'host' argument includes \"https://\" #> Using feature type Gene stable ID(s) [e.g. AT1G01010] #> Connecting to Biomart... #> Warning: Ensembl will soon enforce the use of https. #> Ensure the 'host' argument includes \"https://\" ## add protein sets/annotation information xx <- addGoAnnotations(dunkley2006, par) ## filter xx <- filterMinMarkers(xx, n = 50) #> Retaining 3 out of 79 in GOAnnotations xx <- filterMaxMarkers(xx, p = .25) #> Retaining 2 out of 3 in GOAnnotations ## get distances for protein sets  dd <- clustDist(xx) #>    |                                                                               |                                                                      |   0%   |                                                                               |===================================                                   |  50%   |                                                                               |======================================================================| 100% ## plot clusters for first 'ClustDist' object  ## in the 'ClustDistList' plot(dd[[1]], xx)  ## plot distances for all protein sets  plot(dd)  ## Extract normalised distances ## Normalise by n^1/3 minDist <- getNormDist(dd, p = 1/3) ## Get new order according to lowest distance o <- order(minDist) ## Re-order GOAnnotations  fData(xx)$GOAnnotations <- fData(xx)$GOAnnotations[, o] if (interactive()) { pRolocVis(xx, fcol = \"GOAnnotations\") }"},{"path":"https://lgatto.github.io/pRoloc/reference/defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"pRoloc Deprecated and Defunct — Deprecated","title":"pRoloc Deprecated and Defunct — Deprecated","text":"function, class, data object asked   deprecated made defunct. Deprecated: minClassScore; use replacement getPredictions Defunct: Deprecated functions provided compatibility older versions   pRoloc package , defunct next release.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/empPvalues.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate empirical p-values for \\(Chi^2\\) protein correlations. — empPvalues","title":"Estimate empirical p-values for \\(Chi^2\\) protein correlations. — empPvalues","text":"Andersen et al. (2003) used fixed \\(Chi^2\\) threshold 0.05   identify organelle-specific candidates. function computes   empirical p-values permutation markers relative intensities   computed null \\(Chi^2\\) values.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/empPvalues.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate empirical p-values for \\(Chi^2\\) protein correlations. — empPvalues","text":"","code":"empPvalues(marker, corMatrix, n = 100, ...)"},{"path":"https://lgatto.github.io/pRoloc/reference/empPvalues.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate empirical p-values for \\(Chi^2\\) protein correlations. — empPvalues","text":"marker numerics markers relative intensities. corMatrix matrix nrow(corMatrix) protein relative     intensities compares marker. n number iterations. ... Additional parameters passed chi2.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/empPvalues.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate empirical p-values for \\(Chi^2\\) protein correlations. — empPvalues","text":"numeric length nrow(corMatrix).","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/empPvalues.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimate empirical p-values for \\(Chi^2\\) protein correlations. — empPvalues","text":"Laurent Gatto <lg390@cam.ac.uk>","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/reference/empPvalues.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate empirical p-values for \\(Chi^2\\) protein correlations. — empPvalues","text":"Andersen, J. S., Wilkinson, C. J., Mayor, T., Mortensen, P. et al.,   Proteomic characterization human centrosome protein   correlation profiling. Nature 2003, 426, 570 - 574.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/empPvalues.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate empirical p-values for \\(Chi^2\\) protein correlations. — empPvalues","text":"","code":"set.seed(1) mrk <- rnorm(6, 5, 1) prot <- rbind(matrix(rnorm(120, 5, 1), ncol = 6),               mrk + rnorm(6)) mrk <- mrk/sum(mrk) prot <- prot/rowSums(prot) empPvalues(mrk, prot) #>  [1] 0.92 0.43 0.62 0.23 0.49 0.49 0.42 0.19 0.85 0.59 0.83 0.44 0.78 0.83 0.92 #> [16] 0.90 0.34 0.62 0.18 0.32 0.00"},{"path":"https://lgatto.github.io/pRoloc/reference/fDataToUnknown.html","id":null,"dir":"Reference","previous_headings":"","what":"Update a feature variable — fDataToUnknown","title":"Update a feature variable — fDataToUnknown","text":"function replaces string regular expression feature variable using sub function.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/fDataToUnknown.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update a feature variable — fDataToUnknown","text":"","code":"fDataToUnknown(object, fcol = \"markers\", from = \"^$\", to = \"unknown\", ...)"},{"path":"https://lgatto.github.io/pRoloc/reference/fDataToUnknown.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update a feature variable — fDataToUnknown","text":"object instance class MSnSet. fcol Feature variable modified. Default \"markers\". NULL, feature variables updated. character defining string regular expression pattern replaced. Default empty string, .e. regular expression \"^$\".  See sub details. NA, NA values replaced . replacement matched pattern. Default \"unknown\".  See sub details. ... Additional arguments passed sub.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/fDataToUnknown.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update a feature variable — fDataToUnknown","text":"updated MSnSet.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/fDataToUnknown.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Update a feature variable — fDataToUnknown","text":"Laurent Gatto","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/fDataToUnknown.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update a feature variable — fDataToUnknown","text":"","code":"library(\"pRolocdata\") data(dunkley2006) getMarkers(dunkley2006, \"markers\") #> organelleMarkers #>      ER lumen   ER membrane         Golgi Mitochondrion            PM  #>            14            45            28            55            46  #>       Plastid      Ribosome           TGN       unknown       vacuole  #>            20            19            13           428            21  dunkley2006 <- fDataToUnknown(dunkley2006,                               from = \"unknown\", to = \"unassigned\") getMarkers(dunkley2006, \"markers\") #> organelleMarkers #>      ER lumen   ER membrane         Golgi Mitochondrion            PM  #>            14            45            28            55            46  #>       Plastid      Ribosome           TGN    unassigned       vacuole  #>            20            19            13           428            21"},{"path":"https://lgatto.github.io/pRoloc/reference/filterBinMSnSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter a binary MSnSet — filterBinMSnSet","title":"Filter a binary MSnSet — filterBinMSnSet","text":"Removes columns rows certain proportion absolute number 0 values.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/filterBinMSnSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter a binary MSnSet — filterBinMSnSet","text":"","code":"filterBinMSnSet(object, MARGIN = 2, t, q, verbose = TRUE)"},{"path":"https://lgatto.github.io/pRoloc/reference/filterBinMSnSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter a binary MSnSet — filterBinMSnSet","text":"object MSnSet MARGIN 1 2. Default 2. t Rows/columns t less 1s, filtered . t q missing, default use t = 1. q row higher quantile defined q, filtered . verbose logical defining message printed. Default TRUE.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/filterBinMSnSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter a binary MSnSet — filterBinMSnSet","text":"filtered MSnSet.","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/reference/filterBinMSnSet.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Filter a binary MSnSet — filterBinMSnSet","text":"Laurent Gatto","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/filterBinMSnSet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter a binary MSnSet — filterBinMSnSet","text":"","code":"set.seed(1) m <- matrix(sample(0:1, 25, replace=TRUE), 5) m[1, ] <- 0 m[, 1] <- 0 rownames(m) <- colnames(m) <- letters[1:5] fd <- data.frame(row.names = letters[1:5]) x <- MSnSet(exprs = m, fData = fd, pData = fd) exprs(x) #>   a b c d e #> a 0 0 0 0 0 #> b 0 0 0 1 0 #> c 0 0 0 1 0 #> d 0 1 0 1 0 #> e 0 1 0 0 0 ## Remove columns with no 1s exprs(filterBinMSnSet(x, MARGIN = 2, t = 0)) #> Removing 3 column(s) #>   b d #> a 0 0 #> b 0 1 #> c 0 1 #> d 1 1 #> e 1 0 ## Remove columns with one 1 or less exprs(filterBinMSnSet(x, MARGIN = 2, t = 1)) #> Removing 3 column(s) #>   b d #> a 0 0 #> b 0 1 #> c 0 1 #> d 1 1 #> e 1 0 ## Remove columns with two 1s or less exprs(filterBinMSnSet(x, MARGIN = 2, t = 2)) #> Removing 4 column(s) #>   d #> a 0 #> b 1 #> c 1 #> d 1 #> e 0 ## Remove columns with three 1s  exprs(filterBinMSnSet(x, MARGIN = 2, t = 3)) #> Removing 5 column(s) #>   #> a #> b #> c #> d #> e ## Remove columns that have half or less of 1s exprs(filterBinMSnSet(x, MARGIN = 2, q = 0.5)) #> Removing 3 column(s) #>   b d #> a 0 0 #> b 0 1 #> c 0 1 #> d 1 1 #> e 1 0"},{"path":"https://lgatto.github.io/pRoloc/reference/filterMaxMarkers.html","id":null,"dir":"Reference","previous_headings":"","what":"Removes class/annotation information from a matrix of candidate markers that appear in the fData. — filterMaxMarkers","title":"Removes class/annotation information from a matrix of candidate markers that appear in the fData. — filterMaxMarkers","text":"Removes annotation information contain certain number/percentage proteins","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/filterMaxMarkers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Removes class/annotation information from a matrix of candidate markers that appear in the fData. — filterMaxMarkers","text":"","code":"filterMaxMarkers(object, n, p = 0.2, fcol = \"GOAnnotations\", verbose = TRUE)"},{"path":"https://lgatto.github.io/pRoloc/reference/filterMaxMarkers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Removes class/annotation information from a matrix of candidate markers that appear in the fData. — filterMaxMarkers","text":"object instance class MSnSet. n Maximum number proteins allowed per class/information term. p Maximum percentage proteins per column. Default 0.2 .e. remove columns information greater 20 total number proteins dataset (note: useful example, information GO terms, removing general uninformative terms). fcol name matrix marker information. Default GOAnnotations. verbose Number marker candidates retained filtering.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/filterMaxMarkers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Removes class/annotation information from a matrix of candidate markers that appear in the fData. — filterMaxMarkers","text":"updated MSnSet","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/reference/filterMinMarkers.html","id":null,"dir":"Reference","previous_headings":"","what":"Removes class/annotation information from a matrix of candidate markers that appear in the fData. — filterMinMarkers","title":"Removes class/annotation information from a matrix of candidate markers that appear in the fData. — filterMinMarkers","text":"Removes annotation information contain less certain number/percentage proteins","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/filterMinMarkers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Removes class/annotation information from a matrix of candidate markers that appear in the fData. — filterMinMarkers","text":"","code":"filterMinMarkers(object, n = 10, p, fcol = \"GOAnnotations\", verbose = TRUE)"},{"path":"https://lgatto.github.io/pRoloc/reference/filterMinMarkers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Removes class/annotation information from a matrix of candidate markers that appear in the fData. — filterMinMarkers","text":"object instance class MSnSet. n Minimum number proteins allowed per column. Default 10. p Minimum percentage proteins per column. fcol name matrix marker information. Default GOAnnotations. verbose Number marker candidates retained filtering.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/filterMinMarkers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Removes class/annotation information from a matrix of candidate markers that appear in the fData. — filterMinMarkers","text":"updated MSnSet.","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/reference/filterMinMarkers.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Removes class/annotation information from a matrix of candidate markers that appear in the fData. — filterMinMarkers","text":"Lisa M Breckels","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/filterZeroCols.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove 0 columns/rows — filterZeroCols","title":"Remove 0 columns/rows — filterZeroCols","text":"Removes assay data columns/rows composed 0, .e. colSum/rowSum 0.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/filterZeroCols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove 0 columns/rows — filterZeroCols","text":"","code":"filterZeroCols(object, verbose = TRUE)  filterZeroRows(object, verbose = TRUE)"},{"path":"https://lgatto.github.io/pRoloc/reference/filterZeroCols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove 0 columns/rows — filterZeroCols","text":"object MSnSet object. verbose Print message number filtered columns/row ().","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/filterZeroCols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove 0 columns/rows — filterZeroCols","text":"MSnSet.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/filterZeroCols.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Remove 0 columns/rows — filterZeroCols","text":"Laurent Gatto","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/filterZeroCols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove 0 columns/rows — filterZeroCols","text":"","code":"library(\"pRolocdata\") data(andy2011goCC) any(colSums(exprs(andy2011goCC)) == 0) #> [1] FALSE exprs(andy2011goCC)[, 1:5] <- 0 ncol(andy2011goCC) #> [1] 569 ncol(filterZeroCols(andy2011goCC)) #> Removing 5 columns with only 0s. #> [1] 564"},{"path":"https://lgatto.github.io/pRoloc/reference/getGOFromFeatures.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve GO terms for feature names — getGOFromFeatures","title":"Retrieve GO terms for feature names — getGOFromFeatures","text":"function pulls gene ontology (GO) terms set feature names.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/getGOFromFeatures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve GO terms for feature names — getGOFromFeatures","text":"","code":"getGOFromFeatures(   id,   namespace = \"cellular_component\",   evidence = NULL,   params = NULL,   verbose = FALSE,   nmax = 500 )"},{"path":"https://lgatto.github.io/pRoloc/reference/getGOFromFeatures.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve GO terms for feature names — getGOFromFeatures","text":"id character feature names pulled biomart. MSnSet provided, featureNames(id) used. namespace GO namespace. One biological_process, cellular_component (default) molecular_function. evidence GO evidence code. See showGOEvidenceCodes details. NULL (default), filtering based evidence code performed. params instance class \"AnnotationParams\". verbose logical defining verbosity function. Default FALSE. nmax described https://support.bioconductor.org/p/86358/, Biomart result can unreliable large queries. argument splits input chunks length nmax (default 500). set NULL, query performed full.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/getGOFromFeatures.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve GO terms for feature names — getGOFromFeatures","text":"data.frame relevant GO terms.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/getGOFromFeatures.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieve GO terms for feature names — getGOFromFeatures","text":"Laurent Gatto","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/getGOFromFeatures.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve GO terms for feature names — getGOFromFeatures","text":"","code":"library(pRolocdata) data(dunkley2006) data(dunkley2006params) dunkley2006params #> Object of class \"AnnotationParams\" #>  Using the 'plants_mart' BioMart database #>  Using the 'athaliana_eg_gene' dataset #>  Using 'tair_locus' as filter #>  Created on Tue Mar 12 07:25:12 2024 fn <- featureNames(dunkley2006)[1:5] getGOFromFeatures(fn, params = dunkley2006params) #>    tair_locus      go_id     namespace_1003                   name_1006 #> 3   AT1G21750 GO:0005783 cellular_component       endoplasmic reticulum #> 5   AT1G21750 GO:0005788 cellular_component endoplasmic reticulum lumen #> 10  AT1G56340 GO:0005783 cellular_component       endoplasmic reticulum #> 13  AT1G56340 GO:0005788 cellular_component endoplasmic reticulum lumen #>    go_linkage_type #> 3              IEA #> 5              IEA #> 10             IEA #> 13             IEA"},{"path":"https://lgatto.github.io/pRoloc/reference/getMarkerClasses.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns the organelle classes in an 'MSnSet' — getMarkerClasses","title":"Returns the organelle classes in an 'MSnSet' — getMarkerClasses","text":"Convenience accessor organelle classes 'MSnSet'. function returns organelle classes MSnSet instance. side effect, prints classes.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/getMarkerClasses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns the organelle classes in an 'MSnSet' — getMarkerClasses","text":"","code":"getMarkerClasses(object, fcol = \"markers\", ...)"},{"path":"https://lgatto.github.io/pRoloc/reference/getMarkerClasses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns the organelle classes in an 'MSnSet' — getMarkerClasses","text":"object instance class \"MSnSet\". fcol name markers column featureData slot. Default markers. ... Additional parameters passed sort base package.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/getMarkerClasses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns the organelle classes in an 'MSnSet' — getMarkerClasses","text":"character vector organelle classes data.","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/reference/getMarkerClasses.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Returns the organelle classes in an 'MSnSet' — getMarkerClasses","text":"Lisa Breckels Laurent Gatto","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/getMarkerClasses.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns the organelle classes in an 'MSnSet' — getMarkerClasses","text":"","code":"library(\"pRolocdata\") data(dunkley2006) organelles <- getMarkerClasses(dunkley2006) ## same if markers encoded as a matrix dunkley2006 <- mrkVecToMat(dunkley2006, mfcol = \"Markers\") organelles2 <- getMarkerClasses(dunkley2006, fcol = \"Markers\") stopifnot(all.equal(organelles, organelles2))"},{"path":"https://lgatto.github.io/pRoloc/reference/getMarkers.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the organelle markers in an MSnSet — getMarkers","title":"Get the organelle markers in an MSnSet — getMarkers","text":"Convenience accessor organelle markers MSnSet. function returns organelle markers MSnSet instance. side effect, print marker table.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/getMarkers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the organelle markers in an MSnSet — getMarkers","text":"","code":"getMarkers(object, fcol = \"markers\", names = TRUE, verbose = TRUE)"},{"path":"https://lgatto.github.io/pRoloc/reference/getMarkers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the organelle markers in an MSnSet — getMarkers","text":"object instance class \"MSnSet\". fcol name markers column featureData slot. Default \"markers\". names logical indicating markers vector named. Ignored markers encoded matrix. verbose TRUE, marker table printed markers returned invisibly. FALSE, markers returned.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/getMarkers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the organelle markers in an MSnSet — getMarkers","text":"character (matrix) length (ncol) ncol(object), depending vector matrix encoding markers.","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/reference/getMarkers.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the organelle markers in an MSnSet — getMarkers","text":"Laurent Gatto","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/getMarkers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the organelle markers in an MSnSet — getMarkers","text":"","code":"library(\"pRolocdata\") data(dunkley2006) ## marker vectors myVmarkers <- getMarkers(dunkley2006) #> organelleMarkers #>      ER lumen   ER membrane         Golgi Mitochondrion            PM  #>            14            45            28            55            46  #>       Plastid      Ribosome           TGN       unknown       vacuole  #>            20            19            13           428            21  head(myVmarkers) #>  AT1G09210  AT1G21750  AT1G51760  AT1G56340  AT2G32920  AT2G47470  #> \"ER lumen\" \"ER lumen\" \"ER lumen\" \"ER lumen\" \"ER lumen\" \"ER lumen\"  ## marker matrix dunkley2006 <- mrkVecToMat(dunkley2006, mfcol = \"Markers\") myMmarkers <- getMarkers(dunkley2006, fcol = \"Markers\") #> Localisation count: #>   0   1  #> 428 261  #> Single localisations: #>      ER lumen   ER membrane         Golgi Mitochondrion            PM  #>            14            45            28            55            46  #>       Plastid      Ribosome           TGN       vacuole  #>            20            19            13            21  #> Multiple localisations: #>   none head(myMmarkers) #>           ER lumen ER membrane Golgi Mitochondrion PM Plastid Ribosome TGN #> AT1G09210        1           0     0             0  0       0        0   0 #> AT1G21750        1           0     0             0  0       0        0   0 #> AT1G51760        1           0     0             0  0       0        0   0 #> AT1G56340        1           0     0             0  0       0        0   0 #> AT2G32920        1           0     0             0  0       0        0   0 #> AT2G47470        1           0     0             0  0       0        0   0 #>           vacuole #> AT1G09210       0 #> AT1G21750       0 #> AT1G51760       0 #> AT1G56340       0 #> AT2G32920       0 #> AT2G47470       0"},{"path":"https://lgatto.github.io/pRoloc/reference/getNormDist.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Distances from a ","title":"Extract Distances from a ","text":"function computes outputs normalised distances \"ClustDistList\" object.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/getNormDist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Distances from a ","text":"","code":"getNormDist(object, p = 1/3)"},{"path":"https://lgatto.github.io/pRoloc/reference/getNormDist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Distances from a ","text":"object instance class \"ClustDistList\". p normalisation factor. Default 1/3.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/getNormDist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Distances from a ","text":"numeric normalised distances, one per protein set ClustDistList.","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/reference/getNormDist.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract Distances from a ","text":"Lisa Breckels","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/getPredictions.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns the predictions in an 'MSnSet' — getPredictions","title":"Returns the predictions in an 'MSnSet' — getPredictions","text":"Convenience accessor predicted feature localisation 'MSnSet'. function returns predictions MSnSet instance. side effect, prints prediction table.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/getPredictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns the predictions in an 'MSnSet' — getPredictions","text":"","code":"getPredictions(object, fcol, scol, mcol = \"markers\", t = 0, verbose = TRUE)"},{"path":"https://lgatto.github.io/pRoloc/reference/getPredictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns the predictions in an 'MSnSet' — getPredictions","text":"object instance class \"MSnSet\". fcol name prediction column featureData slot. scol name prediction score column featureData slot. missing, created pasting '.scores' fcol. mcol feature meta data column containing labelled training data. t score threshold. Predictions score < t set 'unknown'. Default 0. also possible define thresholds prediction class, case, t named numeric names exactly matching unique prediction class names. verbose TRUE, prediction table printed predictions returned invisibly. FALSE, predictions returned.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/getPredictions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns the predictions in an 'MSnSet' — getPredictions","text":"instance class \"MSnSet\" fcol.pred feature variable storing prediction results according chosen threshold.","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/reference/getPredictions.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Returns the predictions in an 'MSnSet' — getPredictions","text":"Laurent Gatto Lisa Breckels","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/getPredictions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns the predictions in an 'MSnSet' — getPredictions","text":"","code":"library(\"pRolocdata\") data(dunkley2006) res <- svmClassification(dunkley2006, fcol = \"pd.markers\",                          sigma = 0.1, cost = 0.5) #> [1] \"pd.markers\" fData(res)$svm[500:510] #>  [1] Plastid     Plastid     ER membrane Ribosome    Ribosome    Ribosome    #>  [7] Ribosome    Ribosome    Ribosome    Ribosome    Ribosome    #> 9 Levels: ER lumen ER membrane Golgi Mitochondrion PM Plastid Ribosome ... vacuole fData(res)$svm.scores[500:510] #>  [1] 0.6593303 0.7701427 0.6752305 0.4882591 0.5751725 0.5766412 0.6376513 #>  [8] 0.6215169 0.5313678 0.6123313 0.6602089 getPredictions(res, fcol = \"svm\", t = 0) ## all predictions #> ans #>      ER lumen   ER membrane         Golgi Mitochondrion            PM  #>            16           188           101           101           125  #>       Plastid      Ribosome           TGN       vacuole  #>            52            59            17            30  #> MSnSet (storageMode: lockedEnvironment) #> assayData: 689 features, 16 samples  #>   element names: exprs  #> protocolData: none #> phenoData #>   sampleNames: M1F1A M1F4A ... M2F11B (16 total) #>   varLabels: membrane.prep fraction replicate #>   varMetadata: labelDescription #> featureData #>   featureNames: AT1G09210 AT1G21750 ... AT4G39080 (689 total) #>   fvarLabels: assigned evidence ... svm.pred (11 total) #>   fvarMetadata: labelDescription #> experimentData: use 'experimentData(object)' #>   pubMedIds: 16618929  #> Annotation:   #> - - - Processing information - - - #> Loaded on Thu Jul 16 22:53:08 2015.  #> Normalised to sum of intensities.  #> Added markers from  'mrk' marker vector. Thu Jul 16 22:53:08 2015  #> Performed svm prediction (cost=0.5 sigma=0.1) Sat Nov 23 16:03:53 2024  #> Added svm predictions according to global threshold = 0 Sat Nov 23 16:03:53 2024  #>  MSnbase version: 1.17.12  getPredictions(res, fcol = \"svm\", t = .9) ## single threshold  #> ans #>      ER lumen   ER membrane         Golgi Mitochondrion            PM  #>            14            56            28            55            46  #>       Plastid      Ribosome           TGN       unknown       vacuole  #>            20            19            13           417            21  #> MSnSet (storageMode: lockedEnvironment) #> assayData: 689 features, 16 samples  #>   element names: exprs  #> protocolData: none #> phenoData #>   sampleNames: M1F1A M1F4A ... M2F11B (16 total) #>   varLabels: membrane.prep fraction replicate #>   varMetadata: labelDescription #> featureData #>   featureNames: AT1G09210 AT1G21750 ... AT4G39080 (689 total) #>   fvarLabels: assigned evidence ... svm.pred (11 total) #>   fvarMetadata: labelDescription #> experimentData: use 'experimentData(object)' #>   pubMedIds: 16618929  #> Annotation:   #> - - - Processing information - - - #> Loaded on Thu Jul 16 22:53:08 2015.  #> Normalised to sum of intensities.  #> Added markers from  'mrk' marker vector. Thu Jul 16 22:53:08 2015  #> Performed svm prediction (cost=0.5 sigma=0.1) Sat Nov 23 16:03:53 2024  #> Added svm predictions according to global threshold = 0.9 Sat Nov 23 16:03:53 2024  #>  MSnbase version: 1.17.12  ## 50% top predictions per class ts <- orgQuants(res, fcol = \"svm\", t = .5) #>      ER lumen   ER membrane         Golgi Mitochondrion            PM  #>     0.2995766     0.8368847     0.7805362     0.7484314     0.7302249  #>       Plastid      Ribosome           TGN       vacuole  #>     0.7746137     0.5428105     0.5276547     0.5704931  getPredictions(res, fcol = \"svm\", t = ts) #> ans #>      ER lumen   ER membrane         Golgi Mitochondrion            PM  #>            15           117            65            78            86  #>       Plastid      Ribosome           TGN       unknown       vacuole  #>            36            39            15           212            26  #> MSnSet (storageMode: lockedEnvironment) #> assayData: 689 features, 16 samples  #>   element names: exprs  #> protocolData: none #> phenoData #>   sampleNames: M1F1A M1F4A ... M2F11B (16 total) #>   varLabels: membrane.prep fraction replicate #>   varMetadata: labelDescription #> featureData #>   featureNames: AT1G09210 AT1G21750 ... AT4G39080 (689 total) #>   fvarLabels: assigned evidence ... svm.pred (11 total) #>   fvarMetadata: labelDescription #> experimentData: use 'experimentData(object)' #>   pubMedIds: 16618929  #> Annotation:   #> - - - Processing information - - - #> Loaded on Thu Jul 16 22:53:08 2015.  #> Normalised to sum of intensities.  #> Added markers from  'mrk' marker vector. Thu Jul 16 22:53:08 2015  #> Performed svm prediction (cost=0.5 sigma=0.1) Sat Nov 23 16:03:53 2024  #> Added svm predictions according to thresholds: ER lumen = 0.30, ER membrane = 0.84, Golgi = 0.78, Mitochondrion = 0.75, PM = 0.73, Plastid = 0.77, Ribosome = 0.54, TGN = 0.53, vacuole = 0.57 Sat Nov 23 16:03:53 2024  #>  MSnbase version: 1.17.12"},{"path":"https://lgatto.github.io/pRoloc/reference/getStockcol.html","id":null,"dir":"Reference","previous_headings":"","what":"Manage default colours and point characters — setLisacol","title":"Manage default colours and point characters — setLisacol","text":"functions allow get/set colours point character used plotting organelle clusters unknown features. values parametrised session level. Two palettes available: default palette (previously Lisa's colours) containing 30 colours old (original) palette, containing 13 colours.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/getStockcol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manage default colours and point characters — setLisacol","text":"","code":"setLisacol()  getLisacol()  getOldcol()  setOldcol()  getStockcol()  setStockcol(cols)  getStockpch()  setStockpch(pchs)  getUnknowncol()  setUnknowncol(col)  getUnknownpch()  setUnknownpch(pch)"},{"path":"https://lgatto.github.io/pRoloc/reference/getStockcol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manage default colours and point characters — setLisacol","text":"cols vector colour characters NULL, sets colours default values. pchs vector numeric NULL, sets point characters default values. col colour character NULL, sets colour #E7E7E7 (grey91), default colour unknown features. pch numeric vector length 1 NULL, sets point character 21, default.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/getStockcol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manage default colours and point characters — setLisacol","text":"set functions set (invisibly returns) colours. get functions returns character vector colours. pch functions, numerics rather characters.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/getStockcol.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Manage default colours and point characters — setLisacol","text":"Laurent Gatto","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/getStockcol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manage default colours and point characters — setLisacol","text":"","code":"## defaults for clusters getStockcol() #>  [1] \"#E41A1C\" \"#377EB8\" \"#309C17\" \"#FF7F00\" \"#FFD700\" \"#00CED1\" \"#A65628\" #>  [8] \"#F781BF\" \"#984EA3\" \"#9ACD32\" \"#B0C4DE\" \"#00008A\" \"#FDAE6B\" \"#EBB7BE\" #> [15] \"#3F8F8F\" \"#CF9802\" \"#6A51A3\" \"#21E8AC\" \"#0000FF\" \"#1D7A3E\" \"#BF2A6B\" #> [22] \"#CD5B45\" \"#808000\" \"#F21D56\" \"#67000D\" \"#7A0C79\" \"#93EDF5\" \"#A66A6A\" #> [29] \"#0E438A\" \"#DBBCF7\" getStockpch() #>  [1] 19  1 15  0 17  2 18  5  7  9 13  3  4  8 ## unknown features getUnknownpch() #> [1] 21 getUnknowncol() #> [1] \"#E0E0E0\" ## an example library(pRolocdata) data(dunkley2006) par(mfrow = c(2, 1)) plot2D(dunkley2006, fcol = \"markers\", main = 'Default colours') setUnknowncol(\"black\") plot2D(dunkley2006, fcol = \"markers\", main = 'setUnknowncol(\"black\")')  getUnknowncol() #> [1] \"black\" setUnknowncol(NULL) getUnknowncol() #> [1] \"#E0E0E0\" getStockcol() #>  [1] \"#E41A1C\" \"#377EB8\" \"#309C17\" \"#FF7F00\" \"#FFD700\" \"#00CED1\" \"#A65628\" #>  [8] \"#F781BF\" \"#984EA3\" \"#9ACD32\" \"#B0C4DE\" \"#00008A\" \"#FDAE6B\" \"#EBB7BE\" #> [15] \"#3F8F8F\" \"#CF9802\" \"#6A51A3\" \"#21E8AC\" \"#0000FF\" \"#1D7A3E\" \"#BF2A6B\" #> [22] \"#CD5B45\" \"#808000\" \"#F21D56\" \"#67000D\" \"#7A0C79\" \"#93EDF5\" \"#A66A6A\" #> [29] \"#0E438A\" \"#DBBCF7\" getOldcol() #>  [1] \"#E41A1C\" \"#377EB8\" \"#4DAF4A\" \"#984EA3\" \"#FF7F00\" \"#FFFF33\" \"#A65628\" #>  [8] \"#F781BF\" \"#999999\" \"#333333\" \"#A021EF\" \"#008A45\" \"#00008A\""},{"path":"https://lgatto.github.io/pRoloc/reference/goIdToTerm.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert GO ids to/from terms — goIdToTerm","title":"Convert GO ids to/from terms — goIdToTerm","text":"Converts GO identifiers /GO terms, either explicitly checking (items ) input contains \"GO:\".","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/goIdToTerm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert GO ids to/from terms — goIdToTerm","text":"","code":"goIdToTerm(x, names = TRUE, keepNA = TRUE)  goTermToId(x, names = TRUE, keepNA = TRUE)  flipGoTermId(x, names = TRUE, keepNA = TRUE)  prettyGoTermId(x)"},{"path":"https://lgatto.github.io/pRoloc/reference/goIdToTerm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert GO ids to/from terms — goIdToTerm","text":"x character GO ids terms. names named character returned? Default TRUE. keepNA GO term/id names missing obsolete replaced NA? Default TRUE. FALSE GO term/id names kept.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/goIdToTerm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert GO ids to/from terms — goIdToTerm","text":"character GO terms (ids) x ids (terms).","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/goIdToTerm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert GO ids to/from terms — goIdToTerm","text":"Laurent Gatto","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/goIdToTerm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert GO ids to/from terms — goIdToTerm","text":"","code":"goIdToTerm(\"GO:0000001\") #>                  GO:0000001  #> \"mitochondrion inheritance\"  goIdToTerm(\"GO:0000001\", names = FALSE) #> [1] \"mitochondrion inheritance\" goIdToTerm(c(\"GO:0000001\", \"novalid\")) #>                  GO:0000001                     novalid  #> \"mitochondrion inheritance\"                          NA  goIdToTerm(c(\"GO:0000001\", \"GO:0000002\", \"notvalid\")) #>                         GO:0000001                         GO:0000002  #>        \"mitochondrion inheritance\" \"mitochondrial genome maintenance\"  #>                           notvalid  #>                                 NA  goTermToId(\"mitochondrion inheritance\") #> mitochondrion inheritance  #>              \"GO:0000001\"  goTermToId(\"mitochondrion inheritance\", name = FALSE) #> [1] \"GO:0000001\" goTermToId(c(\"mitochondrion inheritance\", \"notvalid\")) #> mitochondrion inheritance                  notvalid  #>              \"GO:0000001\"                        NA  prettyGoTermId(\"mitochondrion inheritance\") #> [1] \"mitochondrion inheritance (GO:0000001)\" prettyGoTermId(\"GO:0000001\") #> [1] \"mitochondrion inheritance (GO:0000001)\" flipGoTermId(\"mitochondrion inheritance\") #> mitochondrion inheritance  #>              \"GO:0000001\"  flipGoTermId(\"GO:0000001\") #>                  GO:0000001  #> \"mitochondrion inheritance\"  flipGoTermId(\"GO:0000001\", names = FALSE) #> [1] \"mitochondrion inheritance\""},{"path":"https://lgatto.github.io/pRoloc/reference/highlightOnPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Highlight features of interest on a spatial proteomics plot — highlightOnPlot","title":"Highlight features of interest on a spatial proteomics plot — highlightOnPlot","text":"Highlights set features interest given FeaturesOfInterest instance PCA plot produced plot2D plot3D. none features interest found MSnset's featureNames, warning thrown.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/highlightOnPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Highlight features of interest on a spatial proteomics plot — highlightOnPlot","text":"","code":"highlightOnPlot(object, foi, labels, args = list(), ...)  highlightOnPlot3D(object, foi, labels, args = list(), radius = 0.1 * 3, ...)"},{"path":"https://lgatto.github.io/pRoloc/reference/highlightOnPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Highlight features of interest on a spatial proteomics plot — highlightOnPlot","text":"object main dataset described MSnSet matrix coordinates features PCA plot produced (invisibly returned) plot2D. foi instance FeaturesOfInterest, , alternatively, character feautre names. labels character length 1 feature variable name used label features interest. valid object MSnSet. Alternatively, TRUE, featureNames(object) (rownames(object), object matrix) used. Default missing, add label.s args named list arguments passed plot2D PCA coordinates calculated. Ignored PCA coordinates passed directly, .e. object matrix. ... Additional parameters passed points text (labels TRUE) adding plot2D, spheres3d text3d adding plot3D radius Radius spheres added visualisation produced plot3D. Default 0.3 (.e plot3D's radius1 * 3), emphasise features regard uknown (radius1 = 0.1) marker (radius1 * 2) features.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/highlightOnPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Highlight features of interest on a spatial proteomics plot — highlightOnPlot","text":"NULL; used side effects.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/highlightOnPlot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Highlight features of interest on a spatial proteomics plot — highlightOnPlot","text":"Laurent Gatto","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/highlightOnPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Highlight features of interest on a spatial proteomics plot — highlightOnPlot","text":"","code":"library(\"pRolocdata\") data(\"tan2009r1\") x <- FeaturesOfInterest(description = \"A test set of features of interest\",                         fnames = featureNames(tan2009r1)[1:10],                         object = tan2009r1)  ## using FeaturesOfInterest or feature names par(mfrow = c(2, 1)) plot2D(tan2009r1) highlightOnPlot(tan2009r1, x) plot2D(tan2009r1) highlightOnPlot(tan2009r1, featureNames(tan2009r1)[1:10])   .pca <- plot2D(tan2009r1) head(.pca) #>        PC1 (58.53%) PC2 (29.96%) #> P20353    0.2103374    1.6959266 #> P53501   -0.4940607    1.6207386 #> Q7KU78   -1.1794311   -0.7242185 #> P04412    0.6128549    0.3944441 #> Q7KJ73    0.1866756   -0.3007028 #> Q7JZN0    2.0228016   -1.3087061 highlightOnPlot(.pca, x, col = \"red\") highlightOnPlot(tan2009r1, x, col = \"red\", cex = 1.5) highlightOnPlot(tan2009r1, x, labels = TRUE)  .pca <- plot2D(tan2009r1, dims = c(1, 3)) highlightOnPlot(.pca, x, pch = \"+\", dims = c(1, 3)) #> Warning: \"dims\" is not a graphical parameter highlightOnPlot(tan2009r1, x, args = list(dims = c(1, 3)))   .pca2 <- plot2D(tan2009r1, mirrorX = TRUE, dims = c(1, 3)) ## previous pca matrix, need to mirror X axis highlightOnPlot(.pca, x, pch = \"+\", args = list(mirrorX = TRUE)) ## new pca matrix, with X mirrors (and 1st and 3rd PCs) highlightOnPlot(.pca2, x, col = \"red\")  plot2D(tan2009r1) highlightOnPlot(tan2009r1, x) highlightOnPlot(tan2009r1, x, labels = TRUE, pos = 3) highlightOnPlot(tan2009r1, x, labels = \"Flybase.Symbol\", pos = 1)   ## in 3 dimensions if (interactive()) {   plot3D(tan2009r1, radius1 = 0.05)   highlightOnPlot3D(tan2009r1, x, labels = TRUE)   highlightOnPlot3D(tan2009r1, x) }"},{"path":"https://lgatto.github.io/pRoloc/reference/knnClassification.html","id":null,"dir":"Reference","previous_headings":"","what":"knn classification — knnClassification","title":"knn classification — knnClassification","text":"Classification using k-nearest neighbours algorithm.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/knnClassification.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"knn classification — knnClassification","text":"","code":"knnClassification(   object,   assessRes,   scores = c(\"prediction\", \"all\", \"none\"),   k,   fcol = \"markers\",   ... )"},{"path":"https://lgatto.github.io/pRoloc/reference/knnClassification.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"knn classification — knnClassification","text":"object instance class \"MSnSet\". assessRes instance class \"GenRegRes\", generated knnOptimisation. scores One \"prediction\", \"\" \"none\" report score predicted class , classes none. k assessRes missing, k must provided. fcol feature meta-data containing marker definitions. Default markers. ... Additional parameters passed knn package class.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/knnClassification.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"knn classification — knnClassification","text":"instance class \"MSnSet\"     knn knn.scores feature variables storing     classification results scores respectively.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/knnClassification.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"knn classification — knnClassification","text":"Laurent Gatto","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/knnClassification.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"knn classification — knnClassification","text":"","code":"library(pRolocdata) data(dunkley2006) ## reducing parameter search space and iterations  params <- knnOptimisation(dunkley2006, k = c(3, 10), times = 3) #>    |                                                                               |                                                                      |   0%   |                                                                               |=====                                                                 |   7%   |                                                                               |=========                                                             |  13%   |                                                                               |==============                                                        |  20%   |                                                                               |===================                                                   |  27%   |                                                                               |=======================                                               |  33%   |                                                                               |============================                                          |  40%   |                                                                               |=================================                                     |  47%   |                                                                               |=====================================                                 |  53%   |                                                                               |==========================================                            |  60%   |                                                                               |===============================================                       |  67%   |                                                                               |===================================================                   |  73%   |                                                                               |========================================================              |  80%   |                                                                               |=============================================================         |  87%   |                                                                               |=================================================================     |  93%   |                                                                               |======================================================================| 100% params #> Object of class \"GenRegRes\" #> Algorithm: knn  #> Hyper-parameters: #>  k: 3 10 #> Design: #>  Replication: 3 x 5-fold X-validation #>  Partitioning: 0.2/0.8 (test/train) #> Results #>  macro F1: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>  0.9603  0.9690  0.9776  0.9747  0.9819  0.9862  #>  best k: 3    plot(params)  f1Count(params) #>  #> 3  #> 1  levelPlot(params)  getParams(params) #> k  #> 3  res <- knnClassification(dunkley2006, params) #> [1] \"markers\" getPredictions(res, fcol = \"knn\") #> ans #>      ER lumen   ER membrane         Golgi Mitochondrion            PM  #>            21           180            94           106           138  #>       Plastid      Ribosome           TGN       vacuole  #>            49            50            21            30  #> MSnSet (storageMode: lockedEnvironment) #> assayData: 689 features, 16 samples  #>   element names: exprs  #> protocolData: none #> phenoData #>   sampleNames: M1F1A M1F4A ... M2F11B (16 total) #>   varLabels: membrane.prep fraction replicate #>   varMetadata: labelDescription #> featureData #>   featureNames: AT1G09210 AT1G21750 ... AT4G39080 (689 total) #>   fvarLabels: assigned evidence ... knn.pred (11 total) #>   fvarMetadata: labelDescription #> experimentData: use 'experimentData(object)' #>   pubMedIds: 16618929  #> Annotation:   #> - - - Processing information - - - #> Loaded on Thu Jul 16 22:53:08 2015.  #> Normalised to sum of intensities.  #> Added markers from  'mrk' marker vector. Thu Jul 16 22:53:08 2015  #> Performed knn prediction (k=3) Sat Nov 23 16:03:56 2024  #> Added knn predictions according to global threshold = 0 Sat Nov 23 16:03:56 2024  #>  MSnbase version: 1.17.12  getPredictions(res, fcol = \"knn\", t = 0.75) #> ans #>      ER lumen   ER membrane         Golgi Mitochondrion            PM  #>            15           173            83           103           120  #>       Plastid      Ribosome           TGN       unknown       vacuole  #>            49            44            16            56            30  #> MSnSet (storageMode: lockedEnvironment) #> assayData: 689 features, 16 samples  #>   element names: exprs  #> protocolData: none #> phenoData #>   sampleNames: M1F1A M1F4A ... M2F11B (16 total) #>   varLabels: membrane.prep fraction replicate #>   varMetadata: labelDescription #> featureData #>   featureNames: AT1G09210 AT1G21750 ... AT4G39080 (689 total) #>   fvarLabels: assigned evidence ... knn.pred (11 total) #>   fvarMetadata: labelDescription #> experimentData: use 'experimentData(object)' #>   pubMedIds: 16618929  #> Annotation:   #> - - - Processing information - - - #> Loaded on Thu Jul 16 22:53:08 2015.  #> Normalised to sum of intensities.  #> Added markers from  'mrk' marker vector. Thu Jul 16 22:53:08 2015  #> Performed knn prediction (k=3) Sat Nov 23 16:03:56 2024  #> Added knn predictions according to global threshold = 0.75 Sat Nov 23 16:03:56 2024  #>  MSnbase version: 1.17.12  plot2D(res, fcol = \"knn\")"},{"path":"https://lgatto.github.io/pRoloc/reference/knnOptimisation.html","id":null,"dir":"Reference","previous_headings":"","what":"knn parameter optimisation — knnOptimisation","title":"knn parameter optimisation — knnOptimisation","text":"Classification parameter optimisation k-nearest neighbours algorithm.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/knnOptimisation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"knn parameter optimisation — knnOptimisation","text":"","code":"knnOptimisation(   object,   fcol = \"markers\",   k = seq(3, 15, 2),   times = 100,   test.size = 0.2,   xval = 5,   fun = mean,   seed,   verbose = TRUE,   ... )"},{"path":"https://lgatto.github.io/pRoloc/reference/knnOptimisation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"knn parameter optimisation — knnOptimisation","text":"object instance class \"MSnSet\". fcol feature meta-data containing marker definitions. Default markers. k hyper-parameter. Default values seq(3, 15, 2). times number times internal cross-validation performed. Default 100. test.size size test data. Default 0.2 (20 percent). xval n-cross validation. Default 5. fun function used summarise xval macro F1 matrices. seed optional random number generator seed. verbose logical defining whether progress bar displayed. ... Additional parameters passed knn package class.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/knnOptimisation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"knn parameter optimisation — knnOptimisation","text":"instance class \"GenRegRes\".","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/knnOptimisation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"knn parameter optimisation — knnOptimisation","text":"Note performance scores precision, recall (macro) F1 calculated, NA values replaced 0. decision motivated fact class either NA precision recall result NA F1 score , eventually, NA macro F1 (.e. mean(F1)). Replacing NAs 0s leads F1 values 0 reduced yet defined final macro F1 score.","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/reference/knnOptimisation.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"knn parameter optimisation — knnOptimisation","text":"Laurent Gatto","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/knntlClassification.html","id":null,"dir":"Reference","previous_headings":"","what":"knn transfer learning classification — knntlClassification","title":"knn transfer learning classification — knntlClassification","text":"Classification using variation KNN implementation Wu Dietterich's transfer learning schema","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/knntlClassification.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"knn transfer learning classification — knntlClassification","text":"","code":"knntlClassification(   primary,   auxiliary,   fcol = \"markers\",   bestTheta,   k,   scores = c(\"prediction\", \"all\", \"none\"),   seed )"},{"path":"https://lgatto.github.io/pRoloc/reference/knntlClassification.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"knn transfer learning classification — knntlClassification","text":"primary instance class \"MSnSet\". auxiliary instance class \"MSnSet\". fcol feature meta-data containing marker definitions. Default markers. bestTheta Best theta vector output knntlOptimisation, see knntlOptimisation details k Numeric vector length 2, containing best k parameters use primary auxiliary datasets. k k specified calculated internally. scores One \"prediction\", \"\" \"none\" report score predicted class , classes none. seed optional random number generator seed.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/knntlClassification.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"knn transfer learning classification — knntlClassification","text":"character vector classifications unknowns","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/reference/knntlClassification.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"knn transfer learning classification — knntlClassification","text":"Lisa Breckels","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/knntlClassification.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"knn transfer learning classification — knntlClassification","text":"","code":"# \\donttest{ library(pRolocdata) data(andy2011) data(andy2011goCC) ## reducing calculation time of k by pre-running knnOptimisation x <- c(andy2011, andy2011goCC) k <- lapply(x, function(z)             knnOptimisation(z, times=5,                             fcol = \"markers.orig\",                             verbose = FALSE)) k <- sapply(k, function(z) getParams(z)) k #> k k  #> 7 3  ## reducing parameter search with theta = 1, ## weights of only 1 or 0 will be considered opt <- knntlOptimisation(andy2011, andy2011goCC,                          fcol = \"markers.orig\",                          times = 2,                          by = 1, k = k) #> Removing 389 columns with only 0s. #> Weigths: #>   (0, 1) opt #> Object of class \"ThetaRegRes\" #> Algorithm: theta  #> Theta hyper-parameters: #>  weights: 0 1  #>  k: 7 3  #>  nrow: 16  #> Design: #>  Replication: 2 x 5-fold X-validation #>  Partitioning: 0.2/0.8 (test/train) #> Results #>  macro F1: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>  0.8327  0.8442  0.8558  0.8558  0.8673  0.8789  #>  best theta: #>          ER Golgi Mitochondrion PM #> weight:0  1     2             0  1 #> weight:1  1     0             2  1 th <- getParams(opt) plot(opt)  res <- knntlClassification(andy2011, andy2011goCC,                            fcol = \"markers.orig\", th, k) res #> MSnSet (storageMode: lockedEnvironment) #> assayData: 1371 features, 8 samples  #>   element names: exprs  #> protocolData: none #> phenoData #>   sampleNames: X113 X114 ... X121 (8 total) #>   varLabels: Fraction.information #>   varMetadata: labelDescription #> featureData #>   featureNames: O00767 P51648 ... O75312 (1371 total) #>   fvarLabels: Accession.No. Protein.Description ... knntl (12 total) #>   fvarMetadata: labelDescription #> experimentData: use 'experimentData(object)' #> Annotation:   #> - - - Processing information - - - #> Loaded on Fri Sep 23 15:43:47 2016.  #> Normalised to sum of intensities.  #> Added markers from  'mrk' marker vector. Fri Sep 23 15:43:47 2016  #>  MSnbase version: 1.99.2  # }"},{"path":"https://lgatto.github.io/pRoloc/reference/knntlOptimisation.html","id":null,"dir":"Reference","previous_headings":"","what":"theta parameter optimisation — knntlOptimisation","title":"theta parameter optimisation — knntlOptimisation","text":"Classification parameter optimisation KNN implementation Wu Dietterich's transfer learning schema","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/knntlOptimisation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"theta parameter optimisation — knntlOptimisation","text":"","code":"knntlOptimisation(   primary,   auxiliary,   fcol = \"markers\",   k,   times = 50,   test.size = 0.2,   xval = 5,   by = 0.5,   length.out,   th,   xfolds,   BPPARAM = BiocParallel::bpparam(),   method = \"Breckels\",   log = FALSE,   seed )"},{"path":"https://lgatto.github.io/pRoloc/reference/knntlOptimisation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"theta parameter optimisation — knntlOptimisation","text":"primary instance class \"MSnSet\". auxiliary instance class \"MSnSet\". fcol feature meta-data containing marker definitions. Default markers. k Numeric vector length 2, containing best k parameters use primary (k[1]) auxiliary (k[2]) datasets. See knnOptimisation generating best k. times number times cross-validation performed. Default 50. test.size size test (validation) data. Default 0.2 (20 percent). xval number rounds cross-validation perform. increment theta, must one c(1, 0.5, 0.25, 0.2, 0.15, 0.1, 0.05) length.Alternative using parameter. Specifies desired length sequence theta test. th matrix theta values test class generated function thetas, number columns equal number classes contained fcol. Note: columns ordered according getMarkerClasses(primary, fcol). argument valid default method 'Breckels' used. xfolds Option pass specific folds cross validation. BPPARAM Required parallelisation. specified selects default BiocParallelParam, global options , fails, recently registered() back-end. method k-NN transfer learning method use. default 'Breckels' described Breckels et al (2016). 'Wu' specificed original method implemented Wu Dietterich (2004) implemented. log logical defining whether logging enabled. Default FALSE. Note logging produes considerably bigger objects. seed optional random number generator seed.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/knntlOptimisation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"theta parameter optimisation — knntlOptimisation","text":"list containing theta combinations tested,     associated macro F1 score accuracy combination     round (specified times).","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/knntlOptimisation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"theta parameter optimisation — knntlOptimisation","text":"knntlOptimisation implements variation Wu Dietterich's transfer learning schema: P. Wu T. G. Dietterich. Improving SVM accuracy training auxiliary data sources. Proceedings Twenty-First International Conference Machine Learning, pages 871 - 878.  Morgan Kaufmann, 2004. grid search best theta performed.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/knntlOptimisation.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"theta parameter optimisation — knntlOptimisation","text":"Breckels LM, Holden S, Wonjar D, Mulvey CM,     Christoforou , Groen AJ, Kohlbacher O, Lilley KS, Gatto L.     Learning heterogeneous data sources: application     spatial proteomics. bioRxiv. doi:     http://dx.doi.org/10.1101/022152 Wu P, Dietterich TG. Improving SVM Accuracy Training Auxiliary Data Sources. Proceedings 21st International Conference Machine Learning (ICML); 2004.","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/reference/knntlOptimisation.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"theta parameter optimisation — knntlOptimisation","text":"Lisa Breckels","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/ksvmClassification.html","id":null,"dir":"Reference","previous_headings":"","what":"ksvm classification — ksvmClassification","title":"ksvm classification — ksvmClassification","text":"Classification using support vector machine algorithm.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/ksvmClassification.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ksvm classification — ksvmClassification","text":"","code":"ksvmClassification(   object,   assessRes,   scores = c(\"prediction\", \"all\", \"none\"),   cost,   fcol = \"markers\",   ... )"},{"path":"https://lgatto.github.io/pRoloc/reference/ksvmClassification.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ksvm classification — ksvmClassification","text":"object instance class \"MSnSet\". assessRes instance class \"GenRegRes\", generated ksvmOptimisation. scores One \"prediction\", \"\" \"none\" report score predicted class , classes none. cost assessRes missing, cost must provided. fcol feature meta-data containing marker definitions. Default markers. ... Additional parameters passed ksvm package kernlab.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/ksvmClassification.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ksvm classification — ksvmClassification","text":"instance class \"MSnSet\"     ksvm ksvm.scores feature variables storing     classification results scores respectively.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/ksvmClassification.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ksvm classification — ksvmClassification","text":"Laurent Gatto","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/ksvmClassification.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ksvm classification — ksvmClassification","text":"","code":"library(pRolocdata) data(dunkley2006) ## reducing parameter search space and iterations  params <- ksvmOptimisation(dunkley2006, cost = 2^seq(-1,4,5), times = 3) #>    |                                                                               |                                                                      |   0%   |                                                                               |=====                                                                 |   7%   |                                                                               |=========                                                             |  13%   |                                                                               |==============                                                        |  20%   |                                                                               |===================                                                   |  27%   |                                                                               |=======================                                               |  33%   |                                                                               |============================                                          |  40%   |                                                                               |=================================                                     |  47%   |                                                                               |=====================================                                 |  53%   |                                                                               |==========================================                            |  60%   |                                                                               |===============================================                       |  67%   |                                                                               |===================================================                   |  73%   |                                                                               |========================================================              |  80%   |                                                                               |=============================================================         |  87%   |                                                                               |=================================================================     |  93%   |                                                                               |======================================================================| 100% params #> Object of class \"GenRegRes\" #> Algorithm: ksvm  #> Hyper-parameters: #>  cost: 0.5 16 #> Design: #>  Replication: 3 x 5-fold X-validation #>  Partitioning: 0.2/0.8 (test/train) #> Results #>  macro F1: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>  0.9506  0.9515  0.9523  0.9676  0.9762  1.0000  #>  best cost: 0.5 16    plot(params)  f1Count(params) #>  #> 16  #>  1  levelPlot(params)  getParams(params) #> cost  #>   16  res <- ksvmClassification(dunkley2006, params) #> [1] \"markers\" getPredictions(res, fcol = \"ksvm\") #> ans #>      ER lumen   ER membrane         Golgi Mitochondrion            PM  #>            18           188           126           124            71  #>       Plastid      Ribosome           TGN       vacuole  #>            54            19            68            21  #> MSnSet (storageMode: lockedEnvironment) #> assayData: 689 features, 16 samples  #>   element names: exprs  #> protocolData: none #> phenoData #>   sampleNames: M1F1A M1F4A ... M2F11B (16 total) #>   varLabels: membrane.prep fraction replicate #>   varMetadata: labelDescription #> featureData #>   featureNames: AT1G09210 AT1G21750 ... AT4G39080 (689 total) #>   fvarLabels: assigned evidence ... ksvm.pred (11 total) #>   fvarMetadata: labelDescription #> experimentData: use 'experimentData(object)' #>   pubMedIds: 16618929  #> Annotation:   #> - - - Processing information - - - #> Loaded on Thu Jul 16 22:53:08 2015.  #> Normalised to sum of intensities.  #> Added markers from  'mrk' marker vector. Thu Jul 16 22:53:08 2015  #> Performed ksvm prediction (cost=16) Sat Nov 23 16:04:10 2024  #> Added ksvm predictions according to global threshold = 0 Sat Nov 23 16:04:10 2024  #>  MSnbase version: 1.17.12  getPredictions(res, fcol = \"ksvm\", t = 0.75) #> ans #>      ER lumen   ER membrane         Golgi Mitochondrion            PM  #>            14           158            66            55            46  #>       Plastid      Ribosome           TGN       unknown       vacuole  #>            20            19            13           277            21  #> MSnSet (storageMode: lockedEnvironment) #> assayData: 689 features, 16 samples  #>   element names: exprs  #> protocolData: none #> phenoData #>   sampleNames: M1F1A M1F4A ... M2F11B (16 total) #>   varLabels: membrane.prep fraction replicate #>   varMetadata: labelDescription #> featureData #>   featureNames: AT1G09210 AT1G21750 ... AT4G39080 (689 total) #>   fvarLabels: assigned evidence ... ksvm.pred (11 total) #>   fvarMetadata: labelDescription #> experimentData: use 'experimentData(object)' #>   pubMedIds: 16618929  #> Annotation:   #> - - - Processing information - - - #> Loaded on Thu Jul 16 22:53:08 2015.  #> Normalised to sum of intensities.  #> Added markers from  'mrk' marker vector. Thu Jul 16 22:53:08 2015  #> Performed ksvm prediction (cost=16) Sat Nov 23 16:04:10 2024  #> Added ksvm predictions according to global threshold = 0.75 Sat Nov 23 16:04:10 2024  #>  MSnbase version: 1.17.12  plot2D(res, fcol = \"ksvm\")"},{"path":"https://lgatto.github.io/pRoloc/reference/ksvmOptimisation.html","id":null,"dir":"Reference","previous_headings":"","what":"ksvm parameter optimisation — ksvmOptimisation","title":"ksvm parameter optimisation — ksvmOptimisation","text":"Classification parameter optimisation support vector machine algorithm.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/ksvmOptimisation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ksvm parameter optimisation — ksvmOptimisation","text":"","code":"ksvmOptimisation(   object,   fcol = \"markers\",   cost = 2^(-4:4),   times = 100,   test.size = 0.2,   xval = 5,   fun = mean,   seed,   verbose = TRUE,   ... )"},{"path":"https://lgatto.github.io/pRoloc/reference/ksvmOptimisation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ksvm parameter optimisation — ksvmOptimisation","text":"object instance class \"MSnSet\". fcol feature meta-data containing marker definitions. Default markers. cost hyper-parameter. Default values 2^-4:4. times number times internal cross-validation performed. Default 100. test.size size test data. Default 0.2 (20 percent). xval n-cross validation. Default 5. fun function used summarise xval macro F1 matrices. seed optional random number generator seed. verbose logical defining whether progress bar displayed. ... Additional parameters passed ksvm package kernlab.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/ksvmOptimisation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ksvm parameter optimisation — ksvmOptimisation","text":"instance class \"GenRegRes\".","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/ksvmOptimisation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ksvm parameter optimisation — ksvmOptimisation","text":"Note performance scores precision, recall (macro) F1 calculated, NA values replaced 0. decision motivated fact class either NA precision recall result NA F1 score , eventually, NA macro F1 (.e. mean(F1)). Replacing NAs 0s leads F1 values 0 reduced yet defined final macro F1 score.","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/reference/ksvmOptimisation.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ksvm parameter optimisation — ksvmOptimisation","text":"Laurent Gatto","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/makeGoSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a GO feature MSnSet — makeGoSet","title":"Creates a GO feature MSnSet — makeGoSet","text":"Creates new \"MSnSet\" instance populated GO term binary matrix based original object.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/makeGoSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a GO feature MSnSet — makeGoSet","text":"","code":"makeGoSet(object, params, namespace = \"cellular_component\", evidence = NULL)"},{"path":"https://lgatto.github.io/pRoloc/reference/makeGoSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a GO feature MSnSet — makeGoSet","text":"object instance class \"MSnSet\" character feature names. params instance class \"AnnotationParams\", compatible featureNames(object)'s format. namespace ontology name space. One several \"biological_process\",  \"cellular_component\" \"molecular_function\". evidence GO evidence filtering.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/makeGoSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a GO feature MSnSet — makeGoSet","text":"new \"MSnSet\" GO terms respective features original object.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/makeGoSet.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Creates a GO feature MSnSet — makeGoSet","text":"Laurent Gatto","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/makeGoSet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a GO feature MSnSet — makeGoSet","text":"","code":"library(\"pRolocdata\") data(dunkley2006) data(dunkley2006params) goset <- makeGoSet(dunkley2006[1:10, ],                    dunkley2006params) goset #> MSnSet (storageMode: lockedEnvironment) #> assayData: 10 features, 2 samples  #>   element names: exprs  #> protocolData: none #> phenoData: none #> featureData #>   featureNames: AT1G09210 AT1G21750 ... AT1G07810 (10 total) #>   fvarLabels: assigned evidence ... markers (8 total) #>   fvarMetadata: labelDescription #> experimentData: use 'experimentData(object)' #> Annotation:   #> - - - Processing information - - - #> Constructed GO set using cellular_component namespace [Sat Nov 23 16:04:11 2024]  #>  MSnbase version: 2.33.2  exprs(goset) #>           GO:0005783 GO:0005788 #> AT1G09210          0          0 #> AT1G21750          1          1 #> AT1G51760          0          0 #> AT1G56340          1          1 #> AT2G32920          0          0 #> AT2G47470          1          0 #> AT3G54960          0          0 #> AT4G24190          0          1 #> AT5G60640          1          1 #> AT1G07810          0          0 image(goset)"},{"path":"https://lgatto.github.io/pRoloc/reference/markerMSnSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract marker/unknown subsets — markerMSnSet","title":"Extract marker/unknown subsets — markerMSnSet","text":"function extract marker unknown proteins new MSnSet.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/markerMSnSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract marker/unknown subsets — markerMSnSet","text":"","code":"markerMSnSet(object, fcol = \"markers\")  unknownMSnSet(object, fcol = \"markers\")"},{"path":"https://lgatto.github.io/pRoloc/reference/markerMSnSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract marker/unknown subsets — markerMSnSet","text":"object instance class MSnSet fcol name feature data column, used separate markers proteins unknown localisation. markers encoded vectors, features unknown localisation defined fData(object)[, fcol] == \"unknown\". matrix-encoded markers, unlabelled proteins defined rowSums(fData(object)[, fcol]) == 0. Default \"markers\".","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/markerMSnSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract marker/unknown subsets — markerMSnSet","text":"new MSnSet marker/unknown proteins .","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/reference/markerMSnSet.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract marker/unknown subsets — markerMSnSet","text":"Laurent Gatto","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/markerMSnSet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract marker/unknown subsets — markerMSnSet","text":"","code":"library(\"pRolocdata\") data(dunkley2006) mrk <- markerMSnSet(dunkley2006) unk <- unknownMSnSet(dunkley2006) dim(dunkley2006) #> [1] 689  16 dim(mrk) #> [1] 261  16 dim(unk) #> [1] 428  16 table(fData(dunkley2006)$markers) #>  #>      ER lumen   ER membrane         Golgi Mitochondrion            PM  #>            14            45            28            55            46  #>       Plastid      Ribosome           TGN       unknown       vacuole  #>            20            19            13           428            21  table(fData(mrk)$markers) #>  #>      ER lumen   ER membrane         Golgi Mitochondrion            PM  #>            14            45            28            55            46  #>       Plastid      Ribosome           TGN       vacuole  #>            20            19            13            21  table(fData(unk)$markers) #>  #> unknown  #>     428  ## matrix-encoded markers dunkley2006 <- mrkVecToMat(dunkley2006) dim(markerMSnSet(dunkley2006, \"Markers\")) #> [1] 261  16 stopifnot(all.equal(featureNames(markerMSnSet(dunkley2006, \"Markers\")),                     featureNames(markerMSnSet(dunkley2006, \"markers\")))) dim(unknownMSnSet(dunkley2006, \"Markers\")) #> [1] 428  16 stopifnot(all.equal(featureNames(unknownMSnSet(dunkley2006, \"Markers\")),                     featureNames(unknownMSnSet(dunkley2006, \"markers\"))))"},{"path":"https://lgatto.github.io/pRoloc/reference/markers.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a marker vector or matrix. — mrkVecToMat","title":"Create a marker vector or matrix. — mrkVecToMat","text":"Functions producing new vector (matrix) marker vector set existing matrix (vector) marker set.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/markers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a marker vector or matrix. — mrkVecToMat","text":"","code":"mrkVecToMat(object, vfcol = \"markers\", mfcol = \"Markers\")  mrkMatToVec(object, mfcol = \"Markers\", vfcol = \"markers\")  mrkMatAndVec(object, vfcol = \"markers\", mfcol = \"Markers\")  showMrkMat(object, mfcol = \"Markers\")  isMrkMat(object, fcol = \"Markers\")  isMrkVec(object, fcol = \"markers\")  mrkEncoding(object, fcol = \"markers\")"},{"path":"https://lgatto.github.io/pRoloc/reference/markers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a marker vector or matrix. — mrkVecToMat","text":"object MSnSet object vfcol name vector marker feature variable. Default \"markers\". mfcol name matrix marker feature variable. Default \"Markers\". fcol marker feature variable name.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/markers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a marker vector or matrix. — mrkVecToMat","text":"updated MSnSet new vector (matrix) marker set.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/markers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a marker vector or matrix. — mrkVecToMat","text":"Sub-cellular markers can encoded two different ways. Sets spatial markers can represented character vectors (character factor, accurate), stored feature metadata, proteins unknown uncertain localisation (unlabelled, classified) marked \"unknown\" character. handy, encoding suffers drawbacks, particular difficulty label proteins reside multiple (possible actual) localisations. markers vector feature data typically named markers. new matrix encoding also supported. spatial compartment defined column binary markers matrix resident proteins encoded 1s. markers matrix feature data typically named Markers. proteins assigned unique localisations (.e. multi-localisation) localisation unknown (unlabelled), encodings equivalent. markers encoded vectors, features unknown localisation defined fData(object)[, fcol] == \"unknown\". matrix-encoded markers, unlabelled proteins defined rowSums(fData(object)[, fcol]) == 0. mrkMatToVec mrkVecToMat functions enable conversion matrix (vector) vector (matrix). mrkMatAndVec function generates missing encoding existing one. destination encoding already exists, , accurately, feature variable destination encoding exists, error thrown. conversion matrix vector, multiple possible label exists, dropped, .e. converted \"unknown\". Function isMrkVec isMrkMat can used test marker set encoded vector matrix. mrkEncoding returns either \"vector\" \"matrix\" depending nature markers.","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/reference/markers.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a marker vector or matrix. — mrkVecToMat","text":"Laurent Gatto Lisa Breckels","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/markers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a marker vector or matrix. — mrkVecToMat","text":"","code":"library(\"pRolocdata\") data(dunkley2006) dunk <- mrkVecToMat(dunkley2006) head(fData(dunk)$Markers) #>           ER lumen ER membrane Golgi Mitochondrion PM Plastid Ribosome TGN #> AT1G09210        1           0     0             0  0       0        0   0 #> AT1G21750        1           0     0             0  0       0        0   0 #> AT1G51760        1           0     0             0  0       0        0   0 #> AT1G56340        1           0     0             0  0       0        0   0 #> AT2G32920        1           0     0             0  0       0        0   0 #> AT2G47470        1           0     0             0  0       0        0   0 #>           vacuole #> AT1G09210       0 #> AT1G21750       0 #> AT1G51760       0 #> AT1G56340       0 #> AT2G32920       0 #> AT2G47470       0 fData(dunk)$markers <- NULL dunk <- mrkMatToVec(dunk) stopifnot(all.equal(fData(dunkley2006)$markers,                     fData(dunk)$markers))"},{"path":"https://lgatto.github.io/pRoloc/reference/mcmc-helpers.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of outlier at each iteration of MCMC — mcmc_get_outliers","title":"Number of outlier at each iteration of MCMC — mcmc_get_outliers","text":"Helper function get number outlier MCMC iteration. Helper function get mean component allocation MCMC iteration. Helper function get mean probability belonging outlier iteration. Wrapper geweke diagnostics coda package also return p-values. Helper function pool chains together processing Helper function burn n iterations front chains Helper function subsample chains, known informally thinning. Produces violin plot protein posterior probabilities distributions organelles.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/mcmc-helpers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of outlier at each iteration of MCMC — mcmc_get_outliers","text":"","code":"mcmc_get_outliers(x)  mcmc_get_meanComponent(x)  mcmc_get_meanoutliersProb(x)  geweke_test(k)  mcmc_pool_chains(param)  mcmc_burn_chains(x, n = 50)  mcmc_thin_chains(x, freq = 5)  # S4 method for class 'MCMCParams,character' plot(x, y, ...)"},{"path":"https://lgatto.github.io/pRoloc/reference/mcmc-helpers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of outlier at each iteration of MCMC — mcmc_get_outliers","text":"x Object class MCMCParams k list coda::mcmc objects, returned mcmc_get_outliers, mcmc_get_meanComponent mcmc_get_meanoutliersProb. param object class MCMCParams. n integer(1) defining number iterations burn. default 50 freq Thinning frequency. function retains every `freq`th iteration `integer(1)`. default thinning frequency `5`. y `character(1)` protein name. ... Currently ignored.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/mcmc-helpers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of outlier at each iteration of MCMC — mcmc_get_outliers","text":"list length length(x). list length length(x). list length length(x). matrix test z- p-values chain. pooled MCMCParams object. updated MCMCParams object. thinned `MCMCParams` object. ggplot2 object.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/mcmc-helpers.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Number of outlier at each iteration of MCMC — mcmc_get_outliers","text":"Laurent Gatto","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/minMarkers.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a reduced marker variable — minMarkers","title":"Creates a reduced marker variable — minMarkers","text":"function updates MSnSet instances sets markers class unknown less n instances.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/minMarkers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a reduced marker variable — minMarkers","text":"","code":"minMarkers(object, n = 10, fcol = \"markers\")"},{"path":"https://lgatto.github.io/pRoloc/reference/minMarkers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a reduced marker variable — minMarkers","text":"object instance class \"MSnSet\". n Minumum marker instances per class. fcol name markers column featureData slot. Default markers.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/minMarkers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a reduced marker variable — minMarkers","text":"instance class \"MSnSet\" new feature variables, named original fcol variable n value.","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/reference/minMarkers.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Creates a reduced marker variable — minMarkers","text":"Laurent Gatto","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/minMarkers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a reduced marker variable — minMarkers","text":"","code":"library(pRolocdata) data(dunkley2006) d2 <- minMarkers(dunkley2006, 20) getMarkers(dunkley2006) #> organelleMarkers #>      ER lumen   ER membrane         Golgi Mitochondrion            PM  #>            14            45            28            55            46  #>       Plastid      Ribosome           TGN       unknown       vacuole  #>            20            19            13           428            21  getMarkers(d2, fcol = \"markers20\") #> organelleMarkers #>   ER membrane         Golgi Mitochondrion            PM       Plastid  #>            45            28            55            46            20  #>       unknown       vacuole  #>           474            21"},{"path":"https://lgatto.github.io/pRoloc/reference/mixing_posterior_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Model calibration plots — mixing_posterior_check","title":"Model calibration plots — mixing_posterior_check","text":"Model calibration model posterior z-scores posterior shrinkage","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/mixing_posterior_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model calibration plots — mixing_posterior_check","text":"","code":"mixing_posterior_check(object, params, priors, fcol = \"markers\")"},{"path":"https://lgatto.github.io/pRoloc/reference/mixing_posterior_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model calibration plots — mixing_posterior_check","text":"object valid object class MSnset params valid object class MCMCParams processed checked convergence priors prior used model fcol columns feature data contain marker data.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/mixing_posterior_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model calibration plots — mixing_posterior_check","text":"Used side effect producing plot. Invisibily returns ggplot object can manipulated","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/mixing_posterior_check.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Model calibration plots — mixing_posterior_check","text":"Oliver M. Crook <omc25@cam.ac.uk>","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/mixing_posterior_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model calibration plots — mixing_posterior_check","text":"","code":"if (FALSE) { # \\dontrun{ library(\"pRoloc\") data(\"tan2009r1\")  tanres <- tagmMcmcTrain(object = tan2009r1) tanres <- tagmMcmcProcess(tanres) tan2009r1 <- tagmMcmcPredict(object = tan2009r1, params = tanres, probJoint = TRUE) myparams <- chains(e14Tagm_converged_pooled)[[1]] myparams2 <- chains(mcmc_pool_chains(tanres))[[1]] priors <- tanres@priors pRoloc:::mixing_posterior_check(object = tan2009r1, params = myparams2, priors = priors) } # }"},{"path":"https://lgatto.github.io/pRoloc/reference/move2Ds.html","id":null,"dir":"Reference","previous_headings":"","what":"Displays a spatial proteomics animation — move2Ds","title":"Displays a spatial proteomics animation — move2Ds","text":"Given two MSnSet instances one MSnSetList least two items, function produces animation shows transition first data second.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/move2Ds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Displays a spatial proteomics animation — move2Ds","text":"","code":"move2Ds(object, pcol, fcol = \"markers\", n = 25, hl)"},{"path":"https://lgatto.github.io/pRoloc/reference/move2Ds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Displays a spatial proteomics animation — move2Ds","text":"object linkS4class{MSnSet} MSnSetList. latter case, two first elements list used plotting others silently ignored. pcol object MSnSet, factor name phenotype variable (phenoData slot) defining split single MSnSet two data sets.  Ignored object MSnSetList. fcol Feature meta-data label (fData column name) defining groups differentiated using different colours. Default markers. Use NULL suppress colouring. n Number frames, Default 25. hl optional instance class linkS4class{FeaturesOfInterest} track features interest.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/move2Ds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Displays a spatial proteomics animation — move2Ds","text":"Used side effect producing short animation.","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/reference/move2Ds.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Displays a spatial proteomics animation — move2Ds","text":"Laurent Gatto","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/move2Ds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Displays a spatial proteomics animation — move2Ds","text":"","code":"library(\"pRolocdata\") data(dunkley2006)  ## Create a relevant MSnSetList using the dunkley2006 data xx <- split(dunkley2006, \"replicate\") xx1 <- xx[[1]] xx2 <- xx[[2]] fData(xx1)$markers[374] <- \"Golgi\" fData(xx2)$markers[412] <- \"unknown\" xx@x[[1]] <- xx1 xx@x[[2]] <- xx2  ## The features we want to track foi <- FeaturesOfInterest(description = \"test\",                           fnames = featureNames(xx[[1]])[c(374, 412)])  ## (1) visualise each experiment separately par(mfrow = c(2, 1)) plot2D(xx[[1]], main = \"condition A\") highlightOnPlot(xx[[1]], foi) plot2D(xx[[2]], mirrorY = TRUE, main = \"condition B\") highlightOnPlot(xx[[2]], foi, args = list(mirrorY = TRUE))   ## (2) plot both data on the same plot par(mfrow = c(1, 1)) tmp <- plot2Ds(xx)  highlightOnPlot(data1(tmp), foi, lwd = 2) highlightOnPlot(data2(tmp), foi, pch = 5, lwd = 2)   ## (3) create an animation move2Ds(xx, pcol = \"replicate\")                          move2Ds(xx, pcol = \"replicate\", hl = foi)"},{"path":"https://lgatto.github.io/pRoloc/reference/mrkConsProfiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Marker consensus profiles — mrkConsProfiles","title":"Marker consensus profiles — mrkConsProfiles","text":"function calculate average marker profiles.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/mrkConsProfiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Marker consensus profiles — mrkConsProfiles","text":"","code":"mrkConsProfiles(object, fcol = \"markers\", method = mean)"},{"path":"https://lgatto.github.io/pRoloc/reference/mrkConsProfiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Marker consensus profiles — mrkConsProfiles","text":"object instance class MSnSet. fcol Feature meta-data label (fData column name) defining groups differentiated using different colours. Default markers. method function average marker profiles. Default mean.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/mrkConsProfiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Marker consensus profiles — mrkConsProfiles","text":"matrix dimensions number clusters     (exluding unknowns) number fractions.","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/reference/mrkConsProfiles.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Marker consensus profiles — mrkConsProfiles","text":"Laurent Gatto Lisa M. Breckels","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/mrkConsProfiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Marker consensus profiles — mrkConsProfiles","text":"","code":"library(\"pRolocdata\") data(dunkley2006) mrkConsProfiles(dunkley2006) #>                    M1F1A     M1F4A     M1F7A    M1F11A      M1F2B     M1F5B #> ER lumen      0.34790193 0.2778745 0.2000145 0.1743091 0.49310871 0.2030229 #> ER membrane   0.26954542 0.3094276 0.2201106 0.2010234 0.37832533 0.2433542 #> Golgi         0.10673314 0.2228814 0.3508332 0.3196275 0.12041797 0.2295954 #> Mitochondrion 0.09008695 0.1864223 0.2975309 0.4259333 0.09515331 0.1942079 #> PM            0.18493326 0.2926176 0.2368301 0.2856681 0.28288228 0.2230173 #> Plastid       0.08200481 0.1499930 0.2870436 0.4809921 0.08937813 0.1255232 #> Ribosome      0.26117895 0.2692538 0.2147402 0.2549371 0.34736379 0.2021619 #> TGN           0.14267536 0.3307792 0.3116818 0.2148358 0.19059969 0.3458225 #> vacuole       0.49060776 0.1887146 0.1505610 0.1701423 0.53019938 0.1462491 #>                   M1F8B    M1F11B      M2F1A      M2F4A     M2F7A    M2F11A #> ER lumen      0.1632424 0.1405430 0.38528500 0.30223829 0.1643254 0.1480823 #> ER membrane   0.1990741 0.1793234 0.24821447 0.34158018 0.2421851 0.1680087 #> Golgi         0.3546319 0.2952720 0.06979120 0.24087721 0.4075620 0.2818049 #> Mitochondrion 0.3043015 0.4063777 0.05297090 0.15590611 0.3271555 0.4639317 #> PM            0.2244869 0.2695825 0.14423628 0.25059815 0.2784118 0.3266328 #> Plastid       0.3327774 0.4523463 0.05931388 0.09338429 0.2421152 0.6051806 #> Ribosome      0.2143384 0.2361688 0.24835921 0.19839005 0.2084512 0.3447833 #> TGN           0.2799308 0.1836193 0.09905576 0.33923838 0.3503657 0.2112014 #> vacuole       0.1486659 0.1748985 0.52382333 0.16930881 0.1484392 0.1585148 #>                    M2F2B      M2F5B     M2F8B    M2F11B #> ER lumen      0.41181264 0.28204521 0.1614619 0.1446546 #> ER membrane   0.29584151 0.30213218 0.2223314 0.1797237 #> Golgi         0.09211270 0.25888696 0.3764906 0.2726121 #> Mitochondrion 0.05592373 0.18116613 0.3156597 0.4472919 #> PM            0.17748167 0.22124237 0.2801925 0.3210563 #> Plastid       0.06704418 0.09906525 0.3149460 0.5190335 #> Ribosome      0.21993053 0.20215705 0.2179611 0.3598775 #> TGN           0.13232952 0.33208846 0.3140628 0.2215500 #> vacuole       0.48365443 0.14997229 0.1787520 0.1876555 mrkConsProfiles(dunkley2006, method = median) #>                    M1F1A     M1F4A     M1F7A    M1F11A      M1F2B    M1F5B #> ER lumen      0.34319050 0.2788335 0.1992085 0.1686665 0.49232500 0.202000 #> ER membrane   0.26882600 0.3099780 0.2194130 0.2012500 0.37556200 0.242143 #> Golgi         0.10333350 0.2147500 0.3562500 0.3187180 0.11191650 0.229143 #> Mitochondrion 0.09033330 0.1876670 0.2993330 0.4210000 0.08831580 0.191571 #> PM            0.17800000 0.2930000 0.2347515 0.2852500 0.28287250 0.225200 #> Plastid       0.08338885 0.1541700 0.2874090 0.4760250 0.07488665 0.127725 #> Ribosome      0.26450000 0.2740000 0.2120000 0.2434000 0.36000000 0.203000 #> TGN           0.16450000 0.3310000 0.3055000 0.2100000 0.19585700 0.357333 #> vacuole       0.49900000 0.1898570 0.1440000 0.1641430 0.53900000 0.143250 #>                   M1F8B    M1F11B      M2F1A    M2F4A     M2F7A    M2F11A #> ER lumen      0.1628330 0.1387500 0.37987800 0.302522 0.1634445 0.1510695 #> ER membrane   0.1982310 0.1800000 0.24625000 0.340711 0.2420000 0.1645710 #> Golgi         0.3605835 0.2973330 0.06733335 0.227000 0.4116250 0.2769165 #> Mitochondrion 0.3036470 0.4071870 0.04750000 0.153333 0.3285000 0.4670000 #> PM            0.2251835 0.2734000 0.13747500 0.248750 0.2732500 0.3357500 #> Plastid       0.3395450 0.4584865 0.05180950 0.086075 0.2419855 0.6028000 #> Ribosome      0.2115000 0.2312220 0.24800000 0.220000 0.2105000 0.2925000 #> TGN           0.2783330 0.1766670 0.10800000 0.314333 0.3480000 0.2112500 #> vacuole       0.1440000 0.1720000 0.53186700 0.167143 0.1488000 0.1587500 #>                   M2F2B    M2F5B     M2F8B    M2F11B #> ER lumen      0.4166665 0.286537 0.1582335 0.1319000 #> ER membrane   0.2960000 0.302667 0.2225000 0.1693000 #> Golgi         0.0878500 0.255450 0.3808335 0.2707855 #> Mitochondrion 0.0555833 0.176105 0.3158570 0.4507370 #> PM            0.1698125 0.218000 0.2798335 0.3248750 #> Plastid       0.0602500 0.093250 0.3203335 0.5308750 #> Ribosome      0.2450000 0.215000 0.2196670 0.3135000 #> TGN           0.1370000 0.326750 0.2977000 0.2162000 #> vacuole       0.4816670 0.146000 0.1807500 0.1907500 mm <- mrkConsProfiles(dunkley2006) ## Reorder fractions o <- order(dunkley2006$fraction) ## Plot mean organelle profiles using the ## default pRoloc colour palette. matplot(t(mm[, o]), type = \"l\",         xlab = \"Fractions\", ylab = \"Relative intensity\",         main = \"Mean organelle profiles\",         col = getStockcol(), lwd = 2, lty = 1) ## Add a legend addLegend(markerMSnSet(dunkley2006), where = \"topleft\")"},{"path":"https://lgatto.github.io/pRoloc/reference/mrkHClust.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw a dendrogram of subcellular clusters — mrkHClust","title":"Draw a dendrogram of subcellular clusters — mrkHClust","text":"functions calculates average protein profile marker class (proteins unknown localisation ignored) generates dendrogram representing relation marker classes. colours used dendrogram labels taken default colours (see getStockcol) match colours spatial proteomics visualisations plot2D.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/mrkHClust.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw a dendrogram of subcellular clusters — mrkHClust","text":"","code":"mrkHClust(   object,   fcol = \"markers\",   distargs,   hclustargs,   method = mean,   plot = TRUE,   ... )"},{"path":"https://lgatto.github.io/pRoloc/reference/mrkHClust.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw a dendrogram of subcellular clusters — mrkHClust","text":"object instance class MSnSet. fcol Feature meta-data label (fData column name) defining groups differentiated using different colours. Default markers. distargs list arguments passed dist function. hclustargs list arguments passed hclust function. method function average marker profiles. Default mean. plot logical defining whether dendrogram plotted. Default TRUE. ... Additional parameters passed plotting dendrogram.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/mrkHClust.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw a dendrogram of subcellular clusters — mrkHClust","text":"Invisibly returns dendrogram object, containing     hierarchical cluster computed hclust.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/mrkHClust.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Draw a dendrogram of subcellular clusters — mrkHClust","text":"Laurent Gatto","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/mrkHClust.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw a dendrogram of subcellular clusters — mrkHClust","text":"","code":"library(\"pRolocdata\") data(dunkley2006) mrkHClust(dunkley2006)"},{"path":"https://lgatto.github.io/pRoloc/reference/nbClassification.html","id":null,"dir":"Reference","previous_headings":"","what":"nb classification — nbClassification","title":"nb classification — nbClassification","text":"Classification using naive Bayes algorithm.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/nbClassification.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"nb classification — nbClassification","text":"","code":"nbClassification(   object,   assessRes,   scores = c(\"prediction\", \"all\", \"none\"),   laplace,   fcol = \"markers\",   ... )"},{"path":"https://lgatto.github.io/pRoloc/reference/nbClassification.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"nb classification — nbClassification","text":"object instance class \"MSnSet\". assessRes instance class \"GenRegRes\", generated nbOptimisation. scores One \"prediction\", \"\" \"none\" report score predicted class , classes none. laplace assessRes missing, laplace must provided. fcol feature meta-data containing marker definitions. Default markers. ... Additional parameters passed naiveBayes package e1071.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/nbClassification.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"nb classification — nbClassification","text":"instance class \"MSnSet\"     nb nb.scores feature variables storing     classification results scores respectively.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/nbClassification.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"nb classification — nbClassification","text":"Laurent Gatto","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/nbClassification.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"nb classification — nbClassification","text":"","code":"library(pRolocdata) data(dunkley2006) ## reducing parameter search space and iterations  params <- nbOptimisation(dunkley2006, laplace = c(0, 5),  times = 3) #>    |                                                                               |                                                                      |   0%   |                                                                               |=====                                                                 |   7%   |                                                                               |=========                                                             |  13%   |                                                                               |==============                                                        |  20%   |                                                                               |===================                                                   |  27%   |                                                                               |=======================                                               |  33%   |                                                                               |============================                                          |  40%   |                                                                               |=================================                                     |  47%   |                                                                               |=====================================                                 |  53%   |                                                                               |==========================================                            |  60%   |                                                                               |===============================================                       |  67%   |                                                                               |===================================================                   |  73%   |                                                                               |========================================================              |  80%   |                                                                               |=============================================================         |  87%   |                                                                               |=================================================================     |  93%   |                                                                               |======================================================================| 100% params #> Object of class \"GenRegRes\" #> Algorithm: naiveBayes  #> Hyper-parameters: #>  laplace: 0 5 #> Design: #>  Replication: 3 x 5-fold X-validation #>  Partitioning: 0.2/0.8 (test/train) #> Results #>  macro F1: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>  0.9257  0.9537  0.9818  0.9692  0.9909  1.0000  #>  best laplace: 5    plot(params)  f1Count(params) #>  #> 5  #> 1  levelPlot(params)  getParams(params) #> laplace  #>       5  res <- nbClassification(dunkley2006, params) #> [1] \"markers\" getPredictions(res, fcol = \"naiveBayes\") #> ans #>      ER lumen   ER membrane         Golgi Mitochondrion            PM  #>            18           175            98            98           123  #>       Plastid      Ribosome           TGN       vacuole  #>            52            70            24            31  #> MSnSet (storageMode: lockedEnvironment) #> assayData: 689 features, 16 samples  #>   element names: exprs  #> protocolData: none #> phenoData #>   sampleNames: M1F1A M1F4A ... M2F11B (16 total) #>   varLabels: membrane.prep fraction replicate #>   varMetadata: labelDescription #> featureData #>   featureNames: AT1G09210 AT1G21750 ... AT4G39080 (689 total) #>   fvarLabels: assigned evidence ... naiveBayes.pred (11 total) #>   fvarMetadata: labelDescription #> experimentData: use 'experimentData(object)' #>   pubMedIds: 16618929  #> Annotation:   #> - - - Processing information - - - #> Loaded on Thu Jul 16 22:53:08 2015.  #> Normalised to sum of intensities.  #> Added markers from  'mrk' marker vector. Thu Jul 16 22:53:08 2015  #> Performed naiveBayes prediction (laplace=5) Sat Nov 23 16:04:21 2024  #> Added naiveBayes predictions according to global threshold = 0 Sat Nov 23 16:04:21 2024  #>  MSnbase version: 1.17.12  getPredictions(res, fcol = \"naiveBayes\", t = 1) #> ans #>      ER lumen   ER membrane         Golgi Mitochondrion            PM  #>            14            45            69            61            46  #>       Plastid      Ribosome           TGN       unknown       vacuole  #>            43            35            13           336            27  #> MSnSet (storageMode: lockedEnvironment) #> assayData: 689 features, 16 samples  #>   element names: exprs  #> protocolData: none #> phenoData #>   sampleNames: M1F1A M1F4A ... M2F11B (16 total) #>   varLabels: membrane.prep fraction replicate #>   varMetadata: labelDescription #> featureData #>   featureNames: AT1G09210 AT1G21750 ... AT4G39080 (689 total) #>   fvarLabels: assigned evidence ... naiveBayes.pred (11 total) #>   fvarMetadata: labelDescription #> experimentData: use 'experimentData(object)' #>   pubMedIds: 16618929  #> Annotation:   #> - - - Processing information - - - #> Loaded on Thu Jul 16 22:53:08 2015.  #> Normalised to sum of intensities.  #> Added markers from  'mrk' marker vector. Thu Jul 16 22:53:08 2015  #> Performed naiveBayes prediction (laplace=5) Sat Nov 23 16:04:21 2024  #> Added naiveBayes predictions according to global threshold = 1 Sat Nov 23 16:04:21 2024  #>  MSnbase version: 1.17.12  plot2D(res, fcol = \"naiveBayes\")"},{"path":"https://lgatto.github.io/pRoloc/reference/nbOptimisation.html","id":null,"dir":"Reference","previous_headings":"","what":"nb paramter optimisation — nbOptimisation","title":"nb paramter optimisation — nbOptimisation","text":"Classification algorithm parameter naive Bayes algorithm.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/nbOptimisation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"nb paramter optimisation — nbOptimisation","text":"","code":"nbOptimisation(   object,   fcol = \"markers\",   laplace = seq(0, 5, 0.5),   times = 100,   test.size = 0.2,   xval = 5,   fun = mean,   seed,   verbose = TRUE,   ... )"},{"path":"https://lgatto.github.io/pRoloc/reference/nbOptimisation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"nb paramter optimisation — nbOptimisation","text":"object instance class \"MSnSet\". fcol feature meta-data containing marker definitions. Default markers. laplace hyper-parameter. Default values seq(0, 5, 0.5). times number times internal cross-validation performed. Default 100. test.size size test data. Default 0.2 (20 percent). xval n-cross validation. Default 5. fun function used summarise xval macro F1 matrices. seed optional random number generator seed. verbose logical defining whether progress bar displayed. ... Additional parameters passed naiveBayes package e1071.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/nbOptimisation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"nb paramter optimisation — nbOptimisation","text":"instance class \"GenRegRes\".","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/nbOptimisation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"nb paramter optimisation — nbOptimisation","text":"Note performance scores precision, recall (macro) F1 calculated, NA values replaced 0. decision motivated fact class either NA precision recall result NA F1 score , eventually, NA macro F1 (.e. mean(F1)). Replacing NAs 0s leads F1 values 0 reduced yet defined final macro F1 score.","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/reference/nbOptimisation.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"nb paramter optimisation — nbOptimisation","text":"Laurent Gatto","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/nicheMeans2D.html","id":null,"dir":"Reference","previous_headings":"","what":"Uncertainty plot organelle means — nicheMeans2D","title":"Uncertainty plot organelle means — nicheMeans2D","text":"Produces pca plot uncertainty organelle means projected onto PCA plot contours.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/nicheMeans2D.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uncertainty plot organelle means — nicheMeans2D","text":"","code":"nicheMeans2D(   object,   params,   priors,   dims = c(1, 2),   fcol = \"markers\",   aspect = 0.5 )"},{"path":"https://lgatto.github.io/pRoloc/reference/nicheMeans2D.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uncertainty plot organelle means — nicheMeans2D","text":"object valid object class MSnset params valid object class MCMCParams processed checked convergence priors prior used model dims PCA dimension project data, default c(1,2) fcol columns feature data contain marker data. aspect argument change plotting aspect PCA","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/nicheMeans2D.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uncertainty plot organelle means — nicheMeans2D","text":"Used side effect producing plot. Invisibily returns ggplot     object can manipulated","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/nicheMeans2D.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Uncertainty plot organelle means — nicheMeans2D","text":"Oliver M. Crook <omc25@cam.ac.uk>","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/nicheMeans2D.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Uncertainty plot organelle means — nicheMeans2D","text":"","code":"if (FALSE) { # \\dontrun{ library(\"pRolocdata\") data(\"tan2009r1\")  tanres <- tagmMcmcTrain(object = tan2009r1) tanres <- tagmMcmcProcess(tanres) tan2009r1 <- tagmMcmcPredict(object = tan2009r1, params = tanres, probJoint = TRUE) myparams <- chains(e14Tagm_converged_pooled)[[1]] myparams2 <- chains(mcmc_pool_chains(tanres))[[1]] priors <- tanres@priors pRoloc:::nicheMeans2D(object = tan2009r1, params = myparams2, priors = priors) } # }"},{"path":"https://lgatto.github.io/pRoloc/reference/nndist-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Nearest neighbour distances — nndist-methods","title":"Nearest neighbour distances — nndist-methods","text":"Methods computing nearest neighbour indices distances   matrix MSnSet instances.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/nndist-methods.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Nearest neighbour distances — nndist-methods","text":"signature(object = \"matrix\", k = \"numeric\", dist = \t\"character\", ...) Calculates indices distances \tk (default 3) nearest neighbours feature (row) \tinput matrix object. distance dist can \teither \"euclidean\" \t\"mahalanobis\". Additional parameters can passed \tinternal function FNN::get.knn. Output matrix \t2 * k columns nrow(object) rows. signature(object = \"MSnSet\", k = \"numeric\", dist = \t\"character\", ...) , MSnSet \tinput. indices distances k nearest \tneighbours added object's feature metadata. signature(object = \"matrix\", query = \"matrix\", k =       \"numeric\", ...) two matrix instances provided       input, k (default 3) indices distances       nearest neighbours query object returned       matrix dimensions 2 * k       nrow(query). Additional parameters passed       FNN::get.knnx. euclidean distance available.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/nndist-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nearest neighbour distances — nndist-methods","text":"","code":"library(\"pRolocdata\") data(dunkley2006)  ## Using a matrix as input m <- exprs(dunkley2006) m[1:4, 1:3] #>              M1F1A    M1F4A    M1F7A #> AT1G09210 0.323250 0.275500 0.216000 #> AT1G21750 0.332000 0.279667 0.222000 #> AT1G51760 0.397250 0.246500 0.168250 #> AT1G56340 0.336733 0.303267 0.201133 head(nndist(m, k = 5)) #>           index1euc   dist1euc index2euc   dist2euc index3euc   dist3euc #> AT1G09210         4 0.07704563       151 0.07958198         2 0.08142734 #> AT1G21750         1 0.08142734         4 0.08262245       151 0.08645587 #> AT1G51760       150 0.09921614       156 0.10449514       151 0.10922063 #> AT1G56340         8 0.07268495         1 0.07704563         9 0.07958917 #> AT2G32920         9 0.08767137         4 0.10248944       155 0.10307756 #> AT2G47470       151 0.05067260       153 0.07809223         4 0.08231921 #>           index4euc   dist4euc index5euc   dist5euc #> AT1G09210         6 0.08738381       150 0.11859295 #> AT1G21750       150 0.09657314         6 0.10902502 #> AT1G51760       155 0.11456182         2 0.11749637 #> AT1G56340         6 0.08231921         2 0.08262245 #> AT2G32920         8 0.10670010         6 0.10806363 #> AT2G47470         1 0.08738381       378 0.09215796 tail(nndist(m[1:100, ], k = 2, dist = \"mahalanobis\")) #>           index1mah dist1mah index2mah dist2mah #> AT3G26830        37 26.26210        33 25.95250 #> AT3G28580        60 25.95250        35 21.88428 #> AT3G28720        70 31.50309        57 28.63844 #> AT3G44330        72 26.74359        64 26.74359 #> AT3G48890        17 33.69198        36 32.85008 #> AT3G51430        56 26.83278        75 22.23005  ## Same as above for MSnSet d <- nndist(dunkley2006, k = 5) head(fData(d)) #>           assigned  evidence method   new pd.2013 pd.markers markers.orig #> AT1G09210       ER predicted  PLSDA known      ER   ER lumen           ER #> AT1G21750       ER predicted  PLSDA known      ER   ER lumen           ER #> AT1G51760       ER   unknown  PLSDA   new      ER   ER lumen      unknown #> AT1G56340       ER predicted  PLSDA known      ER   ER lumen           ER #> AT2G32920       ER predicted  PLSDA known      ER   ER lumen           ER #> AT2G47470       ER predicted  PLSDA known      ER   ER lumen           ER #>            markers index1euc   dist1euc index2euc   dist2euc index3euc #> AT1G09210 ER lumen         4 0.07704563       151 0.07958198         2 #> AT1G21750 ER lumen         1 0.08142734         4 0.08262245       151 #> AT1G51760 ER lumen       150 0.09921614       156 0.10449514       151 #> AT1G56340 ER lumen         8 0.07268495         1 0.07704563         9 #> AT2G32920 ER lumen         9 0.08767137         4 0.10248944       155 #> AT2G47470 ER lumen       151 0.05067260       153 0.07809223         4 #>             dist3euc index4euc   dist4euc index5euc   dist5euc #> AT1G09210 0.08142734         6 0.08738381       150 0.11859295 #> AT1G21750 0.08645587       150 0.09657314         6 0.10902502 #> AT1G51760 0.10922063       155 0.11456182         2 0.11749637 #> AT1G56340 0.07958917         6 0.08231921         2 0.08262245 #> AT2G32920 0.10307756         8 0.10670010         6 0.10806363 #> AT2G47470 0.08231921         1 0.08738381       378 0.09215796  d <- nndist(dunkley2006[1:100, ], k = 2, dist = \"mahalanobis\") tail(fData(d)) #>           assigned evidence method     new pd.2013 pd.markers markers.orig #> AT3G26830       ER  unknown  PLSDA     new      ER    unknown      unknown #> AT3G28580       ER  unknown  PLSDA     new      ER    unknown      unknown #> AT3G28720  unknown  unknown  PLSDA unknown      ER    unknown      unknown #> AT3G44330       ER  unknown  PLSDA     new      ER    unknown      unknown #> AT3G48890  unknown  unknown  PLSDA unknown      ER    unknown      unknown #> AT3G51430       ER  unknown  PLSDA     new      ER    unknown      unknown #>           markers index1mah dist1mah index2mah dist2mah #> AT3G26830 unknown        37 26.26210        33 25.95250 #> AT3G28580 unknown        60 25.95250        35 21.88428 #> AT3G28720 unknown        70 31.50309        57 28.63844 #> AT3G44330 unknown        72 26.74359        64 26.74359 #> AT3G48890 unknown        17 33.69198        36 32.85008 #> AT3G51430 unknown        56 26.83278        75 22.23005  ## Using a query nndist(m[1:100, ], m[101:110, ], k = 2) #>           index1euc   dist1euc index2euc   dist2euc #> AT3G51440        40 0.08584173        78 0.08761483 #> AT3G51460        59 0.07788915        86 0.07970032 #> AT3G57010        86 0.05580589        61 0.05615363 #> AT3G57030        34 0.07262401        14 0.07373216 #> AT3G57880        34 0.05350903        46 0.05471768 #> AT3G59500        91 0.10986265        24 0.11019115 #> AT3G60600        64 0.07059527        20 0.07176627 #> AT3G62360        48 0.04383448        17 0.05428251 #> AT3G66658        73 0.06079091        34 0.06115031 #> AT4G00175        75 0.07679760        92 0.07719277"},{"path":"https://lgatto.github.io/pRoloc/reference/nnetClassification.html","id":null,"dir":"Reference","previous_headings":"","what":"nnet classification — nnetClassification","title":"nnet classification — nnetClassification","text":"Classification using artificial neural network algorithm.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/nnetClassification.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"nnet classification — nnetClassification","text":"","code":"nnetClassification(   object,   assessRes,   scores = c(\"prediction\", \"all\", \"none\"),   decay,   size,   fcol = \"markers\",   ... )"},{"path":"https://lgatto.github.io/pRoloc/reference/nnetClassification.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"nnet classification — nnetClassification","text":"object instance class \"MSnSet\". assessRes instance class \"GenRegRes\", generated nnetOptimisation. scores One \"prediction\", \"\" \"none\" report score predicted class , classes none. decay assessRes missing, decay must provided. size assessRes missing, size must provided. fcol feature meta-data containing marker definitions. Default markers. ... Additional parameters passed nnet package nnet.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/nnetClassification.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"nnet classification — nnetClassification","text":"instance class \"MSnSet\"     nnet nnet.scores feature variables storing     classification results scores respectively.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/nnetClassification.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"nnet classification — nnetClassification","text":"Laurent Gatto","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/nnetClassification.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"nnet classification — nnetClassification","text":"","code":"library(pRolocdata) data(dunkley2006) ## reducing parameter search space and iterations  params <- nnetOptimisation(dunkley2006, decay = 10^(c(-1, -5)), size = c(5, 10), times = 3) #>    |                                                                               |                                                                      |   0%   |                                                                               |=====                                                                 |   7%   |                                                                               |=========                                                             |  13%   |                                                                               |==============                                                        |  20%   |                                                                               |===================                                                   |  27%   |                                                                               |=======================                                               |  33%   |                                                                               |============================                                          |  40%   |                                                                               |=================================                                     |  47%   |                                                                               |=====================================                                 |  53%   |                                                                               |==========================================                            |  60%   |                                                                               |===============================================                       |  67%   |                                                                               |===================================================                   |  73%   |                                                                               |========================================================              |  80%   |                                                                               |=============================================================         |  87%   |                                                                               |=================================================================     |  93%   |                                                                               |======================================================================| 100% params #> Object of class \"GenRegRes\" #> Algorithm: nnet  #> Hyper-parameters: #>  decay: 0.1 1e-05 #>  size: 5 10 #> Design: #>  Replication: 3 x 5-fold X-validation #>  Partitioning: 0.2/0.8 (test/train) #> Results #>  macro F1: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>  0.9645  0.9681  0.9718  0.9736  0.9782  0.9846  #>  best decay: 1e-05 0.1    #>  best size: 10    plot(params)  f1Count(params) #>       10 #> 1e-05  0 #> 0.1    1 levelPlot(params)  getParams(params) #> decay  size  #>   0.1  10.0  res <- nnetClassification(dunkley2006, params) #> [1] \"markers\" #> # weights:  269 #> initial  value 650.117805  #> iter  10 value 376.359754 #> iter  20 value 238.559795 #> iter  30 value 178.672209 #> iter  40 value 171.805580 #> iter  50 value 162.533681 #> iter  60 value 160.271625 #> iter  70 value 158.637365 #> iter  80 value 157.563421 #> iter  90 value 156.799485 #> iter 100 value 156.548913 #> final  value 156.548913  #> stopped after 100 iterations getPredictions(res, fcol = \"nnet\") #> ans #>      ER lumen   ER membrane         Golgi Mitochondrion            PM  #>            18           186            94           106           131  #>       Plastid      Ribosome           TGN       vacuole  #>            49            53            20            32  #> MSnSet (storageMode: lockedEnvironment) #> assayData: 689 features, 16 samples  #>   element names: exprs  #> protocolData: none #> phenoData #>   sampleNames: M1F1A M1F4A ... M2F11B (16 total) #>   varLabels: membrane.prep fraction replicate #>   varMetadata: labelDescription #> featureData #>   featureNames: AT1G09210 AT1G21750 ... AT4G39080 (689 total) #>   fvarLabels: assigned evidence ... nnet.pred (11 total) #>   fvarMetadata: labelDescription #> experimentData: use 'experimentData(object)' #>   pubMedIds: 16618929  #> Annotation:   #> - - - Processing information - - - #> Loaded on Thu Jul 16 22:53:08 2015.  #> Normalised to sum of intensities.  #> Added markers from  'mrk' marker vector. Thu Jul 16 22:53:08 2015  #> Performed nnet prediction (decay=0.1 size=10) Sat Nov 23 16:04:25 2024  #> Added nnet predictions according to global threshold = 0 Sat Nov 23 16:04:25 2024  #>  MSnbase version: 1.17.12  getPredictions(res, fcol = \"nnet\", t = 0.75) #> ans #>      ER lumen   ER membrane         Golgi Mitochondrion            PM  #>            14           148            68            93            95  #>       Plastid      Ribosome           TGN       unknown       vacuole  #>            42            35            13           154            27  #> MSnSet (storageMode: lockedEnvironment) #> assayData: 689 features, 16 samples  #>   element names: exprs  #> protocolData: none #> phenoData #>   sampleNames: M1F1A M1F4A ... M2F11B (16 total) #>   varLabels: membrane.prep fraction replicate #>   varMetadata: labelDescription #> featureData #>   featureNames: AT1G09210 AT1G21750 ... AT4G39080 (689 total) #>   fvarLabels: assigned evidence ... nnet.pred (11 total) #>   fvarMetadata: labelDescription #> experimentData: use 'experimentData(object)' #>   pubMedIds: 16618929  #> Annotation:   #> - - - Processing information - - - #> Loaded on Thu Jul 16 22:53:08 2015.  #> Normalised to sum of intensities.  #> Added markers from  'mrk' marker vector. Thu Jul 16 22:53:08 2015  #> Performed nnet prediction (decay=0.1 size=10) Sat Nov 23 16:04:25 2024  #> Added nnet predictions according to global threshold = 0.75 Sat Nov 23 16:04:25 2024  #>  MSnbase version: 1.17.12  plot2D(res, fcol = \"nnet\")"},{"path":"https://lgatto.github.io/pRoloc/reference/nnetOptimisation.html","id":null,"dir":"Reference","previous_headings":"","what":"nnet parameter optimisation — nnetOptimisation","title":"nnet parameter optimisation — nnetOptimisation","text":"Classification parameter optimisation artificial neural network algorithm.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/nnetOptimisation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"nnet parameter optimisation — nnetOptimisation","text":"","code":"nnetOptimisation(   object,   fcol = \"markers\",   decay = c(0, 10^(-1:-5)),   size = seq(1, 10, 2),   times = 100,   test.size = 0.2,   xval = 5,   fun = mean,   seed,   verbose = TRUE,   ... )"},{"path":"https://lgatto.github.io/pRoloc/reference/nnetOptimisation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"nnet parameter optimisation — nnetOptimisation","text":"object instance class \"MSnSet\". fcol feature meta-data containing marker definitions. Default markers. decay hyper-parameter. Default values c(0, 10^(-1:-5)). size hyper-parameter. Default values seq(1, 10, 2). times number times internal cross-validation performed. Default 100. test.size size test data. Default 0.2 (20 percent). xval n-cross validation. Default 5. fun function used summarise xval macro F1 matrices. seed optional random number generator seed. verbose logical defining whether progress bar displayed. ... Additional parameters passed nnet package nnet.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/nnetOptimisation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"nnet parameter optimisation — nnetOptimisation","text":"instance class \"GenRegRes\".","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/nnetOptimisation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"nnet parameter optimisation — nnetOptimisation","text":"Note performance scores precision, recall (macro) F1 calculated, NA values replaced 0. decision motivated fact class either NA precision recall result NA F1 score , eventually, NA macro F1 (.e. mean(F1)). Replacing NAs 0s leads F1 values 0 reduced yet defined final macro F1 score.","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/reference/nnetOptimisation.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"nnet parameter optimisation — nnetOptimisation","text":"Laurent Gatto","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/orderGoAnnotations.html","id":null,"dir":"Reference","previous_headings":"","what":"Orders annotation information — orderGoAnnotations","title":"Orders annotation information — orderGoAnnotations","text":"given matrix annotation information, function returns information ordered according best fit data.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/orderGoAnnotations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Orders annotation information — orderGoAnnotations","text":"","code":"orderGoAnnotations(   object,   fcol = \"GOAnnotations\",   k = 1:5,   n = 5,   p = 1/3,   verbose = TRUE,   seed )"},{"path":"https://lgatto.github.io/pRoloc/reference/orderGoAnnotations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Orders annotation information — orderGoAnnotations","text":"object instance class MSnSet. fcol name annotations matrix. Default GOAnnotations. k number clusters test. Default k = 1:5 n minimum number proteins per component cluster. p normalisation factor, per k tested verbose logical indicating progress bar displayed. Default TRUE. seed optional random number generation seed.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/orderGoAnnotations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Orders annotation information — orderGoAnnotations","text":"updated MSnSet containing newly ordered fcol matrix.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/orderGoAnnotations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Orders annotation information — orderGoAnnotations","text":"typically many protein/annotation sets may fit data order protein sets best fit .e. cluster tightness, computing mean normalised Euclidean distance instances per protein set. protein set .e. proteins labelled specified term/information criteria, find best k cluster components set (default testk = 1:5) according minimum mean normalised pairwise Euclidean distance component clusters. (Note: testing k components found less n proteins components included k reduced 1). component cluster normalised N^p (N total number proteins per component, p power). Hueristally, p = 1/3 normalising N^1/3 found optimum normalisation factor. Candidates matrix ordered according lowest mean normalised pairwise Euclidean distance expect high density, tight clusters smallest mean normalised distance. function wrapper running clustDist, getNormDist, see \"Annotating spatial proteomics data\" vignette details.","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/reference/orderGoAnnotations.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Orders annotation information — orderGoAnnotations","text":"Lisa M Breckels","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/orgQuants.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns organelle-specific quantile scores — orgQuants","title":"Returns organelle-specific quantile scores — orgQuants","text":"function produces organelle-specific quantiles corresponding given classification scores.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/orgQuants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns organelle-specific quantile scores — orgQuants","text":"","code":"orgQuants(object, fcol, scol, mcol = \"markers\", t, verbose = TRUE)"},{"path":"https://lgatto.github.io/pRoloc/reference/orgQuants.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns organelle-specific quantile scores — orgQuants","text":"object instance class \"MSnSet\". fcol name prediction column featureData slot. scol name prediction score column featureData slot. missing, created pasting '.scores' fcol. mcol name column containing training data featureData slot. Default markers. t quantile threshold. verbose TRUE, calculated threholds printed.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/orgQuants.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns organelle-specific quantile scores — orgQuants","text":"named vector organelle thresholds.","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/reference/orgQuants.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Returns organelle-specific quantile scores — orgQuants","text":"Lisa Breckels","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/orgQuants.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns organelle-specific quantile scores — orgQuants","text":"","code":"library(\"pRolocdata\") data(dunkley2006) res <- svmClassification(dunkley2006, fcol = \"pd.markers\",                          sigma = 0.1, cost = 0.5) #> [1] \"pd.markers\" ## 50% top predictions per class ts <- orgQuants(res, fcol = \"svm\", t = .5) #>      ER lumen   ER membrane         Golgi Mitochondrion            PM  #>     0.3225638     0.8453501     0.7771339     0.7448942     0.7232983  #>       Plastid      Ribosome           TGN       vacuole  #>     0.7745416     0.5676572     0.5321969     0.5674309  getPredictions(res, fcol = \"svm\", t = ts) #> ans #>      ER lumen   ER membrane         Golgi Mitochondrion            PM  #>            15           117            65            78            85  #>       Plastid      Ribosome           TGN       unknown       vacuole  #>            36            40            15           212            26  #> MSnSet (storageMode: lockedEnvironment) #> assayData: 689 features, 16 samples  #>   element names: exprs  #> protocolData: none #> phenoData #>   sampleNames: M1F1A M1F4A ... M2F11B (16 total) #>   varLabels: membrane.prep fraction replicate #>   varMetadata: labelDescription #> featureData #>   featureNames: AT1G09210 AT1G21750 ... AT4G39080 (689 total) #>   fvarLabels: assigned evidence ... svm.pred (11 total) #>   fvarMetadata: labelDescription #> experimentData: use 'experimentData(object)' #>   pubMedIds: 16618929  #> Annotation:   #> - - - Processing information - - - #> Loaded on Thu Jul 16 22:53:08 2015.  #> Normalised to sum of intensities.  #> Added markers from  'mrk' marker vector. Thu Jul 16 22:53:08 2015  #> Performed svm prediction (cost=0.5 sigma=0.1) Sat Nov 23 16:04:26 2024  #> Added svm predictions according to thresholds: ER lumen = 0.32, ER membrane = 0.85, Golgi = 0.78, Mitochondrion = 0.74, PM = 0.72, Plastid = 0.77, Ribosome = 0.57, TGN = 0.53, vacuole = 0.57 Sat Nov 23 16:04:26 2024  #>  MSnbase version: 1.17.12"},{"path":"https://lgatto.github.io/pRoloc/reference/pRolocmarkers.html","id":null,"dir":"Reference","previous_headings":"","what":"Organelle markers — pRolocmarkers","title":"Organelle markers — pRolocmarkers","text":"function retrieves list organelle markers , species provided, prints description available marker sets. markers can added MSnSet using addMarkers function. Several marker version provided (see Details additional information).","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/pRolocmarkers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Organelle markers — pRolocmarkers","text":"","code":"pRolocmarkers(species, version = \"2\")"},{"path":"https://lgatto.github.io/pRoloc/reference/pRolocmarkers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Organelle markers — pRolocmarkers","text":"species character(1) defining species interest. reference species markers, just species e.g. \"hsap\". published marker sets species author name e.g. \"hsap_geladaki\". version character(1) defining marker version. Default \"2\".","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/pRolocmarkers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Organelle markers — pRolocmarkers","text":"Prints description available marker lists species     missing named character organelle markers.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/pRolocmarkers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Organelle markers — pRolocmarkers","text":"Version 1 markers contributed various members Cambridge Centre Proteomics, particular Dr Dan Nightingale yeast, Dr Andy Christoforou Dr Claire Mulvey human, Dr Arnoud Groen Arabodopsis Dr Claire Mulvey mouse. addition, original (curated) markers pRolocdata datasets extracted (see pRolocdata details references).  Curation involved verification publicly available subcellular localisation annotation based curators knowledge organelles/proteins considered tracing original statement literature. Version 2 markers (current default) updated Charlotte Hutchings Cambridge Centre Proteomics. Reference species marker sets version 1 minor corrections updated naming system. Version 2 also contains additional marker sets spatial proteomics publications. References source publications provided : Geladaki, ., Britovsek, N.K., Breckels, L.M., Smith, T.S., Vennard,    O.L., Mulvey, C.M., Crook, O.M., Gatto, L. Lilley, K.S. (2019)    Combining LOPIT differential ultracentrifugation high-resolution    spatial proteomics.  Nature Communications. 10    (1). doi:10.1038/s41467-018-08191-w Christopher, J.., Breckels, L.M., Crook, O.M., Vazquez–Chantada, M.,   Barratt, D. Lilley, K.S. (2024) Global proteomics indicates   subcellular-specific anti-ferroptotic responses ionizing   radiation.p.2024.09.12.611851. doi:10.1101/2024.09.12.611851 Itzhak, D.N., Tyanova, S., Cox, J. Borner, G.H. (2016) Global,   quantitative dynamic mapping protein subcellular localization.   eLife. 5. doi:10.7554/elife.16950 Villanueva, E., Smith, T., Pizzinga, M., Elzek, M., Queiroz, R.M.L.,   Harvey, R.F., Breckels, L.M., Crook, O.M., Monti, M., Dezi, V., Willis,   .E. Lilley, K.S. (2023) System-wide analysis RNA protein   subcellular localization dynamics. Nature Methods. 1-12.   doi:10.1038/s41592-023-02101-9 Christoforou, ., Mulvey, C.M., Breckels, L.M., Geladaki, ., Hurrell,   T., Hayward, P.C., Naake, T., Gatto, L., Viner, R., Arias, .M. Lilley,   K.S. (2016) draft map mouse pluripotent stem cell spatial   proteome. Nature Communications. 7 (1). doi:10.1038/ncomms9992 Barylyuk, K., Koreny, L., Ke, H., Butterworth, S., Crook, O.M.,   Lassadi, ., Gupta, V., Tromer, E., Mourier, T., Stevens, T.J., Breckels,   L.M., Pain, ., Lilley, K.S. Waller, R.F. (2020) Comprehensive   Subcellular Atlas Toxoplasma Proteome via hyperLOPIT Provides   Spatial Context Protein Functions. Cell Host Microbe. 28 (5),   752-766.e9. doi:10.1016/j.chom.2020.09.011 Moloney, N.M., Barylyuk, K., Tromer, E., Crook, O.M., Breckels, L.M.,   Lilley, K.S., Waller, R.F. MacGregor, P. (2023) Mapping diversity   African trypanosomes using high resolution spatial proteomics. Nature   Communications. 14 (1), 4401. doi:10.1038/s41467-023-40125-z Note: markers provided starting point generate reliable sets organelle markers still need verified new data light quantitative data study conditions.","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/reference/pRolocmarkers.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Organelle markers — pRolocmarkers","text":"Laurent Gatto","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/pRolocmarkers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Organelle markers — pRolocmarkers","text":"","code":"pRolocmarkers() #> 14 marker lists (version 2) available: #> Arabidopsis thaliana [atha]: #>  Ids: TAIR, 543 markers #> Drosophila melanogaster [dmel]: #>  Ids: Uniprot, 179 markers #> Gallus gallus [ggal]: #>  Ids: IPI, 102 markers #> Homo sapiens [hsap]: #>  Ids: Uniprot, 872 markers #> Homo sapiens [hsap_christopher]: #>  Ids: Uniprot, 1509 markers #> Homo sapiens [hsap_geladaki]: #>  Ids: Uniprot, 579 markers #> Homo sapiens [hsap_itzhak]: #>  Ids: Uniprot, 1076 markers #> Homo sapiens [hsap_villaneuva]: #>  Ids: Uniprot, 682 markers #> Mus musculus [mmus]: #>  Ids: Uniprot, 937 markers #> Mus musculus [mmus_christoforou]: #>  Ids: Uniprot, 922 markers #> Saccharomyces cerevisiae [scer_sgd]: #>  Ids: SGD, 259 markers #> Saccharomyces cerevisiae [scer_uniprot]: #>  Ids: Uniprot, 259 markers #> Toxoplasma gondii [toxo_barylyuk]: #>  Ids: ToxoDB gene identifier, 718 markers #> Trypanosoma brucei [tryp_moloney]: #>  Ids: TriTrypDB gene identifier, 891 markers pRolocmarkers(\"hsap\") #>               P08865               P0CW22               P15880  #>       \"40S Ribosome\"       \"40S Ribosome\"       \"40S Ribosome\"  #>               P22090               P23396               P25398  #>       \"40S Ribosome\"       \"40S Ribosome\"       \"40S Ribosome\"  #>               P39019               P42677               P46781  #>       \"40S Ribosome\"       \"40S Ribosome\"       \"40S Ribosome\"  #>               P46782               P46783               P60866  #>       \"40S Ribosome\"       \"40S Ribosome\"       \"40S Ribosome\"  #>               P61247               P62081               P62241  #>       \"40S Ribosome\"       \"40S Ribosome\"       \"40S Ribosome\"  #>               P62244               P62249               P62263  #>       \"40S Ribosome\"       \"40S Ribosome\"       \"40S Ribosome\"  #>               P62266               P62269               P62273  #>       \"40S Ribosome\"       \"40S Ribosome\"       \"40S Ribosome\"  #>               P62277               P62280               P62701  #>       \"40S Ribosome\"       \"40S Ribosome\"       \"40S Ribosome\"  #>               P62753               P62841             P62847-2  #>       \"40S Ribosome\"       \"40S Ribosome\"       \"40S Ribosome\"  #>               P62851               P62854               P62857  #>       \"40S Ribosome\"       \"40S Ribosome\"       \"40S Ribosome\"  #>               P62861               P62979               P63220  #>       \"40S Ribosome\"       \"40S Ribosome\"       \"40S Ribosome\"  #>               P05386               P05387               P05388  #>       \"60S Ribosome\"       \"60S Ribosome\"       \"60S Ribosome\"  #>               P18077               P18124               P18621  #>       \"60S Ribosome\"       \"60S Ribosome\"       \"60S Ribosome\"  #>               P26373               P27635               P30050  #>       \"60S Ribosome\"       \"60S Ribosome\"       \"60S Ribosome\"  #>               P32969               P35268               P36578  #>       \"60S Ribosome\"       \"60S Ribosome\"       \"60S Ribosome\"  #>               P39023               P40429               P42766  #>       \"60S Ribosome\"       \"60S Ribosome\"       \"60S Ribosome\"  #>               P46776               P46777               P46778  #>       \"60S Ribosome\"       \"60S Ribosome\"       \"60S Ribosome\"  #>               P46779               P47914               P49207  #>       \"60S Ribosome\"       \"60S Ribosome\"       \"60S Ribosome\"  #>               P50914               P61254               P61313  #>       \"60S Ribosome\"       \"60S Ribosome\"       \"60S Ribosome\"  #>               P61353               P61513               P61927  #>       \"60S Ribosome\"       \"60S Ribosome\"       \"60S Ribosome\"  #>               P62424               P62750               P62829  #>       \"60S Ribosome\"       \"60S Ribosome\"       \"60S Ribosome\"  #>               P62888               P62899               P62906  #>       \"60S Ribosome\"       \"60S Ribosome\"       \"60S Ribosome\"  #>               P62910             P62913-2               P62917  #>       \"60S Ribosome\"       \"60S Ribosome\"       \"60S Ribosome\"  #>               P62987               P63173               P83731  #>       \"60S Ribosome\"       \"60S Ribosome\"       \"60S Ribosome\"  #>               P83881               P84098               Q02543  #>       \"60S Ribosome\"       \"60S Ribosome\"       \"60S Ribosome\"  #>               Q02878               Q07020               Q969Q0  #>       \"60S Ribosome\"       \"60S Ribosome\"       \"60S Ribosome\"  #>               Q9Y3U8               Q01518               P13796  #>       \"60S Ribosome\" \"Actin Cytoskeleton\" \"Actin Cytoskeleton\"  #>               P63261               P28289               O15143  #> \"Actin Cytoskeleton\" \"Actin Cytoskeleton\" \"Actin Cytoskeleton\"  #>               O15144               O15145               O15511  #> \"Actin Cytoskeleton\" \"Actin Cytoskeleton\" \"Actin Cytoskeleton\"  #>               O75369             O75369-8               P06753  #> \"Actin Cytoskeleton\" \"Actin Cytoskeleton\" \"Actin Cytoskeleton\"  #>             P06753-2             P06753-3             P06753-5  #> \"Actin Cytoskeleton\" \"Actin Cytoskeleton\" \"Actin Cytoskeleton\"  #>               P09493            P09493-10             P09493-5  #> \"Actin Cytoskeleton\" \"Actin Cytoskeleton\" \"Actin Cytoskeleton\"  #>               P12814               P23528               P47755  #> \"Actin Cytoskeleton\" \"Actin Cytoskeleton\" \"Actin Cytoskeleton\"  #>               P47756             P47756-2               P52907  #> \"Actin Cytoskeleton\" \"Actin Cytoskeleton\" \"Actin Cytoskeleton\"  #>               P59998               P60709             P60981-2  #> \"Actin Cytoskeleton\" \"Actin Cytoskeleton\" \"Actin Cytoskeleton\"  #>               P61158               P61160               P67936  #> \"Actin Cytoskeleton\" \"Actin Cytoskeleton\" \"Actin Cytoskeleton\"  #>               P68032               Q16658               Q562R1  #> \"Actin Cytoskeleton\" \"Actin Cytoskeleton\" \"Actin Cytoskeleton\"  #>               Q92747               Q9BPX5               Q9BR76  #> \"Actin Cytoskeleton\" \"Actin Cytoskeleton\" \"Actin Cytoskeleton\"  #>               Q9NYL9               Q9NZ32               Q9NZR1  #> \"Actin Cytoskeleton\" \"Actin Cytoskeleton\" \"Actin Cytoskeleton\"  #>             Q9P1U1-3               Q9Y281               Q9Y4G6  #> \"Actin Cytoskeleton\" \"Actin Cytoskeleton\" \"Actin Cytoskeleton\"  #>             P06753-6               Q14847               P07737  #> \"Actin Cytoskeleton\" \"Actin Cytoskeleton\" \"Actin Cytoskeleton\"  #>               Q9UJW0               P34932               P22102  #> \"Actin Cytoskeleton\"            \"Cytosol\"            \"Cytosol\"  #>               Q8TCU6               O60841               Q12882  #>            \"Cytosol\"            \"Cytosol\"            \"Cytosol\"  #>             P49915-2               Q04446               Q6XQN6  #>            \"Cytosol\"            \"Cytosol\"            \"Cytosol\"  #>               O43847             Q06210-2               Q3KQV9  #>            \"Cytosol\"            \"Cytosol\"            \"Cytosol\"  #>               O14841               P19971               Q16543  #>            \"Cytosol\"            \"Cytosol\"            \"Cytosol\"  #>               P36871               Q9Y617               P60891  #>            \"Cytosol\"            \"Cytosol\"            \"Cytosol\"  #>               P16152               Q9HAB8               Q96KP4  #>            \"Cytosol\"            \"Cytosol\"            \"Cytosol\"  #>               P32119               Q9NR45               P19623  #>            \"Cytosol\"            \"Cytosol\"            \"Cytosol\"  #>               P53602               O43765               P29218  #>            \"Cytosol\"            \"Cytosol\"            \"Cytosol\"  #>               O95336               P16930             P08243-2  #>            \"Cytosol\"            \"Cytosol\"            \"Cytosol\"  #>               P34949               Q9HA64               P49593  #>            \"Cytosol\"            \"Cytosol\"            \"Cytosol\"  #>               P61081               P00492               Q9P2T1  #>            \"Cytosol\"            \"Cytosol\"            \"Cytosol\"  #>               Q15274               O95394               Q9H773  #>            \"Cytosol\"            \"Cytosol\"            \"Cytosol\"  #>               P29762               Q6IA69               Q14376  #>            \"Cytosol\"            \"Cytosol\"            \"Cytosol\"  #>               P09467               Q96AT9               Q13630  #>            \"Cytosol\"            \"Cytosol\"            \"Cytosol\"  #>               Q9H8S9               Q96BN8               P37837  #>            \"Cytosol\"            \"Cytosol\"            \"Cytosol\"  #>               P48637               Q9NR50               O75822  #>            \"Cytosol\"            \"Cytosol\"            \"Cytosol\"  #>               A0AVT1             P15170-2               P31153  #>            \"Cytosol\"            \"Cytosol\"            \"Cytosol\"  #>               Q04760               P50225               P18440  #>            \"Cytosol\"            \"Cytosol\"            \"Cytosol\"  #>               P51570               Q9BRA2               P50452  #>            \"Cytosol\"            \"Cytosol\"            \"Cytosol\"  #>               A6NDG6               Q9NRX4               Q9BQC3  #>            \"Cytosol\"            \"Cytosol\"            \"Cytosol\"  #>               O14732               Q9H2P9               O43175  #>            \"Cytosol\"            \"Cytosol\"            \"Cytosol\"  #>               Q9NT62               P52788               P07741  #>            \"Cytosol\"            \"Cytosol\"            \"Cytosol\"  #>               P49588               P09488               P49591  #>            \"Cytosol\"            \"Cytosol\"            \"Cytosol\"  #>               P49589               Q96C23               P49902  #>            \"Cytosol\"            \"Cytosol\"            \"Cytosol\"  #>               Q7L5D6               P30711               Q9UPN7  #>            \"Cytosol\"            \"Cytosol\"            \"Cytosol\"  #>             Q9NYU2-2               Q5JRA6               P13667  #>                 \"ER\"                 \"ER\"                 \"ER\"  #>               P30101               P07237               P16615  #>                 \"ER\"                 \"ER\"                 \"ER\"  #>               P04843               P16435               P08240  #>                 \"ER\"                 \"ER\"                 \"ER\"  #>               O60568               P27824               Q12797  #>                 \"ER\"                 \"ER\"                 \"ER\"  #>               Q8NBJ5             Q15084-3               Q9UGP8  #>                 \"ER\"                 \"ER\"                 \"ER\"  #>               P48449             Q13438-4               Q02809  #>                 \"ER\"                 \"ER\"                 \"ER\"  #>               O95479             Q9H0X9-2               Q13724  #>                 \"ER\"                 \"ER\"                 \"ER\"  #>             O15320-8               Q14571               O75477  #>                 \"ER\"                 \"ER\"                 \"ER\"  #>               Q9BS26               Q7Z2K6             P14314-2  #>                 \"ER\"                 \"ER\"                 \"ER\"  #>               P30040               P50454               Q8NBS9  #>                 \"ER\"                 \"ER\"                 \"ER\"  #>               Q9Y4P3               Q9BPW9             Q9BZQ6-2  #>                 \"ER\"                 \"ER\"                 \"ER\"  #>               P07099               O15269               Q16850  #>                 \"ER\"                 \"ER\"                 \"ER\"  #>               O15270               Q14554             Q969N2-5  #>                 \"ER\"                 \"ER\"                 \"ER\"  #>               Q96JJ7             Q969V3-2               Q92611  #>                 \"ER\"                 \"ER\"                 \"ER\"  #>               Q6UWW8               Q6P1M0               P39656  #>                 \"ER\"                 \"ER\"                 \"ER\"  #>               Q9BT09               Q96S52               O00469  #>                 \"ER\"                 \"ER\"                 \"ER\"  #>               Q86UL3               Q15293               O95302  #>                 \"ER\"                 \"ER\"                 \"ER\"  #>               Q96DZ1               Q15005               Q643R3  #>                 \"ER\"                 \"ER\"                 \"ER\"  #>               Q9H3N1               Q8NBM4               O43292  #>                 \"ER\"                 \"ER\"                 \"ER\"  #>               Q9H488               O95881             Q9BU23-2  #>                 \"ER\"                 \"ER\"                 \"ER\"  #>               Q6IAN0               Q8TC12               Q9UBM7  #>                 \"ER\"                 \"ER\"                 \"ER\"  #>               P61619               Q9NZ01               P26885  #>                 \"ER\"                 \"ER\"                 \"ER\"  #>             Q9H6R6-2               Q99442               P60468  #>                 \"ER\"                 \"ER\"                 \"ER\"  #>               Q92604               O00400             Q86TM6-2  #>                 \"ER\"                 \"ER\"                 \"ER\"  #>               P61009               Q9P0I2             Q15011-3  #>                 \"ER\"                 \"ER\"                 \"ER\"  #>             Q9BV94-2               Q9UNW1               P43307  #>                 \"ER\"                 \"ER\"                 \"ER\"  #>             O75298-3               Q8N5M9               Q96HR9  #>                 \"ER\"                 \"ER\"                 \"ER\"  #>               Q96E22               O75845               Q9P2X0  #>                 \"ER\"                 \"ER\"                 \"ER\"  #>               Q6Y288               Q9BQB6               Q8IYK4  #>                 \"ER\"                 \"ER\"                 \"ER\"  #>               Q7Z4H8               O15460               O95470  #>                 \"ER\"                 \"ER\"                 \"ER\"  #>               Q2TAA5               Q8TCJ2               O60476  #>                 \"ER\"                 \"ER\"              \"Golgi\"  #>               O75063               P26572               Q10469  #>              \"Golgi\"              \"Golgi\"              \"Golgi\"  #>               Q10472               Q14789             Q14789-2  #>              \"Golgi\"              \"Golgi\"              \"Golgi\"  #>             Q14789-4               Q16706               Q5SRI9  #>              \"Golgi\"              \"Golgi\"              \"Golgi\"  #>               Q7LGA3               Q8TBA6             Q8TBA6-2  #>              \"Golgi\"              \"Golgi\"              \"Golgi\"  #>               Q9NX62               Q9NXS2               Q9NY97  #>              \"Golgi\"              \"Golgi\"              \"Golgi\"  #>             Q9NY97-2               Q9P2E5             Q495W5-2  #>              \"Golgi\"              \"Golgi\"              \"Golgi\"  #>               A6NKF9               Q9BYC5               O94766  #>              \"Golgi\"              \"Golgi\"              \"Golgi\"  #>               P49641               Q8NBZ7               Q8NEW0  #>              \"Golgi\"              \"Golgi\"              \"Golgi\"  #>               O14653             O14653-3               P22083  #>              \"Golgi\"              \"Golgi\"              \"Golgi\"  #>               Q13948               Q86SF2               P33908  #>              \"Golgi\"              \"Golgi\"              \"Golgi\"  #>               Q8NCL4               O00461               Q8N4A0  #>              \"Golgi\"              \"Golgi\"              \"Golgi\"  #>               O00115             O00115-2               O00462  #>           \"Lysosome\"           \"Lysosome\"           \"Lysosome\"  #>               O00754             P04062-4               P04066  #>           \"Lysosome\"           \"Lysosome\"           \"Lysosome\"  #>               P06865               P07339               P07602  #>           \"Lysosome\"           \"Lysosome\"           \"Lysosome\"  #>               P07686               P07858               P09668  #>           \"Lysosome\"           \"Lysosome\"           \"Lysosome\"  #>               P10253               P10619             P10619-2  #>           \"Lysosome\"           \"Lysosome\"           \"Lysosome\"  #>               P15586               P17050               P34059  #>           \"Lysosome\"           \"Lysosome\"           \"Lysosome\"  #>               P38571             P38571-2               P43234  #>           \"Lysosome\"           \"Lysosome\"           \"Lysosome\"  #>               Q13571               Q14108               Q6ZP29  #>           \"Lysosome\"           \"Lysosome\"           \"Lysosome\"  #>             Q6ZP29-2               Q8NBJ9               Q9NUN5  #>           \"Lysosome\"           \"Lysosome\"           \"Lysosome\"  #>             Q9NUN5-3               Q9UBX1               Q9UHL4  #>           \"Lysosome\"           \"Lysosome\"           \"Lysosome\"  #>             Q8WWB7-2               O14773               Q9Y646  #>           \"Lysosome\"           \"Lysosome\"           \"Lysosome\"  #>               P35475               Q8NCC3             Q9HAT2-2  #>           \"Lysosome\"           \"Lysosome\"           \"Lysosome\"  #>             Q02083-2               Q01459               Q96RQ9  #>           \"Lysosome\"           \"Lysosome\"           \"Lysosome\"  #>             Q68CP4-2               P15289               P54802  #>           \"Lysosome\"           \"Lysosome\"           \"Lysosome\"  #>               P40939               Q13423               P43304  #>      \"Mitochondrion\"      \"Mitochondrion\"      \"Mitochondrion\"  #>             O60313-2               Q99798               Q3SY69  #>      \"Mitochondrion\"      \"Mitochondrion\"      \"Mitochondrion\"  #>             Q12931-2               Q02218               Q5JTZ9  #>      \"Mitochondrion\"      \"Mitochondrion\"      \"Mitochondrion\"  #>             P28331-4               Q5JRX3               Q9Y6N5  #>      \"Mitochondrion\"      \"Mitochondrion\"      \"Mitochondrion\"  #>               P49411               P00367               O94826  #>      \"Mitochondrion\"      \"Mitochondrion\"      \"Mitochondrion\"  #>               O95202               P09622               Q16822  #>      \"Mitochondrion\"      \"Mitochondrion\"      \"Mitochondrion\"  #>               P31930               P23786               P31040  #>      \"Mitochondrion\"      \"Mitochondrion\"      \"Mitochondrion\"  #>               P23368               P24752               P49448  #>      \"Mitochondrion\"      \"Mitochondrion\"      \"Mitochondrion\"  #>               P05091             P56181-2               P22695  #>      \"Mitochondrion\"      \"Mitochondrion\"      \"Mitochondrion\"  #>               Q10713               O43615               P22033  #>      \"Mitochondrion\"      \"Mitochondrion\"      \"Mitochondrion\"  #>               Q6NUK1             P49821-2             Q02252-2  #>      \"Mitochondrion\"      \"Mitochondrion\"      \"Mitochondrion\"  #>               P30837               P13804               P42765  #>      \"Mitochondrion\"      \"Mitochondrion\"      \"Mitochondrion\"  #>               O75390               P10515               P22570  #>      \"Mitochondrion\"      \"Mitochondrion\"      \"Mitochondrion\"  #>             Q96CM8-3               P12694               P30084  #>      \"Mitochondrion\"      \"Mitochondrion\"      \"Mitochondrion\"  #>               O75306               P55809               O00411  #>      \"Mitochondrion\"      \"Mitochondrion\"      \"Mitochondrion\"  #>               P50213             Q00325-2               O75439  #>      \"Mitochondrion\"      \"Mitochondrion\"      \"Mitochondrion\"  #>               O00330               P04181               P30405  #>      \"Mitochondrion\"      \"Mitochondrion\"      \"Mitochondrion\"  #>               P26440             Q9Y305-2               P11182  #>      \"Mitochondrion\"      \"Mitochondrion\"      \"Mitochondrion\"  #>               Q53H12               O75947               O95299  #>      \"Mitochondrion\"      \"Mitochondrion\"      \"Mitochondrion\"  #>               P53007               P22830               P16219  #>      \"Mitochondrion\"      \"Mitochondrion\"      \"Mitochondrion\"  #>               Q4G0N4               P13995               Q16134  #>      \"Mitochondrion\"      \"Mitochondrion\"      \"Mitochondrion\"  #>               P30038               P36542               O96008  #>      \"Mitochondrion\"      \"Mitochondrion\"      \"Mitochondrion\"  #>               P30042               P53597               Q02127  #>      \"Mitochondrion\"      \"Mitochondrion\"      \"Mitochondrion\"  #>               Q3ZCQ8               Q15118               P19404  #>      \"Mitochondrion\"      \"Mitochondrion\"      \"Mitochondrion\"  #>               P47985               O75027               O43837  #>      \"Mitochondrion\"      \"Mitochondrion\"      \"Mitochondrion\"  #>               Q8N0X4               Q6NVY1               P46199  #>      \"Mitochondrion\"      \"Mitochondrion\"      \"Mitochondrion\"  #>               P43897               P13073               P45954  #>      \"Mitochondrion\"      \"Mitochondrion\"      \"Mitochondrion\"  #>               O15382               P51649               P27144  #>      \"Mitochondrion\"      \"Mitochondrion\"      \"Mitochondrion\"  #>               O00217               P32322               P51553  #>      \"Mitochondrion\"      \"Mitochondrion\"      \"Mitochondrion\"  #>               P42126               P08574               O43181  #>      \"Mitochondrion\"      \"Mitochondrion\"      \"Mitochondrion\"  #>             Q15070-2               O75208               P62072  #>      \"Mitochondrion\"      \"Mitochondrion\"      \"Mitochondrion\"  #>               P18859               O43716               O60830  #>      \"Mitochondrion\"      \"Mitochondrion\"      \"Mitochondrion\"  #>               O75251               P10606               O75964  #>      \"Mitochondrion\"      \"Mitochondrion\"      \"Mitochondrion\"  #>               O43678               O14925               P00403  #>      \"Mitochondrion\"      \"Mitochondrion\"      \"Mitochondrion\"  #>               O75380               Q9Y5L4             O95169-3  #>      \"Mitochondrion\"      \"Mitochondrion\"      \"Mitochondrion\"  #>               Q9Y5J9               P30049               P09669  #>      \"Mitochondrion\"      \"Mitochondrion\"      \"Mitochondrion\"  #>               Q9Y5J7               Q99766               P15954  #>      \"Mitochondrion\"      \"Mitochondrion\"      \"Mitochondrion\"  #>               P10109               O95563               P23434  #>      \"Mitochondrion\"      \"Mitochondrion\"      \"Mitochondrion\"  #>               O95167               O43676             Q8IUX1-4  #>      \"Mitochondrion\"      \"Mitochondrion\"      \"Mitochondrion\"  #>               P0DJ07             O14521-2             O00142-2  #>      \"Mitochondrion\"      \"Mitochondrion\"      \"Mitochondrion\"  #>               Q9UKU7               Q8NI60               Q15031  #>      \"Mitochondrion\"      \"Mitochondrion\"      \"Mitochondrion\"  #>               Q9P0J1               Q9NUB1               O75127  #>      \"Mitochondrion\"      \"Mitochondrion\"      \"Mitochondrion\"  #>               O43819               P07919               O75879  #>      \"Mitochondrion\"      \"Mitochondrion\"      \"Mitochondrion\"  #>               O14874               Q16740               Q5HYK3  #>      \"Mitochondrion\"      \"Mitochondrion\"      \"Mitochondrion\"  #>               Q15120               Q5T160               P46013  #>      \"Mitochondrion\"      \"Mitochondrion\"            \"Nucleus\"  #>               P02545               Q14683               P20700  #>            \"Nucleus\"            \"Nucleus\"            \"Nucleus\"  #>               P11388               A6NHR9               Q9UQE7  #>            \"Nucleus\"            \"Nucleus\"            \"Nucleus\"  #>               O95347               Q9NTJ3               Q03252  #>            \"Nucleus\"            \"Nucleus\"            \"Nucleus\"  #>               O60264               Q9NRL2               Q9NTI5  #>            \"Nucleus\"            \"Nucleus\"            \"Nucleus\"  #>               Q5UIP0               Q29RF7               Q9Y5B9  #>            \"Nucleus\"            \"Nucleus\"            \"Nucleus\"  #>               Q9NR30               Q9GZR7               P24928  #>            \"Nucleus\"            \"Nucleus\"            \"Nucleus\"  #>               Q8N1F7               Q8NI27             P52948-5  #>            \"Nucleus\"            \"Nucleus\"            \"Nucleus\"  #>               O94776               Q92922               P11387  #>            \"Nucleus\"            \"Nucleus\"            \"Nucleus\"  #>               Q7LBC6               P16401               P42167  #>            \"Nucleus\"            \"Nucleus\"            \"Nucleus\"  #>               O95239               Q5SSJ5               Q9Y2U8  #>            \"Nucleus\"            \"Nucleus\"            \"Nucleus\"  #>               O60934               Q9H0A0               P10412  #>            \"Nucleus\"            \"Nucleus\"            \"Nucleus\"  #>               P43246               P16402             Q15424-4  #>            \"Nucleus\"            \"Nucleus\"            \"Nucleus\"  #>               Q08945               Q9NXV6               Q01826  #>            \"Nucleus\"            \"Nucleus\"            \"Nucleus\"  #>             P51532-5               P16403               Q8NFC6  #>            \"Nucleus\"            \"Nucleus\"            \"Nucleus\"  #>               P23193               O60341             P42167-2  #>            \"Nucleus\"            \"Nucleus\"            \"Nucleus\"  #>               Q86YP4               P42695               Q96ST3  #>            \"Nucleus\"            \"Nucleus\"            \"Nucleus\"  #>               O14981               O00567             P35251-2  #>            \"Nucleus\"            \"Nucleus\"            \"Nucleus\"  #>               Q92522               Q8WXF1               Q8WXI9  #>            \"Nucleus\"            \"Nucleus\"            \"Nucleus\"  #>               Q15059               Q5QJE6               P49711  #>            \"Nucleus\"            \"Nucleus\"            \"Nucleus\"  #>               O75694               Q96FV9               O60216  #>            \"Nucleus\"            \"Nucleus\"            \"Nucleus\"  #>               P35249               P35269               P62805  #>            \"Nucleus\"            \"Nucleus\"            \"Nucleus\"  #>               Q9NX58               Q15554               Q14807  #>            \"Nucleus\"            \"Nucleus\"            \"Nucleus\"  #>             Q969G3-2             O43684-2               Q13573  #>            \"Nucleus\"            \"Nucleus\"            \"Nucleus\"  #>               P85037               Q96SB8               P07305  #>            \"Nucleus\"            \"Nucleus\"            \"Nucleus\"  #>               O14647               P84243               P68431  #>            \"Nucleus\"            \"Nucleus\"            \"Nucleus\"  #>               P25490             Q03164-2               P35250  #>            \"Nucleus\"            \"Nucleus\"            \"Nucleus\"  #>               Q13769               Q9Y3T9             Q92925-3  #>            \"Nucleus\"            \"Nucleus\"            \"Nucleus\"  #>               P20585               Q9H8H0               P40937  #>            \"Nucleus\"            \"Nucleus\"            \"Nucleus\"  #>               Q13111               P40938               P18887  #>            \"Nucleus\"            \"Nucleus\"            \"Nucleus\"  #>             Q12824-2               P13984               Q9H9Y6  #>            \"Nucleus\"            \"Nucleus\"            \"Nucleus\"  #>               O43818               O15525             Q9Y3Y2-4  #>            \"Nucleus\"            \"Nucleus\"            \"Nucleus\"  #>             Q76FK4-4               O15047               Q13415  #>            \"Nucleus\"            \"Nucleus\"            \"Nucleus\"  #>               P0C0S5               Q8IXM2               Q13416  #>            \"Nucleus\"            \"Nucleus\"            \"Nucleus\"  #>               Q9UBD5             Q9P0W2-3               P52701  #>            \"Nucleus\"            \"Nucleus\"            \"Nucleus\"  #>               O75475               O60885               P26583  #>            \"Nucleus\"            \"Nucleus\"            \"Nucleus\"  #>               O15347               Q9H7Z6               Q9NVP1  #>            \"Nucleus\"            \"Nucleus\"            \"Nucleus\"  #>               Q9BVJ6               Q9BQ39               O15381  #>            \"Nucleus\"            \"Nucleus\"            \"Nucleus\"  #>               Q969X6               P55769               Q9NV31  #>            \"Nucleus\"            \"Nucleus\"            \"Nucleus\"  #>               Q9NPE3               O00116               O14832  #>            \"Nucleus\"         \"Peroxisome\"         \"Peroxisome\"  #>               O15254               O43808               O43933  #>         \"Peroxisome\"         \"Peroxisome\"         \"Peroxisome\"  #>               O75381             O75381-2               O96011  #>         \"Peroxisome\"         \"Peroxisome\"         \"Peroxisome\"  #>               P09110               P0C024               P28328  #>         \"Peroxisome\"         \"Peroxisome\"         \"Peroxisome\"  #>               P51659               Q08426               Q13608  #>         \"Peroxisome\"         \"Peroxisome\"         \"Peroxisome\"  #>               Q15067             Q15067-2               Q7Z412  #>         \"Peroxisome\"         \"Peroxisome\"         \"Peroxisome\"  #>             Q7Z412-2               Q86WA8               Q8WVX9  #>         \"Peroxisome\"         \"Peroxisome\"         \"Peroxisome\"  #>               Q9BY49               Q9NR77               Q9NUI1  #>         \"Peroxisome\"         \"Peroxisome\"         \"Peroxisome\"  #>               Q9P0Z9               Q9UKG9               Q9Y6I8  #>         \"Peroxisome\"         \"Peroxisome\"         \"Peroxisome\"  #>               O14734               O00161               O14786  #>         \"Peroxisome\"                 \"PM\"                 \"PM\"  #>             O14786-3             O14828-2               O14910  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>               O15031               O15394               O43760  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>             O60241-4               O60449             O60449-3  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>             O60462-4             O60637-3             O75019-2  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>               O75955               O75976               O94856  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>             O94910-2             O95297-2               O95502  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>               P01892               P04216               P05023  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>               P05026               P05106               P05362  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>               P05556             P06213-2             P06756-3  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>               P07204               P07949             P08195-2  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>               P08571             P08575-2               P08582  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>               P08648               P08754               P09543  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>             P10586-2               P11166               P11215  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>             P12318-2               P13164               P13591  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>             P13591-1               P13598               P13612  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>             P14209-3               P14415            P16070-18  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>               P16150             P16284-3               P17301  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>               P17677             P17813-2               P18084  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>               P19022             P19022-2               P19397  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>               P20020             P20020-6               P20138  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>               P20701               P20702               P21589  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>               P22794               P23229             P23634-4  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>               P26010               P26992               P27105  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>             P27701-2             P29323-2               P32004  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>               P32249               P32942               P32970  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>             P33527-4               P35222               P35408  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>             P35613-2               P36383               P38570  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>             P41597-2               P41732             P42857-2  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>             P43250-2               P46939               P48509  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>             P48960-2               P50895               P51674  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>               P54762             P55196-3               P63092  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>             P78552-2               P84095             P98155-2  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>               P98172               Q01650               Q01814  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>               Q03405               Q04941               Q08722  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>               Q12846               Q13449               Q13491  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>             Q13740-2               Q14254               Q14699  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>             Q14982-2               Q15262               Q15722  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>               Q16720             Q6GTX8-3               Q6IA17  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>               Q6UXK5               Q6X4W1               Q7Z2K8  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>               Q7Z3B1             Q7Z403-2               Q7Z6M3  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>             Q8IWK6-3               Q8IX19               Q8IYJ0  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>               Q8N0W4               Q8N2Q7             Q8N8Q9-2  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>               Q8N9M5             Q8NC67-3               Q8NFZ4  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>             Q8NHJ6-2             Q8NHJ6-3               Q8NHL6  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>               Q8TBP5             Q8TCZ2-6               Q92692  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>             Q92823-3               Q92854             Q92859-2  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>             Q96D96-4             Q96F46-2               Q96PE1  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>               Q96S97               Q99569             Q99569-2  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>               Q99571             Q99572-8               Q99795  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>             Q9BY67-5               Q9GZY6               Q9H2W1  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>               Q9H6B4             Q9H6X2-5               Q9H7M9  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>               Q9H813               Q9HAR2               Q9NPR9  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>               Q9NQS5             Q9NT68-2               Q9NW97  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>               Q9NZ94               Q9P121               Q9UBG0  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>             Q9UHW9-3               Q9UIW2             Q9Y219-2  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>             Q9Y287-2             Q9Y2J2-2               Q9Y624  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>               Q9Y639               Q9UIQ6               P78536  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>               P08311               Q9NWQ8               P04839  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>               P14384               P11234               P07333  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>               Q02487               P63218               P30825  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>               Q9NRM0               P41231               P32246  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>               Q9NPG4               Q13433               P98153  #>                 \"PM\"                 \"PM\"                 \"PM\"  #>               P51511               P31641               Q99460  #>                 \"PM\"                 \"PM\"         \"Proteasome\"  #>               Q13200               O43242               P25786  #>         \"Proteasome\"         \"Proteasome\"         \"Proteasome\"  #>               O00232               Q15008               O00231  #>         \"Proteasome\"         \"Proteasome\"         \"Proteasome\"  #>               Q06323               O14818               Q9UNM6  #>         \"Proteasome\"         \"Proteasome\"         \"Proteasome\"  #>               P60900               P55036               P25789  #>         \"Proteasome\"         \"Proteasome\"         \"Proteasome\"  #>               Q9UL46               P20618             P25788-2  #>         \"Proteasome\"         \"Proteasome\"         \"Proteasome\"  #>               P28062               P61289               P25787  #>         \"Proteasome\"         \"Proteasome\"         \"Proteasome\"  #>               P28066               P49720               P49721  #>         \"Proteasome\"         \"Proteasome\"         \"Proteasome\"  #>               P51665               P40306               O75832  #>         \"Proteasome\"         \"Proteasome\"         \"Proteasome\"  #>               P28070               P28072               P48556  #>         \"Proteasome\"         \"Proteasome\"         \"Proteasome\"  #>               P28065               O00487             O95456-2  #>         \"Proteasome\"         \"Proteasome\"         \"Proteasome\"  #>               Q99436             P62195-2               P62191  #>         \"Proteasome\"         \"Proteasome\"         \"Proteasome\"  #>               P43686               P35998  #>         \"Proteasome\"         \"Proteasome\"  table(pRolocmarkers(\"hsap\")) #>  #>       40S Ribosome       60S Ribosome Actin Cytoskeleton            Cytosol  #>                 33                 46                 45                 77  #>                 ER              Golgi           Lysosome      Mitochondrion  #>                 92                 34                 42                134  #>            Nucleus                 PM         Peroxisome         Proteasome  #>                116                190                 27                 36   ## Old markers pRolocmarkers(\"hsap\", version = \"2\")[\"Q9BPW9\"] #> Q9BPW9  #>   \"ER\"  pRolocmarkers(\"hsap\", version = \"1\")[\"Q9BPW9\"] #>                  Q9BPW9  #> \"Endoplasmic Reticulum\""},{"path":"https://lgatto.github.io/pRoloc/reference/perTurboClassification.html","id":null,"dir":"Reference","previous_headings":"","what":"perTurbo classification — perTurboClassification","title":"perTurbo classification — perTurboClassification","text":"Classification using PerTurbo algorithm.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/perTurboClassification.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"perTurbo classification — perTurboClassification","text":"","code":"perTurboClassification(   object,   assessRes,   scores = c(\"prediction\", \"all\", \"none\"),   pRegul,   sigma,   inv,   reg,   fcol = \"markers\" )"},{"path":"https://lgatto.github.io/pRoloc/reference/perTurboClassification.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"perTurbo classification — perTurboClassification","text":"object instance class \"MSnSet\". assessRes instance class \"GenRegRes\", generated svmRegularisation. scores One \"prediction\", \"\" \"none\" report score predicted class , classes none. pRegul assessRes missing, pRegul must provided.  See perTurboOptimisation details. sigma assessRes missing, sigma must provided.  See perTurboOptimisation details. inv type algorithm used invert matrix. Values : \"Inversion Cholesky\" (chol2inv), \"Moore Penrose\" (ginv), \"solve\" (solve), \"svd\" (svd).  Default value \"Inversion Cholesky\". reg type regularisation matrix.  Values \"none\", \"trunc\" \"tikhonov\".  Default value \"tikhonov\". fcol feature meta-data containing marker definitions. Default markers.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/perTurboClassification.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"perTurbo classification — perTurboClassification","text":"instance class \"MSnSet\"     perTurbo perTurbo.scores feature variables     storing classification results scores respectively.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/perTurboClassification.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"perTurbo classification — perTurboClassification","text":"N. Courty, T. Burger,     J. Laurent. \"PerTurbo: new classification algorithm based spectrum perturbations Laplace-Beltrami operator\",     European Conference Machine Learning Principles     Practice Knowledge Discovery Databases (ECML-PKDD 2011),     D. Gunopulos et al.  (Eds.): ECML PKDD 2011, Part , LNAI     6911, pp. 359 - 374, Athens, Greece, September 2011.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/perTurboClassification.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"perTurbo classification — perTurboClassification","text":"Thomas Burger Samuel Wieczorek","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/perTurboClassification.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"perTurbo classification — perTurboClassification","text":"","code":"library(pRolocdata) data(dunkley2006) ## reducing parameter search space  params <- perTurboOptimisation(dunkley2006,                                pRegul = 2^seq(-2,2,2),                                sigma = 10^seq(-1, 1, 1),                                inv = \"Inversion Cholesky\",                                reg =\"tikhonov\",                                times = 3) #>    |                                                                               |                                                                      |   0%   |                                                                               |=====                                                                 |   7%   |                                                                               |=========                                                             |  13%   |                                                                               |==============                                                        |  20%   |                                                                               |===================                                                   |  27%   |                                                                               |=======================                                               |  33%   |                                                                               |============================                                          |  40%   |                                                                               |=================================                                     |  47%   |                                                                               |=====================================                                 |  53%   |                                                                               |==========================================                            |  60%   |                                                                               |===============================================                       |  67%   |                                                                               |===================================================                   |  73%   |                                                                               |========================================================              |  80%   |                                                                               |=============================================================         |  87%   |                                                                               |=================================================================     |  93%   |                                                                               |======================================================================| 100% params #> Object of class \"GenRegRes\" #> Algorithm: perTurbo  #> Hyper-parameters: #>  pRegul: 0.25 1 4 #>  sigma: 0.1 1 10 #>  other: Inversion Cholesky tikhonov #> Design: #>  Replication: 3 x 5-fold X-validation #>  Partitioning: 0.2/0.8 (test/train) #> Results #>  macro F1: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>       1       1       1       1       1       1  #>  best sigma: 0.1 1    #>  best pRegul: 4 0.25    plot(params)  f1Count(params) #>     0.25  4 #> 0.1   NA  2 #> 1      1 NA levelPlot(params)  getParams(params) #>  sigma pRegul  #>    0.1    4.0  res <- perTurboClassification(dunkley2006, params) getPredictions(res, fcol = \"perTurbo\") #> ans #>      ER lumen   ER membrane         Golgi Mitochondrion            PM  #>            20           181            96           107           134  #>       Plastid      Ribosome           TGN       vacuole  #>            49            50            20            32  #> MSnSet (storageMode: lockedEnvironment) #> assayData: 689 features, 16 samples  #>   element names: exprs  #> protocolData: none #> phenoData #>   sampleNames: M1F1A M1F4A ... M2F11B (16 total) #>   varLabels: membrane.prep fraction replicate #>   varMetadata: labelDescription #> featureData #>   featureNames: AT1G09210 AT1G21750 ... AT4G39080 (689 total) #>   fvarLabels: assigned evidence ... perTurbo.pred (11 total) #>   fvarMetadata: labelDescription #> experimentData: use 'experimentData(object)' #>   pubMedIds: 16618929  #> Annotation:   #> - - - Processing information - - - #> Loaded on Thu Jul 16 22:53:08 2015.  #> Normalised to sum of intensities.  #> Added markers from  'mrk' marker vector. Thu Jul 16 22:53:08 2015  #> Performed perTurbo prediction (sigma=0.1 pRegul=4) Sat Nov 23 16:04:36 2024  #> Added perTurbo predictions according to global threshold = 0 Sat Nov 23 16:04:36 2024  #>  MSnbase version: 1.17.12  getPredictions(res, fcol = \"perTurbo\", t = 0.75) #> ans #>      ER lumen   ER membrane         Golgi Mitochondrion            PM  #>            14            45            28            55            46  #>       Plastid      Ribosome           TGN       unknown       vacuole  #>            20            19            13           428            21  #> MSnSet (storageMode: lockedEnvironment) #> assayData: 689 features, 16 samples  #>   element names: exprs  #> protocolData: none #> phenoData #>   sampleNames: M1F1A M1F4A ... M2F11B (16 total) #>   varLabels: membrane.prep fraction replicate #>   varMetadata: labelDescription #> featureData #>   featureNames: AT1G09210 AT1G21750 ... AT4G39080 (689 total) #>   fvarLabels: assigned evidence ... perTurbo.pred (11 total) #>   fvarMetadata: labelDescription #> experimentData: use 'experimentData(object)' #>   pubMedIds: 16618929  #> Annotation:   #> - - - Processing information - - - #> Loaded on Thu Jul 16 22:53:08 2015.  #> Normalised to sum of intensities.  #> Added markers from  'mrk' marker vector. Thu Jul 16 22:53:08 2015  #> Performed perTurbo prediction (sigma=0.1 pRegul=4) Sat Nov 23 16:04:36 2024  #> Added perTurbo predictions according to global threshold = 0.75 Sat Nov 23 16:04:36 2024  #>  MSnbase version: 1.17.12  plot2D(res, fcol = \"perTurbo\")"},{"path":"https://lgatto.github.io/pRoloc/reference/perTurboOptimisation.html","id":null,"dir":"Reference","previous_headings":"","what":"PerTurbo parameter optimisation — perTurboOptimisation","title":"PerTurbo parameter optimisation — perTurboOptimisation","text":"Classification parameter optimisation PerTurbo algorithm","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/perTurboOptimisation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PerTurbo parameter optimisation — perTurboOptimisation","text":"","code":"perTurboOptimisation(   object,   fcol = \"markers\",   pRegul = 10^(seq(from = -1, to = 0, by = 0.2)),   sigma = 10^(seq(from = -1, to = 1, by = 0.5)),   inv = c(\"Inversion Cholesky\", \"Moore Penrose\", \"solve\", \"svd\"),   reg = c(\"tikhonov\", \"none\", \"trunc\"),   times = 1,   test.size = 0.2,   xval = 5,   fun = mean,   seed,   verbose = TRUE )"},{"path":"https://lgatto.github.io/pRoloc/reference/perTurboOptimisation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PerTurbo parameter optimisation — perTurboOptimisation","text":"object instance class \"MSnSet\". fcol feature meta-data containing marker definitions. Default markers. pRegul hyper-parameter regularisation (values ]0,1] ). reg ==\"trunc\", pRegul percentage eigen values matrix. reg ==\"tikhonov\", 'pRegul' parameter tikhonov regularisation. Available configurations : \"Inversion Cholesky\" - (\"tikhonov\" / \"none\"), \"Moore Penrose\" - (\"tikhonov\" / \"none\"), \"solve\" - (\"tikhonov\" / \"none\"), \"svd\" - (\"tikhonov\" / \"none\" / \"trunc\"). sigma hyper-parameter. inv type algorithm used invert matrix. Values : \"Inversion Cholesky\" (chol2inv), \"Moore Penrose\" (ginv), \"solve\" (solve), \"svd\" (svd). Default value \"Inversion Cholesky\". reg type regularisation matrix. Values \"none\", \"trunc\" \"tikhonov\". Default value \"tikhonov\". times number times internal cross-validation performed. Default 100. test.size size test data. Default 0.2 (20 percent). xval n-cross validation. Default 5. fun function used summarise times macro F1 matrices. seed optional random number generator seed. verbose logical defining whether progress bar displayed.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/perTurboOptimisation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PerTurbo parameter optimisation — perTurboOptimisation","text":"instance class \"GenRegRes\".","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/perTurboOptimisation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"PerTurbo parameter optimisation — perTurboOptimisation","text":"Note performance scores precision, recall (macro) F1 calculated, NA values replaced 0. decision motivated fact class either NA precision recall result NA F1 score , eventually, NA macro F1 (.e. mean(F1)). Replacing NAs 0s leads F1 values 0 reduced yet defined final macro F1 score.","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/reference/perTurboOptimisation.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"PerTurbo parameter optimisation — perTurboOptimisation","text":"Thomas Burger Samuel Wieczorek","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/phenoDisco.html","id":null,"dir":"Reference","previous_headings":"","what":"Runs the phenoDisco algorithm. — phenoDisco","title":"Runs the phenoDisco algorithm. — phenoDisco","text":"phenoDisco semi-supervised iterative approach detect new protein clusters.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/phenoDisco.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Runs the phenoDisco algorithm. — phenoDisco","text":"","code":"phenoDisco(   object,   fcol = \"markers\",   times = 100,   GS = 10,   allIter = FALSE,   p = 0.05,   ndims = 2,   modelNames = mclust.options(\"emModelNames\"),   G = 1:9,   BPPARAM,   tmpfile,   seed,   verbose = TRUE,   dimred = c(\"PCA\", \"t-SNE\"),   ... )"},{"path":"https://lgatto.github.io/pRoloc/reference/phenoDisco.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Runs the phenoDisco algorithm. — phenoDisco","text":"object instance class MSnSet. fcol character indicating organellar markers column name feature meta-data. Default markers. times Number runs tracking. Default 100. GS Group size, .e many proteins make group. Default 10 (minimum group size 4). allIter logical, defining predictions iterations saved. Default FALSE. p Significance level outlier detection. Default 0.05. ndims Number principal components use input disocvery analysis. Default 2. Added version 1.3.9. modelNames vector characters indicating models fitted EM phase clustering using Mclust. help file mclust::mclustModelNames describes available models. Default model names c(\"EII\", \"VII\", \"EEI\", \"VEI\", \"EVI\", \"VVI\", \"EEE\", \"EEV\", \"VEV\", \"VVV\"), returned mclust.options(\"emModelNames\"). Note using possible models substantially increases running time. Legacy models c(\"EEE\",\"EEV\",\"VEV\",\"VVV\"), .e. ellipsoidal models. G integer vector specifying numbers mixture components (clusters) BIC calculated. default G=1:9 (Mclust). BPPARAM Support parallel processing using BiocParallel infrastructure. missing (default), default registered BiocParallelParam parameters used. Alternatively, one can pass valid BiocParallelParam parameter instance: SnowParam, MulticoreParam, DoparParam, ... see BiocParallel package details. revert origianl serial implementation, use NULL. tmpfile optional character save temporary MSnSet iteration. Ignored missing. useful long runs track phenotypes possibly kill run convergence observed. run completes, temporary file deleted returning final result. seed optional numeric length 1 specifing random number generator seed used. relevant executed serialised mode BPPARAM = NULL. See BPPARAM details. verbose Logical, indicating messages printed execution algorithm. dimred characater defining Principal Component Analysis (\"PCA\") t-Distributed Stochastic Neighbour Embedding (\"t-SNE\") use reduce dimensions prior running phenoDisco novelty detection. ... Additional arguments passed dimensionality reduction method. PCA t-SNE, data scaled centred default, parameters (scale centre PCA, pca_scale pca_center t-SNE set). using t-SNE however, important tune perplexity max iterations parameters. See Dimensionality reduction section pRoloc vignette details.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/phenoDisco.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Runs the phenoDisco algorithm. — phenoDisco","text":"instance class MSnSet containing     phenoDisco predictions.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/phenoDisco.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Runs the phenoDisco algorithm. — phenoDisco","text":"algorithm performs phenotype discovery analysis described Breckels et al. Using approach one can identify putative subcellular groupings organelle proteomics experiments comprehensive validation unbiased fashion. method based work Yin et al. used iterated rounds Gaussian Mixture Modelling using Expectation Maximisation algorithm combined non-parametric outlier detection test identify new phenotype clusters. One requires 2 classes labelled data minimum 6 markers per class run algorithm.  function check remove features missing values using filterNA method. parallel implementation, relying BiocParallel package, added version 1.3.9. See BPPARAM arguent details. Important: Prior version 1.1.2 row order output different row order input. now fixed row ordering now input output objects.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/phenoDisco.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Runs the phenoDisco algorithm. — phenoDisco","text":"Yin Z, Zhou X, Bakal C, Li F, Sun Y, Perrimon N, Wong     ST. Using iterative cluster merging improved gap     statistics perform online phenotype discovery     context high-throughput RNAi screens. BMC     Bioinformatics. 2008 Jun 5;9:264.  PubMed PMID: 18534020. Breckels LM, Gatto L, Christoforou , Groen AJ, Lilley KS Trotter MWB.  Effect Organelle Discovery upon Sub-Cellular Protein Localisation.  J Proteomics. 2013 Aug 2;88:129-40. doi: 10.1016/j.jprot.2013.02.019. Epub 2013 Mar 21.  PubMed PMID: 23523639.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/phenoDisco.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Runs the phenoDisco algorithm. — phenoDisco","text":"Lisa M. Breckels <lms79@cam.ac.uk>","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/phenoDisco.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Runs the phenoDisco algorithm. — phenoDisco","text":"","code":"if (FALSE) { # \\dontrun{ library(pRolocdata) data(tan2009r1) pdres <- phenoDisco(tan2009r1, fcol = \"PLSDA\") getPredictions(pdres, fcol = \"pd\", scol = NULL) plot2D(pdres, fcol = \"pd\")  ## to pre-process the data with t-SNE instead of PCA pdres <- phenoDisco(tan2009r1, fcol = \"PLSDA\", dimred = \"t-SNE\") } # }"},{"path":"https://lgatto.github.io/pRoloc/reference/plot2D.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot organelle assignment data and results. — plot2D","title":"Plot organelle assignment data and results. — plot2D","text":"Generate 2 3 dimensional feature distribution plots illustrate localistation clusters. Rows/features containing NA values removed prior dimension reduction except \"nipals\" method. method, advised set method argument `ncomp` low number dimensions avoid computing components analysing large datasets.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/plot2D.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot organelle assignment data and results. — plot2D","text":"","code":"plot2D(   object,   fcol = \"markers\",   fpch,   unknown = \"unknown\",   dims = 1:2,   score = 1,   method = \"PCA\",   methargs,   axsSwitch = FALSE,   mirrorX = FALSE,   mirrorY = FALSE,   col,   pch,   cex,   index = FALSE,   idx.cex = 0.75,   addLegend,   identify = FALSE,   plot = TRUE,   grid = TRUE,   ... )  # S4 method for class 'MSnSet' plot3D(   object,   fcol = \"markers\",   dims = c(1, 2, 3),   radius1 = 0.1,   radius2 = radius1 * 2,   plot = TRUE,   ... )"},{"path":"https://lgatto.github.io/pRoloc/reference/plot2D.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot organelle assignment data and results. — plot2D","text":"object instance class MSnSet. fcol Feature meta-data label (fData column name) defining groups differentiated using different colours. Default markers. Use NULL suppress colouring. fpch Featre meta-data label (fData column name) desining groups differentiated using different point symbols. unknown character (default \"unknown\") defining proteins unknown/un-labelled localisation labelled. dims numeric length 2 (3 plot3D) defining dimensions plotted. Defaults c(1, 2) c(1, 2, 3).  Always 1:2 MDS. score numeric specifying minimum organelle assignment score consider features assigned organelle. (yet implemented). method character describe transform     data plot. One \"PCA\" (default),     \"MDS\", \"kpca\", \"nipals\", \"t-SNE\"     \"lda\", defining dimensionality reduction     applied: principal component analysis (see     prcomp), classical multidimensional scaling (see     cmdscale), kernel PCA (see     kpca), nipals (principal component     analysis NIPALS, non-linear iterative partial least squares     support missing values; see     nipals) t-SNE (see     Rtsne) linear discriminant analysis     (see lda). last method uses     fcol defined sub-cellular clusters     ration within ad cluster variance     maximised. methods unsupervised make use     fcol annotate plot. Prior t-SNE,     duplicated features removed message informs user     filtering needed. \"scree\" can also used produce scree     plot. \"hexbin\" applies PCA data uses     bivariate binning hexagonal cells     hexbin emphasise cluster density. none used, data plotted , .e. without     transformation. case, object can either     MSnSet matrix (invisibly returned     plot2D). enables re-generate figure without     computing dimensionality reduction ,     can time consuming certain methods. object     matrix, MSnSet containing feature     metadata must provided methargs (see     details). Available methods listed plot2Dmethods. methargs list arguments passed method called. missing, data scaled centred prior PCA t-SNE (.e. Rtsne's arguments pca_center pca_scale set TRUE). method = \"none\" object matrix, first argument methargs must MSnSet matching features object. axsSwitch logical indicating whether axes switched. mirrorX logical indicating whether x axis mirrored? mirrorY logical indicating whether y axis mirrored? col character appropriate length defining colours. pch character appropriate length defining point character. cex Character expansion. index logical (default FALSE, indicating feature indices plotted top symbols. idx.cex numeric specifying character expansion (default 0.75) feature indices. relevant index TRUE. addLegend character indicating add legend. See addLegendfor details. missing (default), legend added. identify logical (default TRUE) defining user interaction expected identify individual data points plot. See also identify. plot logical defining figure plotted.  Useful retrieving data . Default TRUE. grid logical indicating whether grid plotted. Default TRUE. ... Additional parameters passed plot points. radius1 numeric specifying radius feature unknown localisation. Default 0.1, specidied data scale. See plot3d details. radius2 numeric specifying radius marker feature. Default radius * 2.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/plot2D.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot organelle assignment data and results. — plot2D","text":"Used side effects generating plot.  Invisibly     returns 2 3 dimensions plotted.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/plot2D.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot organelle assignment data and results. — plot2D","text":"plot3D relies ##' rgl package, loaded automatically. Note plot2D update version 1.3.6        support organelle classes colours defined        getStockcol. cases, default        colours recycled using default plotting characters        defined getStockpch. See example        illustration. alpha argument also        depreciated version 1.3.6. Use setStockcol set        colours transparency instead. See example . Version 1.11.3: plot data , .e. without       transformation, method can set \"none\" (      opposed passing pre-computed values method       matrix, previous versions). object       MSnSet, untransformed values assay data       plotted. object matrix       coordinates, matching MSnSet must passed       methargs.","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/reference/plot2D.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot organelle assignment data and results. — plot2D","text":"Laurent Gatto <lg390@cam.ac.uk>","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/plot2D.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot organelle assignment data and results. — plot2D","text":"","code":"library(\"pRolocdata\") data(dunkley2006) plot2D(dunkley2006, fcol = NULL)  plot2D(dunkley2006, fcol = NULL, col = \"black\")  plot2D(dunkley2006, fcol = \"markers\") addLegend(dunkley2006,           fcol = \"markers\",           where = \"topright\",           cex = 0.5, bty = \"n\", ncol = 3) title(main = \"plot2D example\")  ## available methods plot2Dmethods #> [1] \"PCA\"    \"MDS\"    \"kpca\"   \"lda\"    \"t-SNE\"  \"nipals\" \"hexbin\" \"none\"   #> [9] \"scree\"  plot2D(dunkley2006, fcol = NULL, method = \"kpca\", col = \"black\")  plot2D(dunkley2006, fcol = NULL, method = \"kpca\", col = \"black\",        methargs = list(kpar = list(sigma = 1)))  plot2D(dunkley2006, method = \"lda\")  plot2D(dunkley2006, method = \"hexbin\")  ## Using transparent colours setStockcol(paste0(getStockcol(), \"80\")) plot2D(dunkley2006, fcol = \"markers\")  ## New behavious in 1.3.6 when not enough colours setStockcol(c(\"blue\", \"red\", \"green\")) getStockcol() ## only 3 colours to be recycled #> [1] \"blue\"  \"red\"   \"green\" getMarkers(dunkley2006) #> organelleMarkers #>      ER lumen   ER membrane         Golgi Mitochondrion            PM  #>            14            45            28            55            46  #>       Plastid      Ribosome           TGN       unknown       vacuole  #>            20            19            13           428            21  plot2D(dunkley2006) #> Not enough colours: using colours and pch.  ## reset colours setStockcol(NULL) plot2D(dunkley2006, method = \"none\") ## plotting along 2 first fractions  plot2D(dunkley2006, dims = c(3, 5), method = \"none\") ## plotting along fractions 3 and 5  ## pre-calculate PC1 and PC2 coordinates pca <- plot2D(dunkley2006, plot=FALSE) head(pca) #>           PC1 (64.36%) PC2 (22.34%) #> AT1G09210    -4.734261   -0.8204175 #> AT1G21750    -4.615276   -1.1891468 #> AT1G51760    -4.770573   -1.6292717 #> AT1G56340    -5.318056   -0.9972462 #> AT2G32920    -5.135122   -1.5283630 #> AT2G47470    -4.899410   -0.8145343 plot2D(pca, method = \"none\", methargs  = list(dunkley2006))   ## plotting in 3 dimenstions plot3D(dunkley2006) #> Loading required package: rgl #> Warning: RGL: unable to open X11 display #> Warning: 'rgl.init' failed, running with 'rgl.useNULL = TRUE'. plot3D(dunkley2006, radius2 = 0.3) plot3D(dunkley2006, dims = c(2, 4, 6))"},{"path":"https://lgatto.github.io/pRoloc/reference/plot2Ds.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw 2 data sets on one PCA plot — plot2Ds","title":"Draw 2 data sets on one PCA plot — plot2Ds","text":"Takes 2 linkS4class{MSnSet} instances input plot two data sets PCA plot. second data points projected PC1 PC2 dimensions calculated first data set.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/plot2Ds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw 2 data sets on one PCA plot — plot2Ds","text":"","code":"plot2Ds(   object,   pcol,   fcol = \"markers\",   cex.x = 1,   cex.y = 1,   pch.x = 21,   pch.y = 23,   col,   mirrorX = FALSE,   mirrorY = FALSE,   plot = TRUE,   ... )"},{"path":"https://lgatto.github.io/pRoloc/reference/plot2Ds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw 2 data sets on one PCA plot — plot2Ds","text":"object MSnSet MSnSetList. latter case, two first elements list used plotting others silently ignored. pcol object MSnSet, factor name phenotype variable (phenoData slot) defining split single MSnSet two data sets.  Ignored object MSnSetList. fcol Feature meta-data label (fData column name) defining groups differentiated using different colours. Default markers. Use NULL suppress colouring. cex.x Character expansion first data set. Default 1. cex.y Character expansion second data set. Default 1. pch.x Plotting character first data set. Default 21. pch.y Plotting character second data set. Default 23. col vector colours highlight different classes defined fcol. missing (default), default colours used (see getStockcol). mirrorX logical indicating whether x axis mirrored? mirrorY logical indicating whether y axis mirrored? plot TRUE (default), plot produced. ... Additinal parameters passed plot points.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/plot2Ds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw 2 data sets on one PCA plot — plot2Ds","text":"Used side effects producing plot. Invisibly     returns object class plot2Ds, list     PCA analyses results (see prcomp)     first data set new coordinates second data     sets, used produce plot respective point     colours. elements can accessed     data1, data2, col1 code2     respectively.","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/reference/plot2Ds.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Draw 2 data sets on one PCA plot — plot2Ds","text":"Laurent Gatto","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/plot2Ds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw 2 data sets on one PCA plot — plot2Ds","text":"","code":"library(\"pRolocdata\") data(tan2009r1) data(tan2009r2) msnl <- MSnSetList(list(tan2009r1, tan2009r2)) plot2Ds(msnl)  ## tweaking the parameters plot2Ds(list(tan2009r1, tan2009r2),         fcol = NULL, cex.x = 1.5)  ## input is 1 MSnSet containing 2 data sets data(dunkley2006) plot2Ds(dunkley2006, pcol = \"replicate\")  ## no plot, just the data res <- plot2Ds(dunkley2006, pcol = \"replicate\",                plot = FALSE) res #> $pca #> Standard deviations (1, .., p=8): #> [1] 2.262922407 1.371773556 0.746055402 0.487710756 0.355766910 0.276373741 #> [7] 0.002122164 0.001415174 #>  #> Rotation (n x k) = (8 x 8): #>               PC1        PC2        PC3        PC4        PC5        PC6 #> M1F1A  -0.3962096 -0.2485627 -0.2797386 -0.2859203 -0.1062071 -0.4494687 #> M1F4A  -0.3040624  0.4250988  0.4962665 -0.3052282  0.3844434  0.3348049 #> M1F7A   0.3504491  0.3425841 -0.3419524  0.4256061  0.5524150 -0.2123026 #> M1F11A  0.4114593 -0.1807571  0.1945606  0.2517424 -0.4273908  0.4013499 #> M2F1A  -0.3831189 -0.2855956 -0.3170905  0.2579206  0.2095711  0.4791081 #> M2F4A  -0.2929859  0.4953337  0.2077168  0.4245483 -0.4393174 -0.3114312 #> M2F7A   0.2890872  0.4455778 -0.4616572 -0.5370165 -0.2590656  0.1888524 #> M2F11A  0.3771715 -0.2863752  0.4047969 -0.2131187  0.2215026 -0.3428269 #>                PC7         PC8 #> M1F1A  -0.63833506 -0.02137118 #> M1F4A  -0.35686742 -0.01212579 #> M1F7A  -0.33375608 -0.01103564 #> M1F11A -0.59384097 -0.02020646 #> M2F1A   0.01947284 -0.57510162 #> M2F4A   0.01335776 -0.39401602 #> M2F7A   0.01131747 -0.33684803 #> M2F11A  0.02116750 -0.63198818 #>  #> $pred #>                    PC1          PC2           PC3           PC4          PC5 #> AT1G01610 -1.050349635  0.316300182 -0.4354560378 -0.4717085911 -0.265654674 #> AT1G02120 -3.403593297 -0.841328606 -0.5742400859 -0.1597541054 -0.068631737 #> AT1G02520 -0.219741942 -0.730211475 -0.2558058906 -0.5749253925 -0.333262006 #> AT1G03220 -0.313618262 -0.308383387 -0.2462845913 -0.3580387071 -0.537079635 #> AT1G03860  2.421714161 -0.066325248  0.1014359716  0.1978134133 -0.485270224 #> AT1G04120 -3.630468152 -3.794900335 -2.2513650132 -0.7889184116 -0.778115944 #> AT1G04430  1.560910470  1.598369097 -1.0121456555  0.7187892369  0.428565082 #> AT1G04910  1.904968699  1.565199963 -1.2611818211  0.1963304538  0.461726589 #> AT1G05070  1.589096897  0.259500399 -0.9213903633 -0.1477529214  0.315814440 #> AT1G05500 -2.055550554 -1.010860763 -0.4972174629 -0.3827558599 -0.670882521 #> AT1G06530  3.053085096 -0.341114950 -0.0522545901  0.3329020470  0.103202465 #> AT1G06840 -0.500202917 -0.348585919 -0.3193957195 -0.5459456690 -0.450088823 #> AT1G06890  2.173668191  1.533680863 -0.7538317230  0.5043572172  0.041135699 #> AT1G06940  3.512570367 -1.116677696 -0.6551231123  0.3589191934  0.128775891 #> AT1G07510  2.745021562  0.420022724 -0.3224788151  0.0696033128 -0.404859556 #> AT1G07670 -2.218394952  0.075086073 -0.1644250052 -0.1045097206  0.095826895 #> AT1G07810 -2.040102879 -0.730555703 -0.5485869785 -0.0857529924 -0.436199165 #> AT1G08470 -2.201584108 -0.780282069 -0.7976458236 -0.0398830294 -0.522027377 #> AT1G08480  2.630510812  0.201866094  0.2127947188  0.1490507258 -0.135489018 #> AT1G08660  1.676225886  1.696618827 -0.8167454495  1.0567522822  0.607103751 #> AT1G09210 -3.675564827 -1.591375486 -0.9372003753  0.6718798418 -0.833207256 #> AT1G09330 -0.541332464  1.947396453 -0.3602530260 -0.6072151258 -0.059843421 #> AT1G09630 -0.864071458 -0.423062778 -0.7419661996 -0.5243746477 -0.190649902 #> AT1G09870 -3.581036245 -1.381170275 -1.4657215563  0.0262289787 -0.573884809 #> AT1G10130  2.878989177  1.011291009 -1.8447943460 -0.0613129830 -0.263920170 #> AT1G10290 -1.169988331 -0.320420949 -0.0848526722 -0.3933787178  0.117907391 #> AT1G10510  2.591271421 -0.044117868 -0.7679967070  0.4750715899 -0.009809013 #> AT1G10950  1.639577358  1.006411643 -1.4368189109 -0.4471998851  0.205168893 #> AT1G11320  4.680664560 -1.466863352 -0.9447548187  0.4350601929  0.323937220 #> AT1G11330 -0.203010440 -0.972907968 -0.3415612516 -0.5330785559 -0.213963590 #> AT1G11580 -1.820402548 -1.178173366 -1.5167753131 -0.0221541986 -0.292920737 #> AT1G11680 -3.077217826 -1.107015699 -0.7265420018 -0.0326267865 -0.253654965 #> AT1G12840 -3.293944043 -3.713439100 -1.8957152520 -0.0791611735 -0.323539540 #> AT1G13280  0.190482366 -0.297159301 -0.1464249829 -0.0614714173 -0.176323708 #> AT1G13900 -0.983837075  1.916452139 -0.1788916917 -0.4995034238  0.447627688 #> AT1G14010 -2.898532527 -1.158526111 -0.9334585639 -0.4670193318 -0.139552844 #> AT1G14320 -1.896493562 -1.621614479 -0.7025623313 -0.3090875764  0.088360343 #> AT1G14670  3.097754436  2.535414807 -1.9774144461  0.4521018662  1.134454222 #> AT1G14830 -0.840162096 -0.537522374 -0.1554331351 -0.5949426219 -0.026800023 #> AT1G14850 -0.177334316  0.332923904 -0.1190156726 -0.1846605267 -0.064597614 #> AT1G14870  0.130929950 -0.723004199 -0.0514447225 -0.6107554353  0.125923018 #> AT1G15210 -0.320968027 -0.527441419  0.2245467346 -0.5851154393  0.036986051 #> AT1G15500  3.889884506 -1.012700513 -0.6202125964  0.4775710563  0.282531741 #> AT1G15690 -3.418733039 -4.100140342 -2.0305015377 -0.3841391148 -0.410240428 #> AT1G16920  0.157178241 -0.286659483 -1.1741644683 -0.1784881647 -0.489103835 #> AT1G17290 -0.451408248 -1.488569995 -0.4739133518  0.6306826920 -0.134587877 #> AT1G17500 -1.004467001 -0.568956993 -0.3757369869 -0.3336340648 -0.204482573 #> AT1G18260 -2.937642738 -0.639818597 -0.6638617128 -0.1653558868 -0.383507262 #> AT1G18540 -2.871427990 -0.312558627 -0.3150961069  0.7046802273 -0.280923680 #> AT1G18700 -2.481485649 -0.727999395 -0.7375613330 -0.0784999772 -0.348557206 #> AT1G19360  3.162320598  1.896723217 -1.9895174132  0.3684003076  0.274269248 #> AT1G19370 -2.727361709 -1.190107768 -0.8361814603 -0.4673857352 -0.594147521 #> AT1G19430  0.708404955  1.762094079 -0.0208681213  0.6054237209  0.639573891 #> AT1G19710  1.382874597  0.178190396 -1.5729631061  0.0307360549  0.128865602 #> AT1G20330 -2.537959531 -0.506463650 -0.4598469608  0.0197327604 -0.383165974 #> AT1G21480  1.089366197  1.665476483 -0.5255217783 -0.4755943596  0.114996026 #> AT1G21750 -3.569333293 -2.017986181 -1.0695684278  0.6688106135 -0.456449500 #> AT1G22200 -2.773048261 -1.032075283 -0.9055604928  0.3345720432 -0.481516058 #> AT1G22280 -0.208575653 -0.280588958  0.1587840585 -0.4734486149 -0.255915314 #> AT1G22530 -0.089646121 -0.025015534  0.3325992472 -0.4676254066 -1.153040622 #> AT1G24510 -1.167118530 -1.585268220 -0.6024646470 -1.0532840515 -0.121543164 #> AT1G26850  0.619796282  2.201475157 -0.1490331473  0.6442730697  0.412519269 #> AT1G27190 -0.303695671 -0.641172147 -0.2068433240 -0.7724642295 -0.329610806 #> AT1G27390  2.732416868  0.111156545 -0.0334024752 -0.0867567712  0.008163107 #> AT1G27770 -2.384575694 -0.482919527 -0.3077582070 -0.1202191573 -0.455842679 #> AT1G27930  0.555707593  1.854113803  0.0303548961  0.7354022821  0.475313445 #> AT1G27950 -0.099443154 -0.732219892 -0.4918447942 -0.8758408620 -0.065648583 #> AT1G27980 -3.405069514 -1.396735251 -1.0702607602  0.0534324320 -0.306665367 #> AT1G28340 -0.970276403  1.844799861  0.2514203209 -0.8945965232  0.738278808 #> AT1G29020 -2.276444921 -3.082465971 -1.6976887395 -0.4273107107 -0.265857238 #> AT1G29470  0.641126284  1.960892191 -0.1295967666  0.6600896432  0.461083667 #> AT1G29790  1.813132869  1.336125715 -1.3187005310  0.0323250576  0.222040290 #> AT1G29980 -0.818182096  0.262933355 -0.1537593809 -0.4933512513 -0.251217224 #> AT1G30000  1.330073240  0.716567815 -1.4514788360 -0.0676541138  0.526385153 #> AT1G30360 -0.109440282 -1.215086695 -0.1656273415 -0.4008509158 -0.056011989 #> AT1G30400 -2.649532157 -3.362806548 -2.1256388465 -0.1341056076 -0.167229249 #> AT1G31130 -1.525107437  2.219914566  0.9708907853 -0.1763575897  0.316377890 #> AT1G31850  0.985352860  1.550902283  0.0479050257  0.3028892237  0.690301187 #> AT1G32090  0.462704626 -0.218824720 -0.6714969882 -0.7813746327 -0.064172478 #> AT1G32210 -1.776455700 -0.428947559 -0.2978503410 -0.1781018942  0.153092266 #> AT1G34130 -2.970115600 -0.781584175 -0.5831495769  0.2468932755 -0.635296320 #> AT1G35620 -2.822242231 -1.064050804 -0.5329637747 -0.3826852842 -0.339701197 #> AT1G42960  4.399374946 -2.174295573  0.4157874127  0.5492124852  0.010759672 #> AT1G43170 -1.372765372 -1.446863049 -0.4090795080 -0.3061163634 -0.002978293 #> AT1G43890 -1.072795777 -1.282762928 -0.5016716858 -0.7262797965 -0.575395717 #> AT1G43910 -2.171309856  0.091942945 -0.3165136883  0.3307599776 -0.338361139 #> AT1G44170 -2.556087757 -1.116734431 -0.9128156065 -0.3769079123 -0.434174346 #> AT1G47260  2.400469983 -0.387779382  0.3888808866  0.1894731319 -0.085068204 #> AT1G48920  1.780084205  0.265115459  0.0582180111 -0.8824300057  0.281127277 #> AT1G49710  2.049884419  1.571619533 -1.3447655837  0.3312191042 -0.365965487 #> AT1G50460  2.565030755 -0.295431754 -0.0208296478 -0.2544185164  0.016118796 #> AT1G51540  1.846652456  2.195425138 -0.9627236977  0.5468194194  0.290515301 #> AT1G51570 -2.177224055 -0.838783568 -0.7002957875 -0.4043321272 -0.338792927 #> AT1G51590  3.341014419  1.574157881 -2.0468145885  0.1946406989  0.342116603 #> AT1G51630  0.557671236  1.853196037 -0.0009943414  0.7428387144 -0.058600552 #> AT1G51760 -3.441717861 -1.929071268 -1.1509684192  0.1687074302 -0.084216991 #> AT1G51980  1.817333266 -0.373491345  0.1489412534 -0.3152620800 -0.154837378 #> AT1G52260 -3.533889703 -1.029664074 -0.3977573190  0.4630514117 -0.879980172 #> AT1G52600 -2.510970665 -0.435384410 -0.7668336548 -0.1342126497 -0.570960244 #> AT1G52780 -1.242722369  2.372955524  0.3851476729  0.1253520442  0.671094495 #> AT1G53000  3.058072655 -0.187218185  0.2950901199  0.5767021805 -0.281965353 #> AT1G53210 -3.349186136 -4.159832390 -2.2080480593 -0.2327281336 -0.236064036 #> AT1G53760  2.609271443 -0.061558992 -0.0698744032  0.3829010718 -0.019496714 #> AT1G53840 -1.604524634  1.736071056  0.5554811074 -0.5606661212  0.526166793 #> AT1G54000 -1.167365755 -2.215925067 -1.6194384463 -0.1680980570 -0.193621875 #> AT1G54990 -2.843982779 -0.604818969 -0.4167085357  0.0899534299 -0.282916018 #> AT1G55130  1.957525390  1.767673120 -1.5988432761  0.9735944211 -0.071344612 #> AT1G55160  3.342148817 -1.018553827  0.3365791871  0.1742687118 -0.487147750 #> AT1G55850 -2.862875808 -0.853384873 -0.8330345060  0.0259107207 -0.402123735 #> AT1G56070  0.013503508 -1.337522602 -0.8901508352 -0.1050857886  0.523734328 #> AT1G56140 -0.118935103 -0.903081230 -0.4794500288 -0.2061577764 -0.659004160 #> AT1G56340 -3.947838755 -1.998443740 -1.0134595875  0.5338110039 -0.599502225 #> AT1G59820 -0.050422123  0.921763366 -0.4034128277 -0.6716382893  0.311385526 #> AT1G59870 -0.002916187 -0.185540103 -0.3407414196 -0.5531454125 -0.004729137 #> AT1G61770 -2.533236270 -0.572479891 -0.2989016869  0.1177400279 -0.616743451 #> AT1G61790 -2.449507676 -0.515866070 -0.6462261726  0.4573943930 -0.867315996 #> AT1G63010 -2.726801073 -3.295300742 -1.8392131411 -0.7341663597 -0.612135629 #> AT1G63050 -1.790953440 -0.519168216  0.1675397056 -0.7344515054  0.096218308 #> AT1G64090 -3.348839836 -0.866008175 -0.5085578375 -0.4415540130 -0.238349511 #> AT1G64880  1.257810428  0.782616847  0.0894969122  0.7560944505 -0.257470523 #> AT1G64950 -2.042639647 -0.555782016 -0.3656029434 -0.1034051422 -0.324332699 #> AT1G65020 -2.129074237 -0.147389833 -0.3212590183 -0.0566584380 -0.515722893 #> AT1G65270 -2.730076891 -1.101719178 -1.1415522506 -0.4622097668 -0.191751810 #> AT1G65540  2.917565430 -0.675726945  0.1890622173  0.2662041588 -0.430837760 #> AT1G65820 -2.890479431 -0.859602885 -0.3479732691  0.0863275915 -0.463786013 #> AT1G66270 -1.935597537 -1.222082153 -0.2844098448 -0.6888350807 -0.594319968 #> AT1G66280 -3.139455088 -1.305666349 -0.0977118514 -0.5623479991 -0.039583943 #> AT1G67490 -1.936106770 -0.532219227 -0.4227913397 -0.1100357157 -0.652773344 #> AT1G67730 -1.937162892 -0.360891925 -0.3950341127 -0.3155537968 -0.340531674 #> AT1G69460 -3.016289824 -1.661093046 -1.3778192225 -0.5756812789 -0.826561625 #> AT1G69840 -0.651042427 -1.700053183 -0.8447189042 -0.6205360196 -0.247143617 #> AT1G70770 -2.303129231 -0.396270447 -0.5256039772  0.4352114247 -0.659907767 #> AT1G71220 -3.532307241 -1.649790431 -0.8831647349  0.1247527838 -0.455173500 #> AT1G71780 -3.172098769 -0.840074994 -0.8216044252 -0.1714623768 -0.261427541 #> AT1G72090 -3.094755697 -0.286449132  0.0421828417  0.3702790628 -0.347740797 #> AT1G72370  0.811253884 -1.708966447 -0.3546196151 -0.6887447690 -0.027781273 #> AT1G72480 -0.395145435  2.237370095  0.3786338856  1.3643327788  0.547020053 #> AT1G73990  1.747119605 -0.042242247 -0.0267713440  1.4839602463 -0.845795283 #> AT1G74380  1.959593419  1.038618934 -1.6477298789  0.3634086375  0.088490920 #> AT1G74790 -0.044549229 -0.831714913 -0.3426193068 -0.4143070798 -0.340258297 #> AT1G75140 -2.646622248 -0.821075647 -0.6955186460  0.1238370109 -0.286314043 #> AT1G76040 -1.015661505 -0.550876752  0.2668267084 -0.0970972202 -0.594415638 #> AT1G76270  2.376377283  1.210830736 -1.9966321810  0.1608861586  0.207279152 #> AT1G76400 -2.652661046 -0.385331503 -0.6528702470 -0.1262422680 -0.528844667 #> AT1G77120 -0.865558674 -1.724565213 -0.9445777296 -0.3503444409 -0.402048400 #> AT1G77510 -3.345691767 -2.353425962 -1.3774742244 -0.5998185948 -0.443472983 #> AT1G77590  2.785925579 -0.924715097 -0.5499487572  0.3543375737  0.534852606 #> AT1G78240  2.867656897  1.717058334 -1.6121315934  0.0527157454 -0.152385810 #> AT1G78850 -1.126281565 -0.901736117 -1.0026832527 -0.1922861377 -0.572308423 #> AT1G78900 -3.727552070 -4.228692884 -2.2790581747 -0.3018209089 -0.486011672 #> AT1G78920 -0.051394249  0.427008192 -0.7446134923  0.1125174342  0.033488178 #> AT1G79560  3.992998257 -1.640125382 -0.2919140450  0.6432985524 -0.067830712 #> AT1G79940 -2.264933842 -0.596104742 -0.5504665307 -0.3438640161 -0.423541245 #> AT1G80300  4.040508994 -0.988418139 -0.6464001282  0.1030862055  0.379811018 #> AT1G80950 -2.028155649 -1.236659015 -0.3705576957 -0.5881846083 -0.414008567 #> AT2G01250 -1.797553823 -0.402329069  0.3022125586 -0.4212559578  0.157079845 #> AT2G01270  1.031014791  1.399167074 -0.6831840199  0.9245578250  0.503942202 #> AT2G01470 -2.938563281 -0.949485697 -0.6717782641 -0.2370403115 -0.558905093 #> AT2G01630  0.028051706 -0.885319018 -0.2043644512 -0.9504370081 -0.496835921 #> AT2G01720 -2.519490434 -0.708146776 -0.5274720328 -0.0135713259 -0.742024761 #> AT2G01970  2.431722172  1.431992311 -1.0565241488  0.5241283178  0.040224501 #> AT2G02040 -3.415903569 -3.853169342 -1.9296240418 -0.2524021317 -0.544098594 #> AT2G03120 -2.710372517 -0.749891155 -0.5182412868 -0.3474867787 -0.493396482 #> AT2G03510 -3.046160203 -0.799299573 -0.6557183465 -0.2666277552 -0.315668298 #> AT2G04280  0.628120358  2.517985834 -0.1219012993  0.7774809831  0.624961000 #> AT2G04350 -2.480823466 -0.891534243 -0.6832934960 -0.3405245791 -0.606036803 #> AT2G04780  0.092954674 -1.077889689 -0.9450472463 -0.8506079882 -0.557061115 #> AT2G04940  2.496437790 -0.203785496 -0.4283900497  0.2744856229 -0.682409323 #> AT2G09990 -2.117844575 -2.153609884 -0.7178757695 -0.5956437763  0.101776231 #> AT2G14720 -1.498700968  1.890520999  0.5768697279 -0.5195123539  0.784780809 #> AT2G14740 -1.301380788  2.230542770  0.0154000947 -0.8188257064  0.630546319 #> AT2G16060 -0.482734506 -1.769759030 -0.7604791082 -0.3618286148 -0.630461104 #> AT2G16460  2.518025935 -0.345286347  0.1078082475  0.5062197539 -0.213492943 #> AT2G16530 -2.564459876 -0.775168874 -0.7122673177  0.9802863490 -0.463406401 #> AT2G16640  4.551437041 -1.056066432 -1.0194990757  0.0431358058  0.326273681 #> AT2G16660 -3.824100655 -3.989380342 -2.2973338496 -0.6132885002 -0.976374277 #> AT2G16760 -2.219470833 -0.431950263 -0.5451964947 -0.2997132177 -0.140575267 #> AT2G17440  0.222178070 -0.243598483 -0.5312176641 -0.8887006606 -0.615529962 #> AT2G17720 -1.206012903  0.163490019 -0.9712275447 -0.1623768837 -0.319831190 #> AT2G18193 -1.031350595  1.185568746  0.1633239370  0.6962016418 -0.697411495 #> AT2G18330  2.934875132 -0.143763164 -0.3951704391  0.9782636327 -0.180501947 #> AT2G18690 -0.836866810 -2.988281703 -0.8138407498  1.1549548245 -1.490572175 #> AT2G18960 -0.366736712 -0.933425621  0.0575176930 -0.7589436185 -0.337092502 #> AT2G19080  3.039399974  0.192255721 -0.1847199573  0.3590825443  0.762562671 #> AT2G19860  2.752872508 -0.412217144 -0.2773523751  0.1460899277  0.539716772 #> AT2G20360  1.536536150  0.234357285 -0.2196418742  0.2018459167  0.239757099 #> AT2G20370  1.461429479  1.914528440 -0.7558185981  0.7221127533  0.464888429 #> AT2G20450 -1.793569352 -0.770469869 -0.4065960902 -0.6890586156 -0.092834919 #> AT2G20800  2.599365451  0.377436754  0.0536123265  0.6428539877  0.395213135 #> AT2G20807  0.517264175  0.219817438 -1.0988644460 -0.2218312509 -0.164984750 #> AT2G20940  2.732746404 -0.354291740  0.4182247874 -0.1289611381 -0.388585145 #> AT2G20990 -2.037247656 -1.049009786 -0.5190165107 -0.2623938879 -0.522246747 #> AT2G21160 -2.260209345 -0.318760743 -0.6354261014 -0.1105258234 -0.758689407 #> AT2G21410 -3.173524229 -3.911091714 -2.1561470977 -0.4958876660 -0.787497981 #> AT2G21600 -2.982005543 -1.148005813 -1.4463534295 -0.3760197912 -0.509184698 #> AT2G21870  2.538766369 -0.076957702  0.0860654597  0.0356387955  0.003843476 #> AT2G22900  0.351089331  2.078517697 -0.2715268867  0.6925437332  0.431248467 #> AT2G23810  0.290111604 -0.170133056 -0.8307972082 -0.7853676762  0.082332959 #> AT2G24180 -2.311750239 -0.700007614 -0.8429677200 -0.0765588629 -0.703235443 #> AT2G24420 -3.131004112 -0.938950703 -0.6139077961 -0.2185262119 -0.388934064 #> AT2G25110 -2.549486712 -0.252343074 -0.4177474814 -0.4893766966 -0.137903423 #> AT2G26140  2.456660592 -0.300163252  0.4401777895  0.2013946824  0.411238606 #> AT2G26250 -1.735168935 -0.111434865 -0.5692017393  0.1500267657 -0.763030947 #> AT2G26300 -0.238481473 -0.752884845  0.4155621504 -0.6959863897 -0.039707261 #> AT2G27490 -0.708804148 -1.142828267 -0.4630282872 -0.5701588290 -0.409481515 #> AT2G27730  2.277149904 -0.746314234  0.3885575414 -0.3244319132 -0.572141700 #> AT2G28520 -0.561578289  1.698060468 -0.0106583732 -0.6164357102  0.556875748 #> AT2G29080  2.683151881 -0.082227120  0.0996991539 -0.0077261013 -0.229783857 #> AT2G29960 -2.926472101 -1.824770038 -1.3903906948 -0.3730838523 -0.608135438 #> AT2G29990  2.953287516 -0.181024579  0.1292332159  0.0465517563 -0.065654422 #> AT2G30490 -3.227232133 -1.531168141 -0.9867639722 -0.1698153489 -0.522063728 #> AT2G30860  0.340036035 -1.501014306 -0.3301644575 -0.3319859902  0.306476363 #> AT2G30930 -2.183513050 -2.407232033 -1.2583663182  0.1514079916  0.033449988 #> AT2G31190  3.550096030 -0.675670659 -0.6315818111  0.9930833828 -0.250636113 #> AT2G31390 -0.595409088 -2.039689795 -0.9173995433 -0.3257312633 -0.038534958 #> AT2G32240 -1.715941728 -1.597700483 -1.2507168771  0.3579706536 -0.079240427 #> AT2G32440 -3.768278915 -1.477785601 -0.8314153544  0.0418108626 -0.133897946 #> AT2G32920 -4.114377491 -2.601146991 -1.5603087210  0.0982890850 -0.590814608 #> AT2G33040  2.220232550 -0.013406746 -0.1850427569  0.3020577540 -0.059930645 #> AT2G33220  2.713264136 -0.023111963  0.6282865436 -0.2250387069  0.310364033 #> AT2G33630 -2.460596190 -0.563686261 -0.6086983790  0.6103400240 -0.655373106 #> AT2G34300 -0.291924357  1.815273546  0.3815606616  0.5172340085  0.637714963 #> AT2G34660 -2.869584564 -3.324844936 -1.8500478645 -0.4659011573  0.026363164 #> AT2G35610  0.534454763  1.979968609  0.0662757214  0.6132528244  0.060495545 #> AT2G35720  2.640858242 -0.592739159  0.1535122896  0.2543941134 -0.537001258 #> AT2G36160 -1.423096908 -1.242113662 -0.8699818433 -0.0771558194 -0.036673576 #> AT2G36290 -3.204928773 -1.358741763 -1.3275468254  0.4619545253 -0.683778548 #> AT2G36380 -0.150161575 -0.938803866 -0.2804053961 -0.4018131834 -0.358853694 #> AT2G36910 -0.439723430 -0.850136936 -0.0388654092 -1.0016215980 -0.276525172 #> AT2G37050 -0.184652637 -0.391751384  0.3335889664 -0.2392990542  0.117020031 #> AT2G37170 -1.272772526 -0.625021514 -0.2911421023 -0.0665052051 -0.600345592 #> AT2G37400  3.234862174 -1.820379384 -0.3792251195  0.7014205729 -0.527823188 #> AT2G37860  4.389578322 -1.301317128 -0.4529280890  0.3824955533 -0.108496688 #> AT2G38530  0.157280263 -0.474983988 -0.5737768245 -0.1653677588 -0.298024820 #> AT2G38550  3.564236098 -0.831766339 -0.2911025695  0.0449396357  0.488845549 #> AT2G38650  2.505467379  2.178670845 -1.3780779235  0.5646786691  0.579376325 #> AT2G38960 -2.841361018 -1.036491864 -1.1296642513 -0.1953923245 -0.356321304 #> AT2G39480 -0.440792678 -0.560784770 -0.4816299333 -0.7297297589 -0.203180841 #> AT2G39630 -1.492002910 -0.755014655 -0.4711016534 -0.3893415275 -0.112235074 #> AT2G39960 -2.414856814 -0.811027899 -0.8975365837 -0.2758048410 -0.706459234 #> AT2G40280  0.449138527  1.623261142  0.4133738466  0.4522521317  0.735228928 #> AT2G40890 -3.321730680 -1.083179712 -0.6326828948 -0.1903887731 -0.562644064 #> AT2G41560 -3.198187101 -3.726545247 -2.0396282841 -0.5724101942 -0.291268470 #> AT2G42210  3.048563290 -0.295577304  0.1975878574  0.0669571059 -0.109609583 #> AT2G43350 -0.890108562  0.017919798 -1.0265026374 -0.5227862990 -0.297825422 #> AT2G43610 -0.281288161 -0.292083387 -0.2096443715  0.3863256375  0.039656775 #> AT2G43950  3.788802508 -0.851672503 -0.7453187454  0.6070624227  0.352454012 #> AT2G44640  4.513159459 -1.094335545 -0.7345274559  0.4590387378  0.207242098 #> AT2G45060  2.387264555 -0.147392225  0.1803483020  0.3776676003 -0.345359343 #> AT2G45140 -2.399309842 -0.601818950 -0.3836265258  0.3422021641 -0.205345279 #> AT2G45470 -0.065795006 -1.245317744 -0.5840274213 -0.3181216192 -0.372112829 #> AT2G45510 -2.534591711 -0.599126434 -0.5257851008  0.0437466346 -0.403866128 #> AT2G45820 -0.396108912 -0.891017514  0.4291174083 -0.3531002079 -0.745700738 #> AT2G46170 -2.197029982 -1.444165544 -0.8360849622  0.0570792547 -0.769817310 #> AT2G47000  0.035341027 -0.874673654 -0.4095474961 -0.5424178064 -0.292017615 #> AT2G47470 -3.749502086 -1.825131166 -1.0342235210  0.0003809747 -0.661442065 #> AT2G47650  2.271394200  1.678560589 -1.3183235250  0.3825852359 -0.213188613 #> AT2G47800 -2.525163551 -3.394479461 -1.9556965326 -0.0979737004 -0.366142395 #> AT2G47840  4.169532217 -1.072794265 -0.3682741798  0.1923736269  0.724978975 #> AT3G01280  3.054117009 -0.642801462 -0.0298499943  0.5305551711 -0.242350225 #> AT3G01290 -0.361251897 -1.229948661 -0.8099869009 -0.5003710915 -0.290979064 #> AT3G01380 -2.634650351 -0.957544203 -0.6684656437  0.0872804807 -0.522951740 #> AT3G01930 -2.678613532 -2.077819622 -1.4376400947 -0.5621272140 -0.497294015 #> AT3G02090  2.801112466 -0.509881165  0.0127222889  0.3675540734 -0.827259884 #> AT3G02350  2.407019733  1.690037842 -1.7999657148  0.4007588122  0.324033167 #> AT3G02875 -3.625407244 -1.374899300 -1.0739648278  0.1010656757 -0.361854725 #> AT3G02880  0.281949165 -0.386234566 -0.2751667847 -0.1575531684 -0.013905508 #> AT3G03050  0.038001518  1.800238799  0.5603678301 -0.0011140981  0.267860852 #> AT3G03060  2.228198900 -0.395717861  0.0531467454  0.7869176846 -0.168506391 #> AT3G03330 -2.847464417 -0.817494521 -0.5952358605 -0.5177571115 -0.525793873 #> AT3G03520 -2.713221979 -3.010574162 -1.4841509559 -0.6653338538 -0.585947876 #> AT3G04920  0.665405230 -2.244180531  0.1318743973 -0.7622537206  0.250902574 #> AT3G05230 -2.679072340 -0.364747867 -0.4501701641 -0.2076801515 -0.461251670 #> AT3G05710 -0.568005854  2.303060228  0.4305965739 -1.0730161692  0.535409587 #> AT3G06300  0.120852178 -0.115810948 -1.1148144474  0.0893553237 -0.214381066 #> AT3G06510  4.404905539 -0.923147383 -0.9227042684  0.6299468925  0.463045457 #> AT3G06960  4.007910814 -0.915331466 -0.7304563315  0.5187649456  0.621975972 #> AT3G07110 -1.622447991 -2.144220297 -0.4436390663  0.2910305457 -0.050787147 #> AT3G07140 -2.338153636 -0.406662228 -0.2536986410 -0.0913139147 -0.520379370 #> AT3G07160 -0.105844966 -0.319693813 -0.2795738125 -0.3509846549  0.067696996 #> AT3G07180 -3.015809425 -0.692252759 -0.4418481232 -0.1192021798 -0.255910198 #> AT3G07330  2.216208750  1.609461374 -1.0210694513 -0.2676679700  0.550286262 #> AT3G07390  0.253343237 -1.096183045 -0.6781497514 -0.9225382932 -0.704469203 #> AT3G08510 -0.573049004 -1.376375123 -0.3337530382 -1.0341990854 -0.962133666 #> AT3G08580  2.177054285 -0.407636934  0.4949719528 -0.3447839585 -0.105607784 #> AT3G08630  4.277278175 -0.923571693 -0.9978588832  0.7110587271  0.245546604 #> AT3G08640  4.023356210 -1.306252239 -0.8252223962 -0.5193466994  0.331101982 #> AT3G08950  2.855408420 -0.189947307  0.0362889927 -0.1344211672 -0.250772695 #> AT3G09630 -1.450403437 -2.096601784 -0.6212354832 -0.4505907783 -0.236475806 #> AT3G09740 -0.227759915 -0.959245886 -0.3641324959 -0.6630573770 -0.378886965 #> AT3G10370  1.943610384  0.165324784  0.2976852339  0.2489547760  0.094202429 #> AT3G10730 -0.897947789  0.493319989 -0.4727952509 -0.1948990943 -0.404525854 #> AT3G11070  3.291001894 -0.463059018  0.0311495982  0.5892119755 -0.042784751 #> AT3G11730 -1.077404335 -0.078795622 -0.3110748634 -1.0158175996 -0.107553024 #> AT3G11820 -0.479232000 -0.203409421 -0.4429082868 -0.6549522892  0.142558277 #> AT3G13080 -3.184446828 -3.484424227 -1.8419532077 -0.1484748463 -0.150426611 #> AT3G13410 -2.499677214 -1.299288586 -0.8259640437  0.4206244564 -0.662143314 #> AT3G13560  0.149571448 -0.956561094 -0.0786555589 -0.7495139486 -0.293537646 #> AT3G13772  1.970440916  1.865058677 -1.6701296371  0.8697723787  0.187175557 #> AT3G13870 -3.015527739 -1.305651703 -0.9209726196 -0.1861761697 -0.648115093 #> AT3G14610 -2.641312256 -1.047074797 -1.0887395516  0.1519442580 -0.343311805 #> AT3G14840  0.041766828 -0.305507796 -0.1499911370 -0.4782942966 -0.088528455 #> AT3G15710 -2.173295890 -0.427345879 -0.3552476984  0.1169164655 -0.525385810 #> AT3G15950 -0.462748275 -1.813133992 -0.7927183788  0.0861116990 -0.453148159 #> AT3G16110 -3.679495034 -2.174917477 -1.6202244038 -0.1178474908 -0.318719628 #> AT3G16200  2.088508898  1.188987066 -1.0451806315  0.3925271962 -0.183078901 #> AT3G16460 -0.173473318 -1.782225473 -0.5704456299 -0.3086957133 -0.246036820 #> AT3G16480  3.022037259 -0.778894319  0.1420735241  0.6382342458 -0.690718116 #> AT3G17840  0.039781862 -0.652794935 -0.2640356360 -0.7046423665 -0.081665066 #> AT3G18370 -2.360847216 -1.298389820 -0.5036363677 -0.2058231619 -0.288230386 #> AT3G18480  2.871638152  0.941183620 -1.7730776782  0.4006619252 -0.123044019 #> AT3G18820 -1.363663823 -1.469675948 -0.6866626395 -0.2134008486 -0.455960342 #> AT3G19340 -3.106662967 -1.613856752 -1.0360775700 -0.2314348450 -0.991824372 #> AT3G19820 -3.053988427 -2.483986009 -1.3670186969 -0.4065813833 -0.348825790 #> AT3G20000  2.967769474 -0.214170551 -0.4386569622  0.0684534561  0.142441078 #> AT3G20390  3.500481676 -1.014570901 -0.4410000231 -0.2079586632 -0.022744535 #> AT3G21160  2.971057656  0.977962220 -1.5341888999  0.0676030361  0.452997452 #> AT3G21190  0.414282669  1.653968089 -0.1108171344  0.5984036231  0.405218579 #> AT3G21250 -2.449634092 -2.661913252 -2.1121178022 -0.5437381835 -1.272024614 #> AT3G22370  1.785015682  0.651467778  0.7491302482  0.3101898896  0.247218434 #> AT3G23175 -2.138382602 -1.236855762 -1.2332844589 -0.3932207086 -1.233398956 #> AT3G23190 -2.360052129 -0.626708960 -0.6973796021 -0.3099760434 -0.355216338 #> AT3G23300  2.010010922  1.521806384 -0.8117049300  0.7134929021  0.231504528 #> AT3G23400  0.556392438 -0.058141779 -0.4196923287 -0.7982375899 -0.633469881 #> AT3G23450  1.073439159 -0.143109249  0.0843766461 -0.1821505351 -0.360199228 #> AT3G23710  3.697990742 -1.288454107 -0.5630344316  0.6119703808 -1.158224953 #> AT3G23750 -0.170298910 -0.535082180 -0.3226630700 -0.6712525770 -0.459645042 #> AT3G24160 -2.831251627 -1.589480453 -1.3841152858 -0.3160069083 -0.406952381 #> AT3G24550  0.239930334 -0.817474615 -0.0588480400 -0.9068790724 -0.099310887 #> AT3G24660 -0.190958899 -0.522812544 -0.2661073720 -0.1991548796 -0.404469858 #> AT3G25140  2.918092123  1.661143705 -1.5579600420  0.2419201718  0.190650062 #> AT3G25290  0.006625691 -0.104816888  0.4815166753 -0.1675529495  0.214496952 #> AT3G25610 -0.308275282 -1.019317746 -1.2422018442 -0.6732665101 -0.903703715 #> AT3G25780  0.597741625 -0.243115144 -0.4930115568 -1.1774226357  0.179535659 #> AT3G26370  1.709198637  1.831344316 -0.6630858533  0.8970060210  0.461661970 #> AT3G26830 -3.006841579 -0.543443731 -0.5320580504  0.6086626404 -0.053802915 #> AT3G27220  1.452032514  1.679051688 -0.5448885493  0.7320720476  0.083626830 #> AT3G27230  2.630481484  1.875314428 -1.8768728236  0.8038739066  0.750391826 #> AT3G27325 -1.838532052 -0.368935427 -0.8051471715 -0.3091819059 -0.651372009 #> AT3G28450 -0.162900089 -0.908402652 -0.2441664544 -0.8001606962 -0.305449342 #> AT3G28480  2.162204395  1.146856258 -1.3244133521  0.2735770636  0.028745928 #> AT3G28510 -3.712163751 -1.060737171 -0.8833143452  0.1570243720 -0.589246312 #> AT3G28580 -2.900304127 -0.916355005 -0.5303551197 -0.0179910946 -0.258750847 #> AT3G28710 -3.861113664 -4.119538366 -2.1696864626 -0.2019041796  0.002529741 #> AT3G28720 -1.785730143 -1.001850904 -1.0310773681 -0.4268603059 -0.208619192 #> AT3G28860 -0.068803240 -1.232889903 -0.2682212711 -0.5990095531 -0.294295818 #> AT3G42050 -3.495126371 -4.054399671 -2.1571224196 -0.2098593948 -0.353917054 #> AT3G43190 -1.611435805 -2.457672817 -1.0604819960  0.2516823127  0.084387313 #> AT3G44330 -2.327134039 -0.362312308 -0.5181370508  0.1941802408 -0.586454072 #> AT3G45890  3.816432766 -1.032476646 -0.6090270166  0.3438841781  0.165499284 #> AT3G46290 -0.031804850  0.206523256 -0.0742131466  0.4125964507  1.446731920 #> AT3G46740  4.178095031 -1.296601178 -0.6258328225  0.2754184069  0.252591011 #> AT3G46830 -0.463810154 -0.620899980 -0.7622673946 -1.0131011973 -0.654929604 #> AT3G47200 -1.381007691 -0.915501593 -0.2280699461 -0.0218700132 -0.471765935 #> AT3G47930  2.761163198 -0.959723283  0.2350621724  0.2365753039 -0.480775510 #> AT3G47950 -0.280196575 -1.027734262  0.1230057290 -0.0228223606 -0.409805254 #> AT3G48820  1.727535369  1.562842282 -1.1622255878  0.2783374018  0.327289786 #> AT3G48890 -2.518389888 -0.395451357 -0.8368000397 -0.1475682333 -0.296854963 #> AT3G49360 -1.559314511 -1.600156247 -0.9039640656 -0.4979852838 -0.188287758 #> AT3G49560  3.584427085 -0.581696310 -1.0974471765  0.6922377686 -0.930957747 #> AT3G49720  2.030892227  2.018242401 -1.4532583373  0.4856906866  0.030442938 #> AT3G49870 -1.428446124 -1.402819008 -0.7063134208 -0.0575366896  0.404103996 #> AT3G49910 -1.735069441 -1.087370407 -0.5184764093 -0.3631808585 -0.288534496 #> AT3G50930  2.541458559 -0.815839422  0.1851206281 -0.3890746698 -0.338489884 #> AT3G51010  3.318489329 -0.479219872  0.1794047158  0.3653191347  0.156407457 #> AT3G51050 -1.697514947 -0.554313094 -1.5571923606 -0.5277910572 -0.449022272 #> AT3G51430 -2.762257973 -1.450647200 -1.0258636544  0.1766550294 -0.610126017 #> AT3G51440 -2.222287002 -0.688164643 -0.9736170434 -0.4824801840 -0.872279655 #> AT3G51460 -2.107373577 -0.836462408 -0.4274699036  0.2363933554 -0.325445029 #> AT3G51550 -0.529040913 -0.732404931 -0.4593930877 -0.1744658193 -0.461305305 #> AT3G51580  1.051912350  1.062029235  0.0804713617  0.1465684350  0.833581684 #> AT3G51740  0.168695414 -0.812687912  0.0722269908 -0.7747178450 -0.422389657 #> AT3G52190 -2.264737999 -0.506307772 -0.3943184716 -0.2526217062 -0.153224527 #> AT3G52300  2.844464702 -0.230990039  0.2847611095  0.1440792472 -0.014728499 #> AT3G52850 -2.451004751  0.317018982 -0.2754667491 -0.5962796589 -0.026314902 #> AT3G52930 -0.677657924 -1.812225262 -0.9514119988  0.0590846862 -0.018693899 #> AT3G53480 -0.068420055 -0.514708313 -0.1597821829 -0.1843524275  0.080439114 #> AT3G53520  2.130569223  1.811242006 -1.4140508687  0.4152448613 -0.051219640 #> AT3G54110  2.663937663 -0.394134405  0.0250551636  0.1081821640 -0.086118938 #> AT3G54840 -1.202031887 -1.676133833 -1.4037969260 -0.7547534258 -0.824857166 #> AT3G54960 -4.489127762 -2.148864509 -0.9423425671  1.0073605583 -0.619262045 #> AT3G55360 -2.542916293 -0.559114662 -0.4351146776 -0.0000196616 -0.566026136 #> AT3G55830  1.127684018  2.215811632 -1.1541485112 -0.1074329845  0.080513750 #> AT3G56430  2.344806770 -0.303742021 -0.0397124014  0.2678529915 -0.610080384 #> AT3G56750  1.618813810  2.321461787 -0.9974139361  1.0910713946  0.684240235 #> AT3G57010 -2.191988368 -0.793146773 -0.7936978068  0.0117876234 -0.294863177 #> AT3G57020 -1.431536585 -0.173812212 -0.5137578211 -0.5188725403 -0.795450694 #> AT3G57030 -2.251635907 -0.891681120 -0.6697976171  0.5181724577 -0.830439467 #> AT3G57220 -2.921240936 -0.754431109 -0.4153888532  0.6978532312 -0.807379772 #> AT3G57650 -2.958169625 -0.516086925 -0.5272350284  0.2120920995 -0.273625116 #> AT3G57880 -2.714398443 -0.884073419 -0.7272142465  0.0949862709 -0.455962455 #> AT3G58730 -2.644915415 -2.926014573 -1.4352860865  0.7501643716  0.495601216 #> AT3G58840  2.661996387 -0.167869934  0.0533928814  0.4319218642  0.144227628 #> AT3G59280  2.168963440 -0.072618621 -0.0889382143 -0.2035028395 -0.685075906 #> AT3G59500 -2.285269099 -0.965740428 -1.7660793926 -0.4851892208 -0.754410723 #> AT3G59820  2.228429796 -0.087565458  0.4357573924  0.3859757394 -0.022544693 #> AT3G60190 -0.902319106 -0.781325233 -0.3516297003 -0.3102473946 -0.055852077 #> AT3G60600 -2.558797573 -1.125282851 -1.2056018701 -0.3583331928 -0.626257146 #> AT3G60900  0.447933118 -1.203129050 -0.9042078701 -0.9577358230 -0.514922850 #> AT3G61050 -1.524684711 -0.771125318 -0.2073607715 -0.1529596339 -0.159254365 #> AT3G61130  1.265442895  1.428991724 -1.0268656786  0.3236559275  0.361006045 #> AT3G61440  1.203439722 -0.083976840 -0.3867632450  0.7012644837  0.551549360 #> AT3G62360 -2.623653298 -0.430384202 -0.6478113631  0.2055933218 -0.715632691 #> AT3G62700 -3.308969314 -3.624208421 -2.0154902099 -0.4533105725 -0.603353562 #> AT3G63170  3.886017482 -1.763085249 -0.8487262111  0.1844307446 -1.208074496 #> AT3G66654  1.978318602  1.400182571 -0.7688239111 -0.7222479489  0.666186154 #> AT3G66658 -3.141543575 -0.988939841 -0.6415616690 -0.0111834404 -0.451248426 #> AT4G00090 -1.785681813 -0.889045455 -0.5986537049  0.3062224807 -0.869451603 #> AT4G00175 -2.377153659 -0.670203412 -0.4432978979  0.0059534139 -0.062223193 #> AT4G00740  1.617043193  1.518205005 -1.1666827507 -0.0430112191  0.242528507 #> AT4G00750  0.418882598  1.812352101 -0.2398923701  1.2897629778  0.514776555 #> AT4G00860  3.546917409 -1.070403307  0.2222815237  0.6961916220 -0.901286475 #> AT4G01100  3.068374138 -0.151114783  0.0056987279  0.3352048357  0.358038640 #> AT4G01320 -2.850381577 -0.874808605 -0.4822379500  0.1358489068 -0.471400870 #> AT4G02510  3.678943909 -1.274802117 -0.6693563931  0.9924098156  0.054201578 #> AT4G02930  1.297779474  0.201581547 -0.1784118264  0.3176702357  0.582230318 #> AT4G03550 -0.082691457 -0.410440016 -0.3916301776 -0.6479279298 -0.407517412 #> AT4G04910 -0.314071020 -0.875742394 -0.4287004027 -0.0968506297 -0.643962495 #> AT4G05020  2.738276339 -0.150027713 -0.0837854192  0.3858911600 -0.044124149 #> AT4G08850  0.267969083 -0.441271142 -0.6070439516 -0.3114041819 -0.429915210 #> AT4G09320  1.394821113 -2.027930930 -0.7799402537  0.1010901537  0.072429734 #> AT4G09580 -2.064677521 -0.306539464 -0.2019995576  0.2114060053 -0.010813026 #> AT4G11010  1.392042388 -2.177625772  0.0243104640 -1.4113966399  0.023195287 #> AT4G11150 -3.668533348 -4.237327632 -2.2179810064 -0.2072763898 -0.593462711 #> AT4G11800 -2.657828367 -0.974222158 -1.0599189777 -0.1946099165 -0.719133069 #> AT4G11850 -0.738167803 -0.897275156 -0.2013220182 -0.3730857926 -0.342339704 #> AT4G12420 -0.119066527 -0.935559070 -0.4497175694 -0.4490726781 -0.629025574 #> AT4G12590 -2.898557615  0.298830344 -0.0218457168  0.3155628903 -0.684407089 #> AT4G12650 -1.041542294  1.648737839  0.2853419978  0.3467838990 -0.197334506 #> AT4G12730 -0.255445694 -0.876499985 -0.4147271602 -0.9205527794 -0.444966830 #> AT4G13940 -1.142941277 -1.492058661 -0.4760886049 -0.1756835244 -0.144055281 #> AT4G14360  2.223039126  2.085961208 -1.3711254662  0.9069134378  0.969913739 #> AT4G14420 -3.377518580 -1.261227512 -1.1829006269 -0.2450685745 -0.637342884 #> AT4G14950 -2.334639079 -0.383342298 -0.5507385142 -0.1970747942 -0.152690434 #> AT4G15000 -1.900440976 -1.492312257 -0.3343989322 -0.2000980248 -0.043648727 #> AT4G15240  0.926814462  1.338905325 -0.8055931517 -0.4106403649 -0.005130188 #> AT4G15760 -2.675039819 -1.134669291 -0.5968144745 -0.4450533431 -0.167129760 #> AT4G16120 -0.037959839  1.477240085 -0.0503997254  0.2585274882  0.188446156 #> AT4G16170 -2.238696148 -1.183189266 -1.0133887866 -0.2751294209 -0.564776159 #> AT4G16500 -0.643094575 -1.129834184 -0.7788217432 -0.6038308541 -0.636274098 #> AT4G16650  1.514282798  0.867203396 -1.3011624566 -0.1326975016  0.208405991 #> AT4G17120 -0.661341739 -2.260350177 -1.2441524759 -0.4892111767  0.336494600 #> AT4G17140 -0.505039423 -2.286466705 -2.0996667975  0.3261148309  0.301624865 #> AT4G17170 -0.354466630 -0.719740280 -0.7096678746 -0.4345340993 -0.162368350 #> AT4G17430  0.938455265  1.796971516 -0.7781571369  0.6870514230  0.321214774 #> AT4G18030  1.226017032  1.754175687 -0.5547466742  0.6411770270  0.217096520 #> AT4G18100 -1.993859828 -1.392246221  0.1384518069 -0.3093188686 -0.077373821 #> AT4G18430 -0.982755098 -0.090694116 -0.6054392486 -0.8184013086 -0.093569707 #> AT4G19640 -0.797603292 -1.330195049 -1.2042300155 -0.3028815532 -0.494949796 #> AT4G20110 -0.466929695  1.024465996 -0.1370113204 -0.5133929348  0.711238849 #> AT4G20830  0.092925688 -0.846007185 -0.3959761180 -0.4487275825 -0.421617863 #> AT4G21150 -2.807011303 -0.456340018 -0.4668505712  0.0208718778 -0.459117187 #> AT4G21180 -1.927251908 -0.780179486 -0.5783900958 -0.1748498858 -0.613030827 #> AT4G21700 -0.280856953  0.854992936 -0.1535402916  0.1355050449  0.340770935 #> AT4G21960 -0.826227306 -0.043553371 -1.2841963477 -0.6677014901 -0.057474679 #> AT4G23630 -3.415012870 -0.476876621 -0.1887632418  0.0385144934 -0.189259627 #> AT4G23650 -1.017948001 -0.708157571  0.1796018965 -0.1857258741 -0.698657050 #> AT4G23850 -0.677601136 -2.325035956 -0.5056343851 -0.8330490043 -0.502243038 #> AT4G23940  3.054408671 -1.188334089 -0.6033659867  0.8132567391 -0.039125690 #> AT4G24190 -4.258781968 -2.256006416 -1.0736547340  0.1639671598 -0.659236701 #> AT4G24330 -2.378659770 -0.685046235 -0.5257828766  0.1975486045 -0.648999792 #> AT4G25240 -0.168770346 -0.832422828 -0.1357831188 -0.5446979595 -0.253371493 #> AT4G25720 -0.638126681  0.606044307 -1.0744823570  0.3627405686 -0.351088753 #> AT4G25900  0.410198202 -0.914710970 -0.2868265228 -0.1023303702 -0.302147360 #> AT4G26410  3.016600507 -0.390309722  0.1708807861  0.0776666274 -0.215350565 #> AT4G26690 -0.070141634 -1.066718289 -0.5535011830 -0.5991764473 -0.408658149 #> AT4G27090 -2.279198447 -0.855345271 -0.1125251886 -0.5231284181  0.307133146 #> AT4G27500 -1.494133084 -0.204666728 -0.5248645782  0.4481698062 -0.628534147 #> AT4G27520 -0.026874086 -1.223473178 -0.1087069432 -0.5433240984 -0.434991977 #> AT4G27585  2.479446181 -0.201817349  0.1768302667  0.1885018400 -0.205294149 #> AT4G28220  1.968780766 -0.188250649  0.2297336432 -0.4384877756  0.045121038 #> AT4G28390  2.871402534 -0.623595366  0.1428760131  0.2806241223 -0.509925045 #> AT4G28510  2.526000267 -0.405433819  0.4426065887  0.2138984189 -0.210665406 #> AT4G28570 -2.477948907 -0.205661626 -0.2232270311 -0.5274436463 -0.752332184 #> AT4G29130  2.834215538 -0.271980922 -0.1362237947  0.0378140036 -0.001719823 #> AT4G29480  3.556637503 -0.307832454 -0.0255722788  0.6145280254  0.282006120 #> AT4G29520 -2.599884671 -0.276039962 -0.1605922466 -0.4233395907  0.081979776 #> AT4G29900 -0.054819070 -0.851875215 -0.6296008818 -0.5529271322 -0.771059597 #> AT4G30010  3.245206698 -0.277511735  0.1872107594  0.1962426242  0.039026453 #> AT4G30090 -1.640153126 -0.522680667 -0.0343116610 -0.2079248282 -0.266128367 #> AT4G30190  0.099237815 -0.511884637 -0.2185931453 -0.4059439014 -0.395004432 #> AT4G30210 -2.259274926 -0.576189103 -0.8985044180 -0.0681514214 -0.521524579 #> AT4G30260 -0.582987021  2.178089599  0.5775238095 -0.6347758022  0.510280806 #> AT4G30600 -3.013430368 -0.971683663 -0.7481123406 -0.0670060471 -0.428613952 #> AT4G30990  1.624978906  0.985755333 -1.0977781111  0.5247182220 -0.168353318 #> AT4G31140 -0.863396273 -1.007608918 -0.0934145415 -1.0439067817 -0.113512171 #> AT4G31340 -2.241314525 -0.475487827 -0.7613987174  0.2582691548 -0.384552125 #> AT4G31430  0.189373280  0.407773377 -0.1916808459 -1.5248462476 -0.112994014 #> AT4G31500 -3.270540252 -1.434108691 -1.0225012332 -0.1217344701 -0.325123403 #> AT4G31700  0.057702552 -2.376115708  0.4834035301  0.2774719655 -0.218237702 #> AT4G32130 -2.793237309 -0.632480511 -0.4179525475  0.1208838902 -0.164668529 #> AT4G32250  3.981578922 -1.118024094 -0.7846400079  0.2023405285  0.249615508 #> AT4G32400  4.546244153 -1.495794048 -0.3255392231 -0.1775303589  0.379373032 #> AT4G32410  0.179069617  1.141268238  0.0257589748  1.0430829094  0.650745565 #> AT4G32470  2.498528743 -0.415334877  0.1070443333  0.2486424574 -0.397895817 #> AT4G33350  3.965937702 -1.796970322 -0.2687072065 -0.5777316963 -0.145705861 #> AT4G33360 -2.008839831 -1.073315025 -0.9408221405  0.2783324251 -0.405220454 #> AT4G34200  1.266581612 -0.950296663 -0.0730786033 -0.6368904397 -0.729991959 #> AT4G34640 -2.306318580 -0.020049091 -0.2317814020  0.2581931219 -0.487129481 #> AT4G34960  1.140003408  2.247385210 -0.6951846764  0.2728867601  0.202779758 #> AT4G35000  2.959017408 -1.780718907 -0.0147757176  1.0075510154 -0.983081448 #> AT4G35100 -0.166462715 -1.022710180  0.2078509535 -0.6414861198 -0.512722381 #> AT4G35230 -0.707394620 -1.003539341 -0.1862952341 -0.5543525769 -0.521682259 #> AT4G35790 -0.492902308 -0.925872106 -0.7470978437 -0.7747786504 -0.764663269 #> AT4G36220 -2.548541397 -0.851760369 -1.0242911676  0.5727119159 -0.150786647 #> AT4G36250 -1.716024376 -0.268800449 -0.4681798205 -0.1478027805 -0.614570611 #> AT4G36480 -2.877967921 -0.996794927 -0.4696108245  0.2337458325 -0.445459705 #> AT4G36750 -1.034982985 -0.973752451 -0.2115590913 -0.6949619752 -0.181289029 #> AT4G37330 -2.358374968 -1.119722040 -1.0653785263  0.1227804987 -0.581806484 #> AT4G37370 -2.663875285 -0.392768576 -0.3781302140  0.0271535395 -0.460222802 #> AT4G37410 -1.831478115 -0.419039531 -0.7907318457 -0.0850383767 -0.884984371 #> AT4G37430 -1.748710055 -0.171297063 -0.6418268566 -0.0330731219 -0.445691855 #> AT4G37640 -2.455425002 -0.901494008 -0.4088993290  0.0360419788 -0.139526333 #> AT4G37690  0.377290603  2.268855780  0.0493943352  0.7315718019  0.454814133 #> AT4G37820  2.971728920  2.141344804 -1.9771715979  0.4595285261  0.032681209 #> AT4G38215 -3.830025912 -1.899844996 -0.5117855986  0.0048531712 -0.528796548 #> AT4G38240  1.951470874  0.850259922 -1.6863486345  0.7601854368  0.452381507 #> AT4G38270  1.055079337  0.725655308 -0.9423997918 -0.4067768147  0.434924816 #> AT4G38350 -3.059760925 -3.436550317 -1.6810671634 -0.6632755873 -0.348031687 #> AT4G38500  1.708334590  1.658220816 -1.0800315123  0.5545782534  0.064330552 #> AT4G39030  3.877852703 -0.588280605 -0.6931176157  0.5659976843  0.410516219 #> AT4G39080 -3.295861918 -3.805165894 -2.1095092758 -0.7353636018 -0.376663988 #> AT4G39400 -0.513015572 -0.790996209 -0.6380991946 -0.5282460515 -0.199361932 #> AT4G39460  3.961775805 -0.810319433 -0.7948668357  0.7038965132  0.309510198 #> AT4G39690  2.908032444 -0.859104963  0.0380910456  0.2561581803 -0.616590097 #> AT4G39840  2.819238941  1.825786798 -1.6412410501  1.0834459668  0.288704518 #> AT4G39990  0.292256813 -0.397937171 -0.6363923372 -0.5588249497 -0.331720996 #> AT5G01500  3.714638370 -1.162554358 -0.4872895268  0.0932922698  0.282612698 #> AT5G01590  4.574120094 -1.472686215 -0.7098217262  0.0420278351  0.123194351 #> AT5G02450 -1.178069053 -1.858970503 -0.6522756546 -0.2481705034 -0.278554255 #> AT5G02870 -0.435920174 -1.508611234 -0.7938271642 -0.8927614780 -0.430122600 #> AT5G03160 -2.799383971 -0.730009097 -0.6868993186  0.5904596459 -0.169580826 #> AT5G03895  3.816533839 -1.182819743 -0.4855517927  0.3788787242  0.566162531 #> AT5G04060  0.057329224  1.595323918  0.2867929543  0.0728987447  0.569458133 #> AT5G04480  0.904050256  0.007255774 -0.8701802297 -0.5010060495 -0.150664007 #> AT5G04885 -0.038026460 -1.088161323  0.0175094733 -0.9181021515 -0.585248641 #> AT5G04930 -0.493084584 -0.202956811 -0.3623790173 -0.4556731450  0.193133523 #> AT5G04990 -1.315981548  0.296412210 -0.5794764144 -0.6016131948  0.042391044 #> AT5G05000  4.093651555 -1.729017362 -0.5114751664  0.3377327288  0.065452078 #> AT5G05170  0.811121007  1.580734551 -0.2147972513  0.8396273400  0.645517450 #> AT5G05520  3.379175131 -0.441495004 -0.2156377512  0.3450859465  0.291683347 #> AT5G05670 -2.146650123 -0.532926750 -0.2238248755  0.8177193320 -0.275112937 #> AT5G06320  0.064980426 -0.165471844 -0.6137844726 -0.3024778813 -0.237143401 #> AT5G07340 -2.823368489 -0.637187931 -0.5560874364 -0.3556010173 -0.611422817 #> AT5G07910 -0.558956505 -0.754674271 -0.1556808941 -0.7163175082 -0.094634798 #> AT5G08040  2.885194955 -0.233976437 -0.1472179078  0.2218800832  0.145546034 #> AT5G08080 -0.699355279 -0.204593975  0.2948213312 -1.3657080141 -0.199594285 #> AT5G08545  4.403145287 -1.173343397 -0.7322016893  0.0413477443  0.482377756 #> AT5G09400 -3.637517093 -3.804991795 -1.8726361933 -0.3468408539 -0.072343190 #> AT5G09420  2.830657513 -0.791454529  0.3384232924  0.3965737382 -0.144513689 #> AT5G09810 -0.800394828 -1.848131601 -1.0987987390 -0.3656059302 -0.657372603 #> AT5G10360  0.057702552 -2.376115708  0.4834035301  0.2774719655 -0.218237702 #> AT5G10840  1.064691502  1.549128693  0.7980510907  0.4395174108  0.725625689 #> AT5G11560 -2.695692306 -0.952617267 -0.8914635796  0.1166231469 -0.537165532 #> AT5G11730  0.386709033  2.181776581  0.4412107248  0.1280256099  0.407690822 #> AT5G12290  2.925440552 -0.188703170 -0.0623747898  0.7627809199  0.115093616 #> AT5G12470  4.000367766 -1.407308251 -0.2687300650 -0.1033518560  0.094472731 #> AT5G12860  4.278721511 -1.353229604 -0.6111204078 -0.0266130604 -0.130461399 #> AT5G13450  2.262499367  0.203659072 -0.3318570598  0.0539235114 -0.050264177 #> AT5G13490  2.847029856 -0.527796505  0.3698438131  0.0408291637 -0.483029964 #> AT5G13610  2.854266160 -0.239673014 -0.2172810742  0.4453631352 -0.885340651 #> AT5G13640 -2.507900855 -0.744467058 -0.7164950556  0.1561176918 -0.409049094 #> AT5G14040  2.973144126 -0.497362877  0.1883939550  0.2394533439 -0.165738583 #> AT5G14220  2.503252558 -1.193581099 -0.4800114197  1.3340111067 -0.284832796 #> AT5G14430  2.236607720  1.511046883 -1.5043258852  0.0414426472  0.194233565 #> AT5G14950  1.655463298  1.120683393 -1.5814748216  0.0264901157 -0.045803637 #> AT5G15090  3.074271627 -0.574545592 -0.0256239884  0.3685792296 -0.017828866 #> AT5G15910  1.298197519 -1.300196216  0.4649883393 -0.5398929821 -0.158298473 #> AT5G16910  0.627209249  1.580852008 -0.0867591117  0.3372242953 -0.092434224 #> AT5G16930  2.926734510 -0.235754093 -0.0258086739  0.3899513968 -0.321047503 #> AT5G17760 -0.705129851 -1.045447081 -0.2404915460 -0.0367002274  0.002393442 #> AT5G17770 -1.814814898 -0.801400885 -0.5277252736 -0.2869285919 -0.163126840 #> AT5G17920 -1.138068387 -1.738947826 -0.8510552481 -0.4707598827 -0.126031262 #> AT5G17980 -2.908915942 -1.122736545 -0.7213198441 -0.1060488077 -0.283296870 #> AT5G18280  0.766928423  1.115347068 -0.8395593576  0.2248516069  0.083019364 #> AT5G18485  2.410101829  2.066731518 -1.2478922171  0.0698802842  0.579252970 #> AT5G18800  3.578521777 -0.083855258 -0.1881780000  0.2211549304  0.793319941 #> AT5G18900 -1.036083998 -0.166265380 -0.9783130893 -0.6023413975 -0.208459867 #> AT5G19130 -2.601482161 -1.115131802 -0.7058172898 -0.4489278345 -0.329433233 #> AT5G19320 -2.510122776  0.099628983 -0.2599773510  0.1517115378 -0.902611591 #> AT5G19550 -0.720900612 -1.558874563 -0.8928933975 -0.2317062028 -0.330210664 #> AT5G19620  4.544312708 -1.452357524 -0.5645496657  0.2462715192  0.440269002 #> AT5G19690 -2.233467049 -0.594332215 -0.7340778080 -0.2843714867 -0.652592600 #> AT5G19760  2.775362126 -0.141912782  0.1538719305  0.1441485404 -0.103286897 #> AT5G20090  1.974243928 -0.316658383  0.1008299606  0.0118536194 -0.349894872 #> AT5G20290  1.145363371 -2.645145413  0.0218752225 -0.5243919177 -0.265720009 #> AT5G20350  0.079109969  1.749285904  0.0182159970  0.5986676587 -0.241194202 #> AT5G20520 -2.063599983 -0.974561942 -0.3177452309 -0.3036193974 -0.335499405 #> AT5G20655 -2.154902031 -0.610687374 -0.7094572917 -0.3599419016 -0.503598384 #> AT5G22640  3.653034547 -2.210415906 -0.1362766540  0.2046177586 -0.111556622 #> AT5G22790  4.334783114 -1.023288202 -0.5169597744  0.2773367295  0.344444539 #> AT5G23300  2.443373161 -0.241363460 -0.0326608700  0.4265106730 -0.519976366 #> AT5G23575 -2.625197520 -0.810258386 -0.5549801386  0.0822315267 -0.380363245 #> AT5G23630 -2.293686367 -0.577453623 -0.2626979441 -0.2004859092 -0.426191579 #> AT5G23850  0.281146866  2.112016464  0.1599374498  0.2534565641  0.404842745 #> AT5G23890  3.699959167 -1.595420786 -0.2320592941  0.3153435734  0.120688911 #> AT5G24290 -0.842054098 -1.821254294 -0.8514385331 -0.9041010353 -0.493310565 #> AT5G24690  3.903865188 -0.854706856 -0.7852568077  0.1152802885  0.829156030 #> AT5G24810 -2.037642082 -0.552835913  0.0157271730  0.0479909322 -0.230163890 #> AT5G25100  1.022539089  2.534664543  0.0293536594  0.7215465602  0.270727850 #> AT5G25900 -2.807472994 -1.122830416 -0.5935937636 -0.0943361439 -0.583827417 #> AT5G26030  2.792892758 -0.535007532 -0.4862373088 -0.4569935973  0.260486757 #> AT5G26260 -0.434094561 -1.468318598 -0.7668307411 -0.0617834615 -0.335581211 #> AT5G26280  0.080219838 -1.563447072 -1.5073407701  0.1792943448 -0.174705839 #> AT5G27330 -2.270150035 -0.118094343 -0.2953361783  0.5472545703 -0.616815162 #> AT5G27540  2.758260469 -0.254321534  0.0255871295  0.1426676872  0.089597934 #> AT5G27850 -0.255733881 -2.313289746  0.0376856209 -0.7701822880  0.551396218 #> AT5G28060  0.658206872 -0.624267523  0.2703813121 -0.3001251837  0.615619469 #> AT5G33320  2.596556305 -1.162327456 -0.9083777789  1.7040960554  0.111219932 #> AT5G35160  0.777430121  1.914365347 -0.3074388989  0.4954762741  0.333058276 #> AT5G37310  2.214671562  1.420005847 -1.2886733189  0.5272528282  0.549807584 #> AT5G39040 -2.700898488 -3.117027775 -1.9479345761 -0.6174053152 -0.318387829 #> AT5G39410 -0.547063015 -1.210015543 -0.8261808540 -0.1378816982 -0.268153498 #> AT5G39510 -4.218832914 -4.313476074 -2.5392708637 -0.4782678245 -0.660209988 #> AT5G40480 -1.210772144  0.405381130 -0.2089802165 -0.5781709381 -0.138606413 #> AT5G42020 -3.161120001 -1.002731985 -0.9482200079  0.4398545259 -0.784051359 #> AT5G42080 -0.719723236 -0.770469409 -0.3933273222 -0.3869214736 -0.087283363 #> AT5G42570 -3.229809653 -0.972333101 -0.5318855865 -0.3494754047 -0.599906898 #> AT5G42960  4.534538115 -0.822829580 -1.1811413495  0.2611948446  0.712273196 #> AT5G42980 -1.461598508 -1.616756890 -1.2518951440 -0.1800344202 -0.072198240 #> AT5G43100 -0.729563679  1.449183546  0.3741096621 -0.8956748367  0.542542476 #> AT5G43460 -1.811439560 -0.397208321 -0.6350423122 -0.2987758603  0.363995690 #> AT5G43970  3.254319817 -0.463864010 -0.0066529678  0.2323235415  0.095593738 #> AT5G44240  0.910130450  0.208842657 -1.4127107848  0.5301425159  0.298864260 #> AT5G44790 -0.289190159  1.596423606  0.2589178286 -0.4568742636  0.334464607 #> AT5G44920 -2.815442462 -1.353173107 -0.9434927506 -0.0220473742 -0.730864730 #> AT5G45130 -0.681018351 -0.396782983 -1.0209639795 -1.0469929157 -0.518623200 #> AT5G45160 -3.216707087 -1.335267564 -0.8099444026  0.0457957508 -0.167240382 #> AT5G45420 -2.373327080 -0.777261177 -0.3405428216  1.2042593181 -0.306550186 #> AT5G45470 -1.004309666 -0.973514971 -0.5358811371 -1.0345984088 -0.761670402 #> AT5G45480 -0.488831146 -0.625881137 -0.0872107155 -0.2336270240 -0.151805292 #> AT5G45750 -1.462758335 -0.312114224 -0.4916299214 -1.3103976953 -0.052961420 #> AT5G46800  3.213596673 -0.560415882  0.1787791699  0.5140773129 -0.382411434 #> AT5G47420 -2.623722802 -1.219147515 -0.9516461205  0.3060981425 -0.725069750 #> AT5G47910 -0.687421015 -0.573292711 -0.4839732829 -0.4787061228 -0.272495782 #> AT5G47990 -1.170967794 -0.354407604 -0.8995507408 -0.1827572204 -0.642816002 #> AT5G48000 -1.361406221 -0.428793977 -0.3187635536 -0.2012430483 -0.574311338 #> AT5G48030 -0.214906702  0.311203849  0.2471342746 -0.4051906935 -0.768167699 #> AT5G48810 -2.172976821 -0.350474159 -0.5537206471  0.1766981284 -0.527148250 #> AT5G49760 -0.336610567 -0.612779274 -0.2581347513 -0.2350340591 -0.321369284 #> AT5G49945 -2.700346328 -1.161449636 -0.9273865885  0.4150045368 -0.458213592 #> AT5G50000 -0.244851945 -0.332431765  0.3376298726 -0.8263318109 -0.320513296 #> AT5G50370  2.774887063 -0.469743224 -0.0358509298  0.7505355966 -0.748509987 #> AT5G51570 -3.023796457 -3.548653520 -1.5904115796 -0.2982639260 -0.346618927 #> AT5G52240 -2.921089463 -0.838619011 -0.4766646010  0.2635983194 -0.739936904 #> AT5G52420 -3.498518786 -1.038492277 -0.5047857779 -0.4971940084 -0.555941262 #> AT5G53170  3.029658490 -0.641696762 -1.3036265906  0.9833017478  0.474851756 #> AT5G53560 -3.233599183 -1.023815352 -0.8606045847 -0.0890333433 -0.530747341 #> AT5G54100  2.905893917 -0.020899760 -0.0981977357  0.4859212531  0.199098239 #> AT5G55070  2.571495462 -0.080216066 -0.1150056682 -0.0880633015  0.019243501 #> AT5G55480 -0.107088681 -0.911126422  0.0062976688 -0.8694843361 -0.334184274 #> AT5G55610  3.353707272 -0.652033923 -0.1352023491  0.7055919998  0.214497978 #> AT5G55730  0.337546004 -1.313053375 -0.4201254169 -0.4308239011 -0.543240515 #> AT5G55940 -2.722918039 -0.410113078 -0.6182977394  0.1841412985 -0.867226532 #> AT5G56730  3.159361416 -0.824361047 -0.6153093354  0.0891985635  0.111645091 #> AT5G57110 -0.149651407 -1.211964521 -0.1909366171 -0.7157906399 -0.404245506 #> AT5G57490  2.101569008 -0.645815974 -0.3954507479 -0.3759123276  0.276652033 #> AT5G57655 -3.547253756 -2.231202303 -1.1208464141  0.2324142869 -0.221395912 #> AT5G57800 -0.314664417  0.327453656 -0.4834761781  0.2442770457 -0.554586027 #> AT5G58070 -1.657451642  0.118461223 -0.0462209346 -0.0908523870 -0.313756701 #> AT5G58090 -0.589692545 -0.905440802 -0.2192164675 -0.5866203730 -0.135751808 #> AT5G58100 -1.190919810 -0.342926803 -0.9788701952 -0.0389322283  0.025431972 #> AT5G58270  3.243397885 -0.554928639 -0.2370362828  0.1614786950 -0.075915998 #> AT5G58640 -2.724531562 -0.967979373 -0.7964241225  0.0997053355 -0.825953933 #> AT5G60640 -4.217001447 -2.426661414 -1.2950788220  0.1842999650 -0.659906132 #> AT5G61240  2.176551658  1.939007259 -1.2565815945 -0.1352342169 -0.070857119 #> AT5G61790 -2.859885100 -0.906224853 -0.5785156443  0.0355166833 -0.450125826 #> AT5G61840  2.636485776  1.565164053 -1.6944773881  0.0399183528 -0.320076719 #> AT5G62390 -1.741651863 -0.267811044 -0.2930855098 -0.2292225091 -0.027203552 #> AT5G62670  0.417065272 -0.404904331 -0.0399903499 -1.4499934579  0.218480533 #> AT5G62740 -1.604920456 -1.913064304 -1.0890706633 -1.1650070227 -0.454962495 #> AT5G63030 -0.509719425 -1.367774200  0.2109431357  0.2200602030 -0.546095993 #> AT5G63400  3.283299292 -1.044099736  0.2624687775  0.3249158287 -0.810509416 #> AT5G63840 -2.463750872 -1.285040262 -1.2990470990  0.0357448288 -0.274190800 #> AT5G64030 -0.444090863  2.097434478  0.3053544081  0.5508174766  0.742304257 #> AT5G64100  0.938954990 -0.672058795 -0.1124684396 -0.3424980130 -0.355172891 #> AT5G64290  3.667962960 -0.982918499 -0.7408347016  1.2328915685  0.490994338 #> AT5G64440 -2.603286565 -1.981715736 -1.2331233739 -0.3907269196 -0.562754054 #> AT5G64970  3.928408695 -0.680738801 -1.3040430163  0.0967480077  0.333025473 #> AT5G65250  3.973978272 -2.186618142  0.6412292811  0.1305956891  0.592073428 #> AT5G65270 -0.741507570 -0.722134586  0.0287354222 -0.4521297526 -0.248452736 #> AT5G66680 -2.684691335 -0.479777825 -0.5077424400  0.3479196728 -0.675121732 #> AT5G67500  2.872519960 -0.724949467  0.0030269830  0.2378448111 -0.118246687 #> COB        2.673853169  0.470245412  0.7224879955  0.0395714473  0.460352969 #> COX2       2.246443163 -0.193077758 -0.2727983030 -1.1531692248  0.301714226 #> NAD5       2.390194151 -0.303860926  0.1432386301 -0.2803754729  0.065966927 #> ORF25      2.437697831 -0.504028804 -0.2821572231  0.0159060291 -0.059944908 #> ORFB       2.547352019 -0.257310313  0.5071637981 -0.0495762042  0.027591294 #> RPS7-01    4.492790291 -1.909199038 -0.3546145922  0.3580445156 -0.188156072 #>                    PC6           PC7           PC8 #> AT1G01610 -0.494509915 -6.287342e-04  1.517268e-03 #> AT1G02120 -0.749899899  2.341049e-05  1.608980e-04 #> AT1G02520 -0.376088809  1.083705e-03  4.727368e-04 #> AT1G03220  0.108759918  9.884710e-05  6.557080e-04 #> AT1G03860 -0.291052245  2.539481e-04 -2.494125e-03 #> AT1G04120 -0.847509829  3.322061e-03 -1.339738e-03 #> AT1G04430 -0.393512028 -5.558835e-04  1.862521e-03 #> AT1G04910  0.005985248 -1.467695e-03  1.046365e-03 #> AT1G05070 -1.005107493 -4.545905e-05  2.586308e-04 #> AT1G05500 -0.657513424  1.714170e-04 -1.902161e-03 #> AT1G06530 -0.231306539 -7.345551e-04  6.355952e-04 #> AT1G06840 -0.330276147  1.517507e-03 -8.539287e-05 #> AT1G06890 -0.393311749 -1.533050e-03  4.709468e-03 #> AT1G06940 -0.200452023 -1.462136e-03  1.656668e-03 #> AT1G07510  0.108284526 -2.783817e-03 -3.741911e-04 #> AT1G07670 -0.225839923 -1.237900e-05 -3.867270e-05 #> AT1G07810 -0.425394020  1.323002e-04 -2.302327e-05 #> AT1G08470 -0.451327397  3.145847e-03  8.340161e-05 #> AT1G08480  0.283992344  4.363856e-04  2.582199e-03 #> AT1G08660 -0.420666444  1.419237e-04 -7.837044e-04 #> AT1G09210 -1.031347102  4.361834e-04 -2.121431e-03 #> AT1G09330 -0.634073137 -3.105529e-03 -1.727461e-03 #> AT1G09630 -0.354944309 -2.605782e-05  1.516101e-03 #> AT1G09870 -1.447986900  1.754558e-04  3.875520e-04 #> AT1G10130 -0.056735152  2.085083e-04 -1.983071e-04 #> AT1G10290 -0.359706793 -5.992392e-03 -2.107826e-04 #> AT1G10510 -0.203060583  3.008974e-04 -2.404111e-03 #> AT1G10950 -0.425526560 -7.506142e-04 -6.406285e-04 #> AT1G11320 -0.529722602  2.848754e-04 -1.405494e-03 #> AT1G11330 -0.602417203 -8.410022e-04 -2.793326e-06 #> AT1G11580 -0.592699199 -9.900821e-04  5.915916e-04 #> AT1G11680 -0.465304529  1.444740e-03  5.719828e-04 #> AT1G12840 -0.085371762 -2.553195e-03 -9.455682e-05 #> AT1G13280 -0.349886500  2.050957e-03  2.608715e-05 #> AT1G13900 -0.397963388 -2.912238e-04  9.235141e-04 #> AT1G14010 -0.887066207  1.722290e-04 -4.570469e-03 #> AT1G14320 -0.875576971  1.265896e-03 -1.502233e-03 #> AT1G14670 -0.419321900  5.893884e-03  3.748923e-04 #> AT1G14830 -0.311821513 -1.119553e-04  1.715239e-03 #> AT1G14850  0.129438168  3.661767e-05 -2.288975e-04 #> AT1G14870 -0.804540478 -1.211030e-04  1.346373e-04 #> AT1G15210 -0.438245233  9.497963e-04 -1.769915e-03 #> AT1G15500 -0.179003364  2.187765e-04  3.502471e-05 #> AT1G15690 -0.651153046  6.867254e-04  9.891389e-04 #> AT1G16920 -0.531284666  1.657226e-04 -2.366050e-05 #> AT1G17290 -0.006013855 -1.164510e-03 -8.736983e-05 #> AT1G17500 -0.565546275 -1.593611e-03 -2.407830e-03 #> AT1G18260 -0.804926161 -3.521111e-05  3.289357e-03 #> AT1G18540 -0.862157217 -7.576982e-04 -1.383453e-03 #> AT1G18700 -0.749768543  1.288941e-03  1.578723e-04 #> AT1G19360 -0.141742292 -6.051133e-04  5.915145e-04 #> AT1G19370 -0.618046972  2.087529e-03  6.824942e-05 #> AT1G19430 -0.133555946 -2.046930e-03  1.135581e-03 #> AT1G19710 -0.202858557  6.243049e-03 -4.589941e-03 #> AT1G20330 -0.469803131  2.327439e-03  6.154812e-04 #> AT1G21480  0.155820507 -1.709089e-04  2.567532e-03 #> AT1G21750 -0.598833112 -1.081362e-03 -8.226618e-04 #> AT1G22200 -1.080283161  9.355491e-05  3.445696e-03 #> AT1G22280 -0.387566416 -1.512469e-03 -1.355591e-04 #> AT1G22530  0.231379596  1.615071e-04 -4.783824e-04 #> AT1G24510 -0.588288898 -6.431043e-05  1.495032e-05 #> AT1G26850 -0.108653780 -3.940287e-04 -5.660713e-05 #> AT1G27190 -0.161701928  1.424158e-03  1.445332e-03 #> AT1G27390 -0.134739049  4.162191e-05 -1.231711e-04 #> AT1G27770 -0.297146475  2.515994e-03 -9.577297e-04 #> AT1G27930 -0.106076115  1.386003e-05 -1.453867e-05 #> AT1G27950 -0.541550609  2.885915e-03  8.702725e-05 #> AT1G27980 -0.793888947  2.146147e-03  2.562677e-04 #> AT1G28340 -0.103895401 -3.760245e-04 -1.301444e-04 #> AT1G29020 -0.493825115  2.266433e-03 -1.025495e-03 #> AT1G29470 -0.283444683  8.396704e-04  6.707391e-05 #> AT1G29790 -0.398840531 -1.304395e-03  7.567337e-04 #> AT1G29980 -0.525372704  4.245307e-04  4.468149e-04 #> AT1G30000 -0.276781463 -2.133500e-05  1.219937e-03 #> AT1G30360 -0.254853690 -8.134941e-04 -8.468107e-05 #> AT1G30400 -0.402009800  3.479793e-04  1.295798e-04 #> AT1G31130 -0.282877195 -2.705152e-04 -8.376105e-05 #> AT1G31850 -0.075444886 -1.216501e-04  1.026466e-03 #> AT1G32090 -0.448405185 -5.297971e-05 -5.546313e-05 #> AT1G32210 -0.344382063 -7.009747e-06  2.315656e-05 #> AT1G34130 -0.642007373  2.180090e-03  5.269644e-04 #> AT1G35620 -0.852246133  5.237708e-05 -5.437920e-04 #> AT1G42960 -0.371224809 -3.470531e-03  4.722473e-03 #> AT1G43170 -0.857060439 -4.277476e-04 -2.102124e-04 #> AT1G43890 -0.464989683  1.069016e-04 -1.276067e-03 #> AT1G43910 -0.566198037 -4.307315e-04  5.149999e-04 #> AT1G44170 -0.402542549  2.103405e-03  2.845115e-05 #> AT1G47260 -0.267957262 -2.764967e-03 -3.319004e-03 #> AT1G48920 -0.202459780 -4.115626e-03 -1.219051e-03 #> AT1G49710 -0.198381135  2.105632e-04 -1.461607e-04 #> AT1G50460 -0.130072251  1.272313e-03 -1.672166e-03 #> AT1G51540  0.010227917  9.498815e-05 -1.119025e-04 #> AT1G51570 -0.579639856  2.040896e-03  9.142644e-05 #> AT1G51590 -0.131740151 -1.291322e-03 -1.697728e-03 #> AT1G51630 -0.066721011 -9.407114e-04  1.749277e-03 #> AT1G51760 -0.654174258  1.687063e-03  2.584287e-04 #> AT1G51980 -0.547758693  1.164065e-03  4.334147e-04 #> AT1G52260 -1.301643898  1.059171e-03  5.085773e-03 #> AT1G52600 -0.773003055  4.109817e-03 -9.824955e-04 #> AT1G52780 -0.140520691  4.746190e-04 -9.704720e-04 #> AT1G53000 -0.122545242  3.008444e-04 -2.485570e-03 #> AT1G53210 -0.404330593  6.366360e-03 -1.241771e-03 #> AT1G53760  0.068320952  2.828892e-04 -3.318159e-03 #> AT1G53840  0.054551081 -1.029358e-03 -1.640238e-03 #> AT1G54000 -0.573692773 -3.534368e-04  1.063998e-04 #> AT1G54990 -0.464091062 -2.232412e-04 -2.356674e-03 #> AT1G55130 -0.797812336  3.199453e-03  2.881897e-04 #> AT1G55160 -0.028440373 -3.327967e-03 -3.133198e-04 #> AT1G55850 -0.926019033  1.694493e-04 -1.105666e-03 #> AT1G56070 -0.348137909  2.694749e-06  1.707020e-03 #> AT1G56140 -0.699920199  2.200903e-03 -2.298114e-03 #> AT1G56340 -0.933330540  2.358180e-03 -1.253362e-03 #> AT1G59820 -0.437592487 -1.879743e-04 -2.322793e-05 #> AT1G59870 -0.384841806  4.520216e-04 -3.503136e-04 #> AT1G61770 -0.471925116  1.445836e-04  7.676683e-04 #> AT1G61790 -0.749969171 -3.676656e-03 -5.822914e-05 #> AT1G63010 -0.657167794  1.735741e-03  1.281651e-04 #> AT1G63050 -0.183165842 -1.232255e-04 -1.073281e-04 #> AT1G64090 -0.560848618 -1.309466e-03 -4.767806e-03 #> AT1G64880 -0.314369202  7.445373e-05  3.135423e-03 #> AT1G64950 -0.418971355 -2.899645e-03  6.728681e-04 #> AT1G65020 -0.350539585  6.044866e-03  1.159428e-04 #> AT1G65270 -0.864807415 -9.506362e-04  1.351603e-04 #> AT1G65540 -0.013136234 -9.881299e-04  7.249883e-04 #> AT1G65820 -0.497125397  1.922632e-04 -1.165110e-03 #> AT1G66270 -1.194644397 -7.877573e-05  1.764760e-03 #> AT1G66280 -0.497596206 -4.684523e-05  4.303086e-05 #> AT1G67490 -0.944756363  7.963567e-04 -1.048672e-03 #> AT1G67730 -0.305309084 -7.784601e-04 -2.231832e-03 #> AT1G69460 -1.341032614  4.446450e-05  2.624634e-03 #> AT1G69840 -0.664803489  3.826729e-05  8.594592e-04 #> AT1G70770 -0.791885925  4.440757e-04 -3.803916e-04 #> AT1G71220 -0.743206702  1.541728e-04  1.909520e-03 #> AT1G71780 -0.545185506 -1.883536e-03 -8.135548e-06 #> AT1G72090 -0.445431426 -1.193261e-03 -4.775690e-03 #> AT1G72370 -0.775715429 -2.375453e-05  1.232182e-04 #> AT1G72480 -0.112751324  3.031754e-03  1.531476e-04 #> AT1G73990  0.172403137  3.497120e-03 -1.097301e-04 #> AT1G74380 -0.604153982  1.335804e-03  1.476070e-04 #> AT1G74790 -0.706589379  2.173907e-03  7.156306e-04 #> AT1G75140 -0.972126524  1.034114e-04  2.343889e-04 #> AT1G76040 -0.206065619  1.543789e-04 -1.218661e-03 #> AT1G76270 -0.259368038  1.477979e-04 -2.228744e-05 #> AT1G76400 -0.660988003 -8.008718e-04 -3.309596e-04 #> AT1G77120 -0.188907063  1.230651e-03 -1.254479e-03 #> AT1G77510 -1.049763557  1.173803e-04  2.297134e-04 #> AT1G77590 -0.437904042  7.831342e-04  2.226293e-03 #> AT1G78240  0.182280109  2.114615e-04 -1.235139e-03 #> AT1G78850 -0.489567744 -1.501576e-03 -7.935416e-05 #> AT1G78900 -0.555581732 -3.461900e-04  3.662769e-04 #> AT1G78920 -0.444013527  1.070112e-04 -1.154321e-03 #> AT1G79560 -0.082868172  3.346026e-04 -2.637305e-05 #> AT1G79940 -0.573026631 -3.805903e-04 -4.442633e-04 #> AT1G80300 -0.267713016  9.090426e-04 -1.118116e-03 #> AT1G80950 -1.226132405 -2.917813e-03 -2.240918e-03 #> AT2G01250 -0.101165575 -3.006178e-03 -1.389450e-03 #> AT2G01270 -0.429663867  2.120533e-03 -9.701725e-04 #> AT2G01470 -0.631493176 -2.318485e-03 -1.002521e-03 #> AT2G01630 -0.343621821  1.428765e-03  1.071255e-03 #> AT2G01720 -0.826664263 -9.601471e-04  1.167188e-03 #> AT2G01970 -0.115891295  3.059212e-03  2.388386e-03 #> AT2G02040 -0.521672546  2.361157e-03  1.821882e-04 #> AT2G03120 -0.748568078  3.021267e-03  1.683354e-04 #> AT2G03510 -0.855093089  1.103999e-03  8.645241e-04 #> AT2G04280 -0.056124070 -1.447952e-03 -1.661666e-03 #> AT2G04350 -1.074908526  5.651905e-04  1.871240e-04 #> AT2G04780 -0.459414489  7.573171e-05 -1.071811e-04 #> AT2G04940 -0.198946259  4.375976e-04 -4.919088e-03 #> AT2G09990 -0.720913167 -1.556406e-04  4.932672e-03 #> AT2G14720 -0.169381371  3.592547e-03  7.036802e-05 #> AT2G14740 -0.417940545 -3.847238e-04 -3.305908e-05 #> AT2G16060 -0.319035238  2.149112e-04 -9.602115e-05 #> AT2G16460 -0.118701219  2.143448e-04 -9.242958e-05 #> AT2G16530 -0.525875758  3.526398e-04  1.271324e-04 #> AT2G16640 -0.473280013  1.328974e-03  1.502276e-04 #> AT2G16660 -1.248417411  2.371860e-03 -1.233551e-03 #> AT2G16760 -0.629912012 -1.473301e-04  4.827548e-03 #> AT2G17440  0.000595965 -3.077125e-03  4.329868e-03 #> AT2G17720 -0.658349454  3.039078e-03  1.447558e-04 #> AT2G18193 -0.476802443  1.685778e-03 -6.825821e-04 #> AT2G18330 -0.125665214  2.544924e-04  2.340393e-03 #> AT2G18690  1.165625557 -5.093349e-03  4.028503e-04 #> AT2G18960 -0.420827453 -1.783285e-06 -1.042865e-03 #> AT2G19080  0.035707059  3.078594e-03 -2.291399e-03 #> AT2G19860 -0.005937408  6.293729e-05 -3.586335e-05 #> AT2G20360 -0.369673388 -1.444161e-03 -1.128590e-05 #> AT2G20370 -0.139769602  1.410640e-04 -1.903531e-03 #> AT2G20450 -0.596199000 -2.038304e-03 -3.263366e-05 #> AT2G20800 -0.172426129  3.122759e-03 -1.780733e-03 #> AT2G20807 -0.533621593 -7.498681e-04  2.360140e-03 #> AT2G20940 -0.108633644  6.081359e-03 -1.580323e-03 #> AT2G20990 -0.545396866  8.203242e-04  2.679770e-05 #> AT2G21160 -0.826619543 -5.832478e-04 -7.641645e-04 #> AT2G21410 -0.881690688 -1.532767e-03 -2.260076e-03 #> AT2G21600 -1.421560267  1.597288e-04 -2.042772e-03 #> AT2G21870 -0.044323543  8.001368e-05 -1.397331e-04 #> AT2G22900 -0.327822676  1.970556e-04  5.992666e-05 #> AT2G23810 -0.713095399 -1.029010e-04  6.819867e-05 #> AT2G24180 -0.772629811 -1.804102e-03 -1.555390e-06 #> AT2G24420 -0.680638320  9.386178e-04  1.098906e-04 #> AT2G25110 -0.440445683  5.815535e-03  2.555154e-03 #> AT2G26140 -0.079753931  3.046065e-03 -1.839488e-03 #> AT2G26250 -0.870429202  1.349018e-04  1.036267e-03 #> AT2G26300 -0.514981620  4.041061e-05 -4.767935e-03 #> AT2G27490 -0.901723269  1.728656e-05  1.093056e-04 #> AT2G27730  0.019181354 -1.359118e-03 -3.293023e-04 #> AT2G28520 -0.218619658 -2.216797e-04 -1.668158e-03 #> AT2G29080 -0.055451800  1.686165e-04 -1.768161e-03 #> AT2G29960 -1.080580567 -5.766276e-03  1.538929e-05 #> AT2G29990 -0.042289911 -8.540587e-04 -1.135761e-03 #> AT2G30490 -0.661203036  6.364096e-04 -2.443691e-04 #> AT2G30860  0.086420241 -1.857553e-03 -2.071123e-03 #> AT2G30930  0.453812963 -2.625966e-03 -2.696481e-04 #> AT2G31190 -0.071593563 -1.963720e-03 -1.333812e-04 #> AT2G31390  0.385365898 -2.747062e-03 -3.356792e-04 #> AT2G32240 -0.179983244  2.773970e-03 -3.058894e-03 #> AT2G32440 -0.642576736  1.363869e-04  1.644119e-04 #> AT2G32920 -0.966336940 -1.226714e-03  1.796352e-03 #> AT2G33040  0.087331426  1.276714e-03 -9.262242e-04 #> AT2G33220 -0.066643707 -1.248985e-04  1.466029e-03 #> AT2G33630 -1.107086011  1.552261e-04  2.636835e-03 #> AT2G34300  0.037082383  6.647189e-04 -3.473709e-05 #> AT2G34660 -0.422843309 -9.248851e-04 -1.096647e-03 #> AT2G35610 -0.193343757  1.581549e-05  7.214495e-04 #> AT2G35720  0.126193282  3.220987e-03 -1.570076e-04 #> AT2G36160 -0.861776247  8.593747e-05  2.247647e-04 #> AT2G36290 -1.170054227 -5.711208e-03  2.484024e-03 #> AT2G36380 -0.392151037  2.047342e-03  1.387758e-06 #> AT2G36910 -0.329408095 -7.973833e-05 -1.406073e-04 #> AT2G37050 -0.464205183  2.900930e-03  1.314520e-04 #> AT2G37170 -0.912178431  3.226314e-03 -4.539695e-03 #> AT2G37400  0.017438696  4.851247e-04 -1.312079e-03 #> AT2G37860 -0.059810741  2.321548e-04  1.505679e-03 #> AT2G38530 -0.106781697 -1.468778e-05  4.607528e-03 #> AT2G38550 -0.222336741  5.009982e-04  1.640672e-03 #> AT2G38650 -0.046465999  1.069075e-04 -7.218734e-04 #> AT2G38960 -0.685334142  1.271090e-04  1.001886e-04 #> AT2G39480 -0.423952267  2.560154e-05 -1.656386e-03 #> AT2G39630 -0.501134196 -5.908786e-03 -1.746017e-04 #> AT2G39960 -1.198433287 -1.437748e-03  1.743557e-03 #> AT2G40280 -0.129871836  3.882055e-04  2.885419e-03 #> AT2G40890 -0.675104977 -2.190560e-03 -1.604762e-03 #> AT2G41560 -0.453926896 -2.652794e-03 -7.969966e-04 #> AT2G42210 -0.033866418  2.625775e-03  8.789175e-04 #> AT2G43350 -0.596511297 -5.907463e-05  2.370148e-03 #> AT2G43610 -0.085981221 -5.864136e-06  4.705950e-03 #> AT2G43950 -0.320540349  1.136278e-03  1.461104e-04 #> AT2G44640 -0.328720759 -9.479396e-04  3.676966e-05 #> AT2G45060 -0.264137654  9.931006e-05  2.295611e-03 #> AT2G45140 -0.564889397 -7.260167e-04  7.543362e-04 #> AT2G45470 -0.783292936  3.674192e-03 -4.562412e-04 #> AT2G45510 -0.596999726  1.671995e-04 -1.302613e-03 #> AT2G45820 -0.049653665  1.207947e-04 -2.633737e-04 #> AT2G46170 -0.518069322  2.420669e-04  9.496353e-04 #> AT2G47000 -0.583311323  8.054322e-04 -3.160118e-04 #> AT2G47470 -1.102634955  8.314807e-04  1.464026e-03 #> AT2G47650  0.284676776 -1.738871e-03 -3.637011e-04 #> AT2G47800 -0.562131244  3.619211e-04  1.551443e-04 #> AT2G47840 -0.299746640  1.405926e-05  1.707178e-03 #> AT3G01280 -0.158298570  4.891477e-04 -6.389761e-05 #> AT3G01290 -0.677494269  1.584008e-03 -8.402900e-04 #> AT3G01380 -1.147300594 -2.754700e-03 -2.219235e-03 #> AT3G01930 -0.740912384  1.616815e-04  9.800230e-05 #> AT3G02090 -0.237914579 -1.276778e-04  7.122939e-04 #> AT3G02350 -0.264850054  1.596642e-04 -7.879390e-04 #> AT3G02875 -0.017689129  4.264660e-04 -4.853557e-03 #> AT3G02880 -0.456349047  1.188092e-03  8.549495e-04 #> AT3G03050 -0.088302426 -1.380736e-04 -1.370623e-04 #> AT3G03060  0.156148799  3.741735e-04 -2.529400e-03 #> AT3G03330 -0.732256033  7.895730e-05 -1.149730e-03 #> AT3G03520 -0.556843058  3.786445e-03  1.574199e-04 #> AT3G04920 -1.023344658  2.841234e-03  3.656281e-04 #> AT3G05230 -0.241967606  1.632921e-04 -1.699674e-03 #> AT3G05710 -0.017104871  1.566106e-03 -1.703306e-04 #> AT3G06300 -0.365199154  4.075601e-03  1.700704e-03 #> AT3G06510 -0.227374819  2.473281e-04  9.936977e-05 #> AT3G06960 -0.612289164  1.352864e-04  2.555461e-04 #> AT3G07110 -0.738017964  2.239254e-03 -2.070849e-03 #> AT3G07140 -0.891445770 -1.125705e-03  7.914064e-05 #> AT3G07160 -0.331120870 -5.262637e-05  1.025395e-03 #> AT3G07180 -0.364571037  1.031627e-03  1.208526e-03 #> AT3G07330 -0.100625006 -4.082271e-03  1.358250e-03 #> AT3G07390 -0.654850340  1.942347e-03  2.370998e-03 #> AT3G08510 -0.722639187  7.830263e-05 -1.154752e-03 #> AT3G08580 -0.087726094  1.379948e-03  2.994007e-04 #> AT3G08630 -0.183590915 -9.121474e-04  9.674130e-04 #> AT3G08640 -0.276045054  1.988673e-04 -4.765505e-03 #> AT3G08950 -0.007929183  1.072205e-04 -2.167872e-04 #> AT3G09630 -1.065024843 -1.431203e-03  2.017070e-04 #> AT3G09740 -0.696197224  2.373225e-03  9.832177e-05 #> AT3G10370 -0.364047868  3.829755e-05  7.485548e-06 #> AT3G10730 -0.916943336 -1.185431e-03  6.014127e-05 #> AT3G11070 -0.014180400 -1.701461e-03 -1.348422e-03 #> AT3G11730 -0.375631964 -1.408038e-04 -1.134017e-04 #> AT3G11820 -0.476470376  2.917860e-03 -1.477853e-03 #> AT3G13080 -0.432160432  1.267949e-03  1.367693e-03 #> AT3G13410 -1.255817384  2.406737e-04  3.217435e-04 #> AT3G13560 -0.421396365 -2.987514e-03 -1.837411e-04 #> AT3G13772 -0.827982589 -1.269381e-03 -1.177238e-03 #> AT3G13870 -0.858685215  4.714415e-04  1.320662e-04 #> AT3G14610 -0.956481522  1.628371e-03  1.013491e-03 #> AT3G14840 -0.244520495 -3.430890e-05  4.269445e-04 #> AT3G15710 -0.070036784  1.429262e-04  1.423672e-03 #> AT3G15950 -0.225867497  3.171725e-03  2.426019e-03 #> AT3G16110 -0.535489828  3.214954e-03  2.127015e-04 #> AT3G16200  0.587008860 -5.662853e-03 -5.877543e-04 #> AT3G16460 -0.863319153 -6.196396e-04  1.731393e-03 #> AT3G16480 -0.287045368  3.294993e-03  9.766687e-06 #> AT3G17840 -0.558176675 -2.596933e-05 -1.188131e-03 #> AT3G18370 -0.708022575 -1.922564e-03  9.992699e-04 #> AT3G18480 -0.195222127 -1.223700e-03 -1.305749e-04 #> AT3G18820 -0.531792666  9.035601e-04  5.186526e-05 #> AT3G19340 -1.411489141  1.420223e-04  1.462155e-03 #> AT3G19820 -0.537249333  7.071933e-04  5.260249e-04 #> AT3G20000 -0.006730865  7.768007e-04 -8.844072e-04 #> AT3G20390 -0.199859678 -1.858046e-03 -1.456535e-04 #> AT3G21160 -0.502263150 -9.476697e-04  6.214072e-05 #> AT3G21190 -0.028348867  1.180198e-05  4.164903e-04 #> AT3G21250 -1.101046958  3.314995e-03  2.274867e-04 #> AT3G22370 -0.242753674 -5.804725e-05  9.241415e-04 #> AT3G23175 -1.063946555  1.417990e-03  1.110775e-04 #> AT3G23190 -0.833749764  4.261719e-05  1.186724e-04 #> AT3G23300 -0.021294086 -5.550552e-04 -8.897579e-04 #> AT3G23400 -0.526258945  1.974159e-03 -7.055130e-05 #> AT3G23450 -0.234973974  2.311246e-04 -4.897582e-03 #> AT3G23710  0.170368325  5.423147e-04 -3.154490e-04 #> AT3G23750 -0.435267377  6.040409e-05 -1.467480e-03 #> AT3G24160 -0.876861385  2.152264e-03 -4.362759e-04 #> AT3G24550 -0.312839707 -3.038273e-05 -1.700430e-03 #> AT3G24660 -0.532603214 -3.813579e-03 -1.736177e-03 #> AT3G25140 -0.012592771  1.635304e-04 -9.276582e-04 #> AT3G25290  0.494586273  3.050137e-03 -2.586693e-03 #> AT3G25610 -0.639537294  3.198360e-03 -1.879190e-03 #> AT3G25780 -0.544410847 -3.165067e-03 -1.270762e-04 #> AT3G26370 -0.448621739 -2.856882e-03 -7.666667e-04 #> AT3G26830 -0.175660733 -3.735431e-03 -1.095919e-04 #> AT3G27220 -0.145335990  1.675217e-04 -8.499636e-04 #> AT3G27230 -0.485836953  7.433465e-04 -8.437047e-04 #> AT3G27325 -1.085580509  2.784547e-05  1.338024e-03 #> AT3G28450 -0.205349013  7.515393e-04  2.714888e-03 #> AT3G28480 -0.315248900  1.273992e-03  1.600233e-03 #> AT3G28510 -0.961180864  1.357416e-03  7.162815e-04 #> AT3G28580 -0.772478174  3.104891e-03 -1.334386e-03 #> AT3G28710 -0.052000993  3.740792e-04  5.419092e-05 #> AT3G28720 -0.345660488  1.366931e-03  1.200189e-03 #> AT3G28860 -0.673880041 -8.644444e-04  9.607583e-04 #> AT3G42050  0.025929297  1.896258e-03  8.025353e-04 #> AT3G43190  0.012621555  2.271538e-03  7.180314e-05 #> AT3G44330 -0.798513887  7.493727e-04  1.257821e-04 #> AT3G45890 -0.383589768  9.385116e-04  1.036338e-04 #> AT3G46290 -0.292811428  5.865598e-03 -1.928060e-03 #> AT3G46740 -0.250326145  9.260853e-04 -3.291100e-04 #> AT3G46830 -0.944697257 -1.258884e-03  1.171282e-03 #> AT3G47200 -0.646622666  2.041392e-04 -2.322692e-03 #> AT3G47930 -0.448490264 -1.252063e-03 -1.029344e-03 #> AT3G47950 -0.030560256  1.689764e-04 -1.695536e-04 #> AT3G48820 -0.537373287  2.929688e-05  9.147956e-05 #> AT3G48890 -0.383493799 -3.927619e-03  2.220565e-03 #> AT3G49360 -0.839069793 -1.078324e-04  4.916161e-03 #> AT3G49560  0.116804236  5.185721e-04 -2.631426e-04 #> AT3G49720 -0.432289084  2.545970e-03 -1.098686e-03 #> AT3G49870  0.294819668 -3.356397e-05  4.637488e-03 #> AT3G49910 -1.356370584 -1.831293e-03 -4.497628e-03 #> AT3G50930 -0.359403110  9.485403e-05 -1.292320e-03 #> AT3G51010 -0.139288359 -3.061972e-05  4.717296e-03 #> AT3G51050 -0.904602393 -1.401351e-03  6.267385e-05 #> AT3G51430 -0.833834001 -7.683148e-04  9.221229e-04 #> AT3G51440 -0.880151083 -2.845011e-03 -6.543201e-05 #> AT3G51460 -0.379500912 -9.904037e-04 -4.246224e-04 #> AT3G51550 -0.385306489  1.036759e-04  8.878267e-04 #> AT3G51580  0.675287684 -9.477681e-05  1.311284e-03 #> AT3G51740 -0.146396821 -1.971856e-03 -2.833135e-04 #> AT3G52190 -0.581465616 -3.934722e-03 -8.051950e-05 #> AT3G52300 -0.116044951  7.579171e-04 -3.141078e-04 #> AT3G52850 -0.624138247 -1.044345e-03 -2.380425e-03 #> AT3G52930  0.192499841  2.202652e-04  1.060147e-03 #> AT3G53480 -0.151822603  1.927625e-04 -4.827561e-03 #> AT3G53520 -0.324523515  2.413271e-03  5.554903e-04 #> AT3G54110 -0.194351346  8.339544e-04 -5.566959e-04 #> AT3G54840 -0.896485970 -2.864858e-03  1.542236e-03 #> AT3G54960 -0.738341653  1.463311e-03  5.040782e-03 #> AT3G55360 -0.602080651  1.366392e-04  1.956171e-05 #> AT3G55830 -0.166119694  3.118220e-03 -4.800300e-03 #> AT3G56430  0.372715674  6.223956e-03 -1.631719e-04 #> AT3G56750 -0.155564833  5.977221e-03  2.171088e-03 #> AT3G57010 -0.360106165  2.314242e-03  6.735488e-05 #> AT3G57020 -0.733662277  8.342629e-05 -8.297889e-04 #> AT3G57030 -0.664039355  1.821908e-03 -5.573725e-04 #> AT3G57220 -0.384351463  4.490664e-04 -3.187776e-03 #> AT3G57650 -0.385867552  1.512428e-04  2.035415e-05 #> AT3G57880 -0.713324809  1.642842e-04  1.155743e-04 #> AT3G58730  0.701084425  3.865875e-04  1.488412e-03 #> AT3G58840  0.005797904 -1.831576e-03 -1.570027e-04 #> AT3G59280  0.083026456 -5.786897e-03  4.270903e-04 #> AT3G59500 -0.565898042 -2.755033e-03 -1.377817e-04 #> AT3G59820 -0.191352197 -5.070058e-04 -3.551423e-04 #> AT3G60190 -0.443155813 -7.214098e-05  2.869579e-03 #> AT3G60600 -0.737728309  9.289300e-04 -8.675757e-04 #> AT3G60900 -0.667181503  1.515430e-03  1.609187e-05 #> AT3G61050 -0.121772031  4.722748e-05  1.087756e-03 #> AT3G61130 -0.413899914  8.558062e-04  7.756226e-04 #> AT3G61440 -0.504779356  2.566880e-04 -4.546202e-03 #> AT3G62360 -0.921295840 -6.246830e-05  8.088966e-04 #> AT3G62700 -0.835128257 -1.167200e-03  1.421686e-04 #> AT3G63170  0.513342037  5.880521e-04 -1.663225e-03 #> AT3G66654  0.104428845 -3.226132e-03  2.085458e-03 #> AT3G66658 -0.673820928  2.169761e-03 -1.430280e-03 #> AT4G00090 -0.323888634 -1.705884e-03  1.203773e-03 #> AT4G00175 -0.360039654  1.905929e-04 -3.146139e-03 #> AT4G00740 -0.074348273 -9.606755e-04 -1.567295e-04 #> AT4G00750 -0.441257203 -2.267274e-03  9.897738e-05 #> AT4G00860 -0.028910514  3.621541e-04  1.378224e-03 #> AT4G01100 -0.177122650 -6.081818e-04 -1.609239e-03 #> AT4G01320 -0.663197288 -1.517472e-03 -5.608276e-04 #> AT4G02510 -0.052051197  3.937341e-04  1.521777e-05 #> AT4G02930 -0.300020656 -1.148473e-03 -9.048340e-04 #> AT4G03550 -0.639492244  5.622271e-04  5.893516e-04 #> AT4G04910 -0.097850521 -1.676017e-03 -2.633333e-03 #> AT4G05020 -0.223671410  8.287795e-04 -3.150059e-04 #> AT4G08850 -0.312464631  1.146663e-04 -1.119596e-04 #> AT4G09320 -0.018577069  1.810287e-03 -2.369565e-03 #> AT4G09580 -0.757502592  3.861072e-05  1.827212e-04 #> AT4G11010 -1.422895481 -6.170664e-03  1.003492e-04 #> AT4G11150 -0.246999063 -3.805740e-04  2.069694e-06 #> AT4G11800 -1.039193127  3.117264e-03  2.629112e-04 #> AT4G11850  0.117257172  1.131980e-04 -2.442882e-04 #> AT4G12420 -0.491268262  7.879200e-04 -5.311853e-04 #> AT4G12590 -0.723078655 -8.605300e-04  1.424247e-05 #> AT4G12650 -0.270709981 -8.090277e-04 -9.183556e-04 #> AT4G12730 -0.348880380 -1.937785e-03 -1.403863e-03 #> AT4G13940 -0.128631794  1.432154e-04 -7.213724e-05 #> AT4G14360 -0.496256875  1.225984e-03  2.736945e-04 #> AT4G14420 -1.413356969  1.358438e-04 -4.682950e-04 #> AT4G14950 -0.614273071  2.756640e-05  7.395091e-05 #> AT4G15000 -0.948748170  5.953357e-05 -9.427697e-04 #> AT4G15240 -0.454455642 -1.118844e-05 -1.646314e-03 #> AT4G15760 -0.714808060 -1.475327e-05  9.009577e-04 #> AT4G16120 -0.234123395  9.414818e-04  7.797940e-04 #> AT4G16170 -0.765665402  2.129167e-04 -1.817684e-03 #> AT4G16500 -1.015097302  2.044440e-03  1.792182e-04 #> AT4G16650 -0.552893533  1.396100e-05  6.185453e-05 #> AT4G17120 -0.053511515  1.146769e-04 -1.414817e-05 #> AT4G17140 -0.375601709  3.203808e-04  1.953830e-04 #> AT4G17170 -0.523636911  2.965606e-03  1.303106e-03 #> AT4G17430 -0.415182497 -8.163723e-06  2.457066e-03 #> AT4G18030 -0.257793261  4.199634e-04  2.275772e-04 #> AT4G18100 -0.614891490 -1.290237e-05  9.622848e-05 #> AT4G18430 -0.294915830 -7.080445e-05 -1.157287e-04 #> AT4G19640 -0.408608755  2.040811e-04 -3.940498e-05 #> AT4G20110 -0.482406525  5.067044e-04  2.479792e-03 #> AT4G20830 -0.488570850 -5.218595e-04 -6.851346e-05 #> AT4G21150 -0.594662773 -5.464692e-04 -1.574630e-04 #> AT4G21180 -0.714569709  1.546281e-04 -7.493599e-04 #> AT4G21700 -0.164007907  5.415244e-05 -2.412928e-03 #> AT4G21960 -0.368381835 -6.563045e-06 -5.908200e-05 #> AT4G23630 -0.434771593  5.974606e-04  5.412450e-05 #> AT4G23650 -0.623279215  3.110471e-03 -1.504641e-03 #> AT4G23850 -1.093306034 -2.468061e-05  1.765510e-03 #> AT4G23940  0.049184427 -8.166966e-04 -9.583436e-05 #> AT4G24190 -0.919473717  1.499803e-03  1.172439e-03 #> AT4G24330 -0.904823043 -1.879299e-04 -7.328521e-04 #> AT4G25240 -0.495662540 -1.621617e-06 -2.964857e-05 #> AT4G25720 -0.756722204  3.127430e-03  2.119851e-04 #> AT4G25900 -0.415267245  3.195439e-03 -3.092793e-03 #> AT4G26410 -0.224956143  1.751864e-04 -1.690849e-03 #> AT4G26690 -0.688134149  4.226567e-05  2.250113e-05 #> AT4G27090 -0.684577992 -5.982577e-03 -2.423650e-03 #> AT4G27500 -0.308092083 -2.275143e-03 -1.516078e-04 #> AT4G27520 -0.632845972 -1.912800e-03 -1.016461e-03 #> AT4G27585  0.028165279 -2.186563e-04 -1.957612e-04 #> AT4G28220 -0.108582055 -3.055910e-03  1.332713e-03 #> AT4G28390 -0.107714814 -9.843113e-04  8.528386e-04 #> AT4G28510 -0.562886608  1.675027e-04 -2.340567e-03 #> AT4G28570 -0.803338914  9.183934e-06 -4.376441e-06 #> AT4G29130 -0.182303709  1.284401e-03 -3.713116e-05 #> AT4G29480 -0.349635655  1.452647e-04  8.191717e-05 #> AT4G29520 -0.638744475 -1.451928e-04  1.447228e-03 #> AT4G29900 -0.499956034  1.476732e-04 -7.046336e-04 #> AT4G30010 -0.145333921  7.016509e-05  8.709964e-04 #> AT4G30090 -0.534529010  2.458056e-05  1.552872e-05 #> AT4G30190 -0.398548957  9.964146e-04  1.306603e-03 #> AT4G30210 -0.582840304  2.213677e-03 -2.292033e-03 #> AT4G30260 -0.110344339 -3.333225e-04 -1.598614e-04 #> AT4G30600 -0.830443950  1.072094e-03  1.131443e-03 #> AT4G30990 -0.629434943  1.778944e-04  8.469620e-05 #> AT4G31140 -0.311565481 -1.052388e-04 -1.141335e-04 #> AT4G31340 -0.556651527  1.854452e-04  6.576480e-05 #> AT4G31430 -0.204773252 -4.066444e-04  4.498375e-03 #> AT4G31500 -0.782094247 -4.156595e-04  6.448611e-04 #> AT4G31700 -1.686499558 -9.409213e-05  5.293652e-03 #> AT4G32130 -0.262070965 -1.747948e-03 -3.248450e-03 #> AT4G32250 -0.214002319  1.526031e-04  1.209868e-03 #> AT4G32400 -0.305615133  7.431939e-05  3.913172e-05 #> AT4G32410  0.046380213  1.151866e-04 -7.756819e-04 #> AT4G32470 -0.057400356 -6.907031e-04 -8.863625e-04 #> AT4G33350 -0.276729085 -8.951562e-04 -1.228613e-04 #> AT4G33360 -0.368243309 -1.215991e-03 -3.283373e-05 #> AT4G34200  0.056853083  1.324581e-04 -3.308168e-04 #> AT4G34640 -0.398112215 -1.331355e-03 -8.349752e-05 #> AT4G34960 -0.198320428  1.984876e-03 -1.456371e-05 #> AT4G35000  0.200392298 -2.504321e-03  2.829760e-03 #> AT4G35100 -0.455544967  1.320694e-03  1.531504e-03 #> AT4G35230 -0.812574004 -1.995999e-03  1.172093e-03 #> AT4G35790 -0.625567972  1.348904e-03  1.549710e-03 #> AT4G36220 -0.458874160  2.731344e-04 -4.011900e-04 #> AT4G36250 -1.074470622  7.771218e-04  9.774627e-04 #> AT4G36480 -0.402664699  1.544094e-03 -6.168529e-04 #> AT4G36750 -0.238044677 -8.273889e-04 -1.094407e-03 #> AT4G37330 -0.802648723  3.244301e-03 -1.352767e-03 #> AT4G37370 -0.600321859  2.495642e-03 -3.091172e-04 #> AT4G37410 -0.726702996  6.093394e-03  9.912908e-04 #> AT4G37430 -0.868248294  8.573036e-05  1.234243e-04 #> AT4G37640 -0.464489627  3.699824e-05  1.963852e-03 #> AT4G37690 -0.210896512 -1.922472e-05  6.743439e-06 #> AT4G37820  0.319805661  6.179518e-03 -7.018698e-05 #> AT4G38215 -1.366227477  2.571407e-03 -1.930505e-03 #> AT4G38240 -0.284652875 -1.271760e-03  4.660165e-05 #> AT4G38270 -0.528679391 -1.021329e-04  6.607804e-05 #> AT4G38350 -0.608065776  3.808378e-03 -7.135434e-04 #> AT4G38500 -0.218330435  3.087382e-03  8.460786e-04 #> AT4G39030 -0.098944549 -2.593383e-03 -4.830067e-03 #> AT4G39080 -0.748171809 -1.251221e-03  6.034021e-04 #> AT4G39400 -0.690567482  1.437352e-03  1.695376e-03 #> AT4G39460 -0.313316689  2.550016e-04  1.058610e-04 #> AT4G39690 -0.117404075  1.052559e-03 -1.336088e-03 #> AT4G39840 -0.097475446 -2.611497e-03 -2.479967e-03 #> AT4G39990 -0.325858161  4.824659e-05 -1.168473e-04 #> AT5G01500 -0.089895143  1.479259e-04 -3.011035e-05 #> AT5G01590 -0.242396205 -1.067930e-03  2.337501e-03 #> AT5G02450 -0.890144891 -1.374167e-03  1.417278e-04 #> AT5G02870 -0.976621423 -1.483609e-03  6.581831e-05 #> AT5G03160 -0.571365871 -3.660690e-03 -2.357063e-03 #> AT5G03895 -0.050446652  3.132029e-03  1.322713e-04 #> AT5G04060  0.171382892  3.839643e-03 -2.666671e-05 #> AT5G04480  0.024599623  1.881621e-03  4.599433e-03 #> AT5G04885 -0.273727330 -8.718882e-04  8.641855e-04 #> AT5G04930  0.032882845 -7.862625e-05  1.435672e-03 #> AT5G04990 -0.371181932  2.879879e-03  4.660694e-05 #> AT5G05000 -0.327407900  2.622413e-03  1.436811e-04 #> AT5G05170 -0.036803742 -2.956137e-03  1.100534e-03 #> AT5G05520 -0.224844311 -7.258943e-04 -9.624604e-06 #> AT5G05670 -0.397964554  2.624465e-03  1.566945e-04 #> AT5G06320 -0.765647638  5.336128e-05 -8.708697e-04 #> AT5G07340 -0.556887909  8.472488e-05 -3.025627e-05 #> AT5G07910 -0.980031824 -1.177709e-04  1.578007e-04 #> AT5G08040 -0.104371907  1.631131e-03 -9.686885e-04 #> AT5G08080 -0.262491631  1.301143e-03 -1.353851e-03 #> AT5G08545 -0.462668587  2.362130e-03 -9.804330e-04 #> AT5G09400 -0.301768924 -2.670772e-03  7.810850e-07 #> AT5G09420  0.002164032  1.208933e-04  2.250851e-03 #> AT5G09810 -0.558377900  1.967895e-04  7.864139e-04 #> AT5G10360 -1.686499558 -9.409213e-05  5.293652e-03 #> AT5G10840 -0.096894885 -1.690655e-03  2.316795e-03 #> AT5G11560 -0.827024886 -1.075405e-04  1.173450e-03 #> AT5G11730  0.045358437  1.783155e-03  1.888923e-03 #> AT5G12290 -0.048246693 -7.639564e-04 -7.408297e-05 #> AT5G12470 -0.145458690  6.610427e-04  4.327690e-04 #> AT5G12860 -0.041831246  7.700511e-04 -1.098068e-04 #> AT5G13450 -0.261093523  1.516521e-04 -1.970810e-03 #> AT5G13490 -0.057876687  5.468533e-04  1.432943e-04 #> AT5G13610  0.294071286 -2.581264e-03 -4.661233e-04 #> AT5G13640 -0.697012228  1.488565e-04  5.502909e-04 #> AT5G14040 -0.088952920 -8.372055e-05  5.076538e-04 #> AT5G14220  0.031971297 -3.526905e-04 -6.462661e-05 #> AT5G14430 -0.197741252  3.040501e-03  2.330959e-05 #> AT5G14950 -0.403475251 -4.648916e-04 -4.433444e-04 #> AT5G15090 -0.191287146  7.704847e-04  7.713872e-04 #> AT5G15910 -0.641803725  1.931946e-03  1.029211e-04 #> AT5G16910 -0.119060936  5.954751e-03  1.013039e-03 #> AT5G16930 -0.290814587 -1.321221e-03  1.074466e-03 #> AT5G17760 -0.264783738 -5.917655e-03  2.172967e-03 #> AT5G17770 -0.781744740 -1.758598e-03 -1.353813e-03 #> AT5G17920 -0.041186921  1.349235e-04 -1.170353e-04 #> AT5G17980 -0.375284845 -1.781039e-03 -1.649345e-03 #> AT5G18280 -0.265213119 -5.852821e-03 -2.384820e-04 #> AT5G18485 -0.081865144  1.277271e-03  6.504013e-04 #> AT5G18800 -0.375623374 -1.008861e-04  2.511397e-03 #> AT5G18900 -0.373203585  1.911886e-03  2.368657e-03 #> AT5G19130 -0.814081937 -1.444932e-03  6.543310e-05 #> AT5G19320 -0.941475712  1.166495e-03  1.700678e-03 #> AT5G19550 -0.162648752  9.544731e-05  3.075576e-03 #> AT5G19620 -0.199380761  1.360799e-03  9.959922e-05 #> AT5G19690 -0.879233296 -5.884511e-04  8.573467e-04 #> AT5G19760 -0.049995249  2.513995e-03 -7.427505e-04 #> AT5G20090 -0.442976973  3.120545e-03 -1.532070e-03 #> AT5G20290 -1.004396691 -9.539868e-04  7.011023e-04 #> AT5G20350  0.062112068  1.295126e-04 -2.062883e-04 #> AT5G20520 -0.553438646  5.913664e-05  2.370162e-05 #> AT5G20655 -0.764041287 -2.879833e-03 -5.671121e-04 #> AT5G22640  0.037513539  2.027848e-04  2.273931e-03 #> AT5G22790 -0.169602955  3.136895e-03  1.185943e-04 #> AT5G23300 -0.078104989  2.121662e-04  1.414727e-03 #> AT5G23575 -0.556318444  2.042319e-03  2.503331e-03 #> AT5G23630 -0.757005477 -1.286863e-03  5.402045e-04 #> AT5G23850 -0.141156542 -9.882538e-05 -7.241240e-05 #> AT5G23890 -0.096426424  2.267327e-04 -2.600512e-05 #> AT5G24290 -0.699946772  5.327321e-05  1.695798e-05 #> AT5G24690 -0.676894307 -1.468159e-03  2.228752e-04 #> AT5G24810 -0.787760826  1.222770e-03  1.838659e-04 #> AT5G25100  0.063615872 -1.122291e-03 -1.130927e-03 #> AT5G25900 -0.816125431 -2.061035e-03 -6.413403e-04 #> AT5G26030 -0.214272292  2.907042e-03  1.623765e-03 #> AT5G26260 -0.237833216 -9.430105e-04 -8.887291e-04 #> AT5G26280 -0.730505694  2.559429e-04  1.897681e-04 #> AT5G27330 -0.629381017 -1.078449e-03  8.141186e-04 #> AT5G27540 -0.127096380  1.395872e-03  3.346222e-04 #> AT5G27850 -1.193593226 -2.713342e-04  2.767207e-03 #> AT5G28060 -0.363082794 -1.262654e-04  7.692730e-05 #> AT5G33320  0.177030761  5.504351e-04  2.235946e-05 #> AT5G35160 -0.290060382 -9.676574e-04 -5.551439e-04 #> AT5G37310 -0.456469555  7.038413e-05  1.292026e-04 #> AT5G39040 -0.567609623 -9.195859e-04 -8.875484e-04 #> AT5G39410 -0.577067115  1.453730e-04  6.630147e-05 #> AT5G39510 -0.797405795  3.951540e-04  2.044897e-04 #> AT5G40480 -0.455940465 -1.533944e-03 -1.147350e-04 #> AT5G42020 -0.773000188 -3.692714e-03  1.178207e-03 #> AT5G42080 -0.508907324 -8.085768e-04  9.505786e-04 #> AT5G42570 -0.561896800  2.393428e-03  2.446004e-03 #> AT5G42960 -0.444578658 -1.143168e-03  2.521189e-03 #> AT5G42980  0.081331229  1.620787e-03  2.309632e-03 #> AT5G43100 -0.166006956 -1.755420e-03 -2.221636e-03 #> AT5G43460 -0.117773290  1.882141e-03  2.413087e-03 #> AT5G43970 -0.229351926 -6.226409e-04 -5.136828e-05 #> AT5G44240 -0.266861349  3.193068e-03 -7.815323e-04 #> AT5G44790  0.044562137 -8.885283e-04 -1.585895e-03 #> AT5G44920 -0.653229698  3.261598e-03 -1.633720e-03 #> AT5G45130 -0.567449263  5.992772e-03 -2.275621e-03 #> AT5G45160 -0.624424255 -1.342099e-03  9.329767e-05 #> AT5G45420 -0.938667338  1.389600e-04  5.076475e-03 #> AT5G45470 -0.682892805  4.332032e-05 -1.270623e-03 #> AT5G45480 -0.287523886  3.050262e-03 -1.150794e-03 #> AT5G45750 -0.402001007 -1.810269e-04 -1.108637e-04 #> AT5G46800  0.127412088  2.480219e-04  7.414038e-04 #> AT5G47420 -0.852641885  2.748601e-04  1.516827e-04 #> AT5G47910 -0.345685215 -7.549829e-04  1.482810e-03 #> AT5G47990 -0.545262258  1.590562e-04 -3.795081e-05 #> AT5G48000 -0.748544983  7.785405e-05  4.091100e-05 #> AT5G48030 -0.832579009 -1.247863e-05 -2.536804e-05 #> AT5G48810 -0.681272424 -4.880213e-04  1.633917e-03 #> AT5G49760 -0.434962707  2.998671e-03  1.252788e-03 #> AT5G49945 -0.657179653  2.185808e-03  1.785544e-03 #> AT5G50000 -0.415890804 -3.068084e-03 -2.234805e-04 #> AT5G50370 -0.234706096  3.689783e-04 -1.119259e-04 #> AT5G51570 -0.406289304  2.698800e-03 -3.641653e-04 #> AT5G52240 -0.985891052 -2.771128e-03  7.514193e-05 #> AT5G52420 -1.049178062  1.440256e-05  1.628824e-04 #> AT5G53170 -0.132833151  3.811954e-04 -1.473872e-03 #> AT5G53560 -1.037784990 -5.273606e-04  9.768687e-04 #> AT5G54100 -0.201458993  1.341410e-04 -3.779113e-06 #> AT5G55070 -0.053019997 -1.333284e-03 -2.571196e-03 #> AT5G55480 -0.376788340 -4.882082e-04 -5.687371e-04 #> AT5G55610 -0.241438420 -3.695013e-03 -1.661897e-03 #> AT5G55730 -0.821619033  3.722067e-05  1.657196e-03 #> AT5G55940 -1.336293203  1.016540e-04  1.847770e-03 #> AT5G56730 -0.156788455  2.097776e-03  1.213231e-03 #> AT5G57110 -0.562721137  5.478526e-05 -1.223649e-03 #> AT5G57490 -0.603960005 -5.968817e-03 -9.976475e-05 #> AT5G57655 -0.812543642 -2.727827e-03  1.601264e-04 #> AT5G57800 -0.440691806  2.025311e-04 -8.473554e-04 #> AT5G58070 -0.468015691  8.848792e-05 -1.609874e-03 #> AT5G58090 -0.594138056 -3.950518e-03 -1.054939e-03 #> AT5G58100 -0.312595745 -1.855341e-03 -5.819148e-04 #> AT5G58270 -0.092729294  7.937878e-04 -9.523172e-04 #> AT5G58640 -0.606324506  2.461624e-03  4.847859e-03 #> AT5G60640 -1.001152065  1.255766e-03 -8.951159e-04 #> AT5G61240  0.168956176  7.848794e-05 -2.962236e-04 #> AT5G61790 -0.564815752 -6.014047e-04 -2.413465e-04 #> AT5G61840  0.021282602  2.661599e-04 -2.149272e-03 #> AT5G62390 -0.599968141 -3.929981e-03 -1.247302e-03 #> AT5G62670 -0.148859122 -2.501674e-04 -1.891249e-04 #> AT5G62740 -0.808680509 -2.472738e-05  8.383480e-04 #> AT5G63030  0.001809582  2.461819e-04 -1.681715e-04 #> AT5G63400 -0.010441420  2.695841e-03 -1.577472e-04 #> AT5G63840 -0.516341286 -2.406309e-03  2.377169e-03 #> AT5G64030  0.038094707 -7.550599e-04  1.836270e-03 #> AT5G64100 -0.189055713  2.060936e-03 -8.590368e-05 #> AT5G64290 -0.033046869  3.579646e-04  9.948149e-05 #> AT5G64440 -0.945718255  1.018533e-03  2.010404e-04 #> AT5G64970 -0.191233966  2.161002e-03  7.676111e-05 #> AT5G65250 -0.330782557  1.265880e-04 -2.248935e-03 #> AT5G65270 -0.052960701 -2.848729e-03 -2.661229e-03 #> AT5G66680 -0.919838308  4.460947e-04  5.323991e-04 #> AT5G67500 -0.216066132 -6.212557e-04 -8.301994e-05 #> COB        0.094299350 -1.434789e-04  2.236276e-03 #> COX2      -0.371347486 -1.244907e-04 -2.457154e-03 #> NAD5      -0.258469390  6.587212e-05 -2.453235e-03 #> ORF25     -0.345160716 -1.639239e-03  1.278030e-03 #> ORFB       0.331575501 -2.972403e-03  1.995071e-03 #> RPS7-01   -0.275221103  1.314683e-03 -6.481212e-04 #>  #> $pca.col #>   [1] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#FF7F00\"   \"#9ACD32\"   #>   [7] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#FF7F00\"   \"#E0E0E030\" #>  [13] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#377EB8\"   \"#E0E0E030\" #>  [19] \"#E0E0E030\" \"#309C17\"   \"#E41A1C\"   \"#F781BF\"   \"#E0E0E030\" \"#E0E0E030\" #>  [25] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #>  [31] \"#E0E0E030\" \"#E0E0E030\" \"#9ACD32\"   \"#FFD700\"   \"#F781BF\"   \"#E0E0E030\" #>  [37] \"#A65628\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #>  [43] \"#00CED1\"   \"#9ACD32\"   \"#E0E0E030\" \"#E0E0E030\" \"#FFD700\"   \"#E0E0E030\" #>  [49] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#309C17\"   #>  [55] \"#E0E0E030\" \"#309C17\"   \"#E41A1C\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #>  [61] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#FF7F00\"   \"#E0E0E030\" \"#E0E0E030\" #>  [67] \"#FFD700\"   \"#377EB8\"   \"#F781BF\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #>  [73] \"#FFD700\"   \"#E0E0E030\" \"#E0E0E030\" \"#9ACD32\"   \"#F781BF\"   \"#E0E0E030\" #>  [79] \"#E0E0E030\" \"#377EB8\"   \"#377EB8\"   \"#E0E0E030\" \"#E0E0E030\" \"#A65628\"   #>  [85] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#FF7F00\"   \"#FF7F00\"   \"#309C17\"   #>  [91] \"#FF7F00\"   \"#E0E0E030\" \"#E0E0E030\" \"#309C17\"   \"#E0E0E030\" \"#E41A1C\"   #>  [97] \"#FF7F00\"   \"#E0E0E030\" \"#E0E0E030\" \"#F781BF\"   \"#FF7F00\"   \"#9ACD32\"   #> [103] \"#E0E0E030\" \"#F781BF\"   \"#E0E0E030\" \"#377EB8\"   \"#E0E0E030\" \"#E0E0E030\" #> [109] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E41A1C\"   \"#E0E0E030\" \"#E0E0E030\" #> [115] \"#E0E0E030\" \"#377EB8\"   \"#9ACD32\"   \"#377EB8\"   \"#E0E0E030\" \"#E0E0E030\" #> [121] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#FF7F00\"   \"#E0E0E030\" \"#E0E0E030\" #> [127] \"#E0E0E030\" \"#377EB8\"   \"#377EB8\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [133] \"#E41A1C\"   \"#E0E0E030\" \"#E0E0E030\" \"#A65628\"   \"#309C17\"   \"#E0E0E030\" #> [139] \"#309C17\"   \"#FFD700\"   \"#377EB8\"   \"#E0E0E030\" \"#E0E0E030\" \"#377EB8\"   #> [145] \"#E0E0E030\" \"#E41A1C\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#9ACD32\"   #> [151] \"#309C17\"   \"#00CED1\"   \"#E0E0E030\" \"#00CED1\"   \"#E0E0E030\" \"#E0E0E030\" #> [157] \"#E0E0E030\" \"#377EB8\"   \"#FFD700\"   \"#377EB8\"   \"#E0E0E030\" \"#E0E0E030\" #> [163] \"#377EB8\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#FFD700\"   \"#E0E0E030\" #> [169] \"#A65628\"   \"#F781BF\"   \"#F781BF\"   \"#E0E0E030\" \"#FF7F00\"   \"#377EB8\"   #> [175] \"#00CED1\"   \"#E0E0E030\" \"#E0E0E030\" \"#FFD700\"   \"#E0E0E030\" \"#E0E0E030\" #> [181] \"#FF7F00\"   \"#E0E0E030\" \"#FFD700\"   \"#FF7F00\"   \"#E0E0E030\" \"#E0E0E030\" #> [187] \"#309C17\"   \"#A65628\"   \"#FF7F00\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [193] \"#377EB8\"   \"#9ACD32\"   \"#E0E0E030\" \"#FF7F00\"   \"#309C17\"   \"#E0E0E030\" #> [199] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#FF7F00\"   \"#E0E0E030\" \"#E0E0E030\" #> [205] \"#E0E0E030\" \"#FF7F00\"   \"#E0E0E030\" \"#FF7F00\"   \"#E0E0E030\" \"#FF7F00\"   #> [211] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [217] \"#377EB8\"   \"#E41A1C\"   \"#FF7F00\"   \"#FF7F00\"   \"#E0E0E030\" \"#F781BF\"   #> [223] \"#9ACD32\"   \"#E0E0E030\" \"#E0E0E030\" \"#A65628\"   \"#E0E0E030\" \"#FFD700\"   #> [229] \"#E0E0E030\" \"#E0E0E030\" \"#FFD700\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [235] \"#E0E0E030\" \"#309C17\"   \"#377EB8\"   \"#E0E0E030\" \"#E0E0E030\" \"#377EB8\"   #> [241] \"#E0E0E030\" \"#E0E0E030\" \"#9ACD32\"   \"#FF7F00\"   \"#E0E0E030\" \"#FFD700\"   #> [247] \"#E0E0E030\" \"#E0E0E030\" \"#FF7F00\"   \"#377EB8\"   \"#FFD700\"   \"#E0E0E030\" #> [253] \"#FFD700\"   \"#377EB8\"   \"#E0E0E030\" \"#E41A1C\"   \"#309C17\"   \"#9ACD32\"   #> [259] \"#00CED1\"   \"#FF7F00\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [265] \"#309C17\"   \"#E0E0E030\" \"#E0E0E030\" \"#309C17\"   \"#E0E0E030\" \"#E0E0E030\" #> [271] \"#E0E0E030\" \"#A65628\"   \"#377EB8\"   \"#F781BF\"   \"#E0E0E030\" \"#00CED1\"   #> [277] \"#E0E0E030\" \"#A65628\"   \"#E0E0E030\" \"#FFD700\"   \"#377EB8\"   \"#309C17\"   #> [283] \"#FFD700\"   \"#E0E0E030\" \"#FF7F00\"   \"#00CED1\"   \"#00CED1\"   \"#FF7F00\"   #> [289] \"#A65628\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [295] \"#E0E0E030\" \"#9ACD32\"   \"#E0E0E030\" \"#FFD700\"   \"#E0E0E030\" \"#E0E0E030\" #> [301] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E41A1C\"   \"#E0E0E030\" #> [307] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [313] \"#E0E0E030\" \"#E0E0E030\" \"#FF7F00\"   \"#E0E0E030\" \"#309C17\"   \"#E0E0E030\" #> [319] \"#9ACD32\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [325] \"#E0E0E030\" \"#00CED1\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [331] \"#309C17\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [337] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [343] \"#E0E0E030\" \"#9ACD32\"   \"#E0E0E030\" \"#E0E0E030\" \"#9ACD32\"   \"#E0E0E030\" #> [349] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#00CED1\"   \"#E0E0E030\" \"#FFD700\"   #> [355] \"#E0E0E030\" \"#FFD700\"   \"#309C17\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [361] \"#E0E0E030\" \"#E0E0E030\" \"#A65628\"   \"#FF7F00\"   \"#E0E0E030\" \"#E0E0E030\" #> [367] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [373] \"#377EB8\"   \"#FF7F00\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#309C17\"   #> [379] \"#FF7F00\"   \"#E0E0E030\" \"#E41A1C\"   \"#377EB8\"   \"#309C17\"   \"#E0E0E030\" #> [385] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#377EB8\"   \"#377EB8\"   #> [391] \"#E0E0E030\" \"#9ACD32\"   \"#E0E0E030\" \"#FF7F00\"   \"#E0E0E030\" \"#FF7F00\"   #> [397] \"#E0E0E030\" \"#E0E0E030\" \"#FFD700\"   \"#E0E0E030\" \"#309C17\"   \"#E0E0E030\" #> [403] \"#E0E0E030\" \"#9ACD32\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [409] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#FF7F00\"   \"#377EB8\"   #> [415] \"#00CED1\"   \"#FF7F00\"   \"#FFD700\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [421] \"#E0E0E030\" \"#377EB8\"   \"#00CED1\"   \"#9ACD32\"   \"#E0E0E030\" \"#FFD700\"   #> [427] \"#FFD700\"   \"#E0E0E030\" \"#F781BF\"   \"#FFD700\"   \"#E0E0E030\" \"#E0E0E030\" #> [433] \"#E0E0E030\" \"#E0E0E030\" \"#A65628\"   \"#309C17\"   \"#E0E0E030\" \"#E0E0E030\" #> [439] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [445] \"#E0E0E030\" \"#E0E0E030\" \"#A65628\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [451] \"#E0E0E030\" \"#377EB8\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [457] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E41A1C\"   \"#E0E0E030\" \"#FFD700\"   #> [463] \"#FFD700\"   \"#E0E0E030\" \"#FF7F00\"   \"#FFD700\"   \"#E0E0E030\" \"#E0E0E030\" #> [469] \"#FFD700\"   \"#FF7F00\"   \"#FF7F00\"   \"#E0E0E030\" \"#FF7F00\"   \"#E0E0E030\" #> [475] \"#E0E0E030\" \"#FF7F00\"   \"#E0E0E030\" \"#FFD700\"   \"#E0E0E030\" \"#E0E0E030\" #> [481] \"#FFD700\"   \"#E0E0E030\" \"#F781BF\"   \"#E0E0E030\" \"#E0E0E030\" \"#FFD700\"   #> [487] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#A65628\"   \"#377EB8\"   \"#E0E0E030\" #> [493] \"#00CED1\"   \"#E0E0E030\" \"#FF7F00\"   \"#00CED1\"   \"#E0E0E030\" \"#E0E0E030\" #> [499] \"#377EB8\"   \"#E0E0E030\" \"#E0E0E030\" \"#FFD700\"   \"#E0E0E030\" \"#E0E0E030\" #> [505] \"#377EB8\"   \"#E0E0E030\" \"#377EB8\"   \"#FFD700\"   \"#E0E0E030\" \"#E0E0E030\" #> [511] \"#E0E0E030\" \"#377EB8\"   \"#377EB8\"   \"#309C17\"   \"#E0E0E030\" \"#E41A1C\"   #> [517] \"#309C17\"   \"#309C17\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#9ACD32\"   #> [523] \"#FFD700\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [529] \"#E0E0E030\" \"#A65628\"   \"#A65628\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [535] \"#E0E0E030\" \"#FFD700\"   \"#FFD700\"   \"#E0E0E030\" \"#00CED1\"   \"#E0E0E030\" #> [541] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#377EB8\"   \"#FFD700\"   \"#FF7F00\"   #> [547] \"#E0E0E030\" \"#E0E0E030\" \"#9ACD32\"   \"#FF7F00\"   \"#E0E0E030\" \"#A65628\"   #> [553] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [559] \"#E0E0E030\" \"#FF7F00\"   \"#FF7F00\"   \"#E0E0E030\" \"#FF7F00\"   \"#00CED1\"   #> [565] \"#E0E0E030\" \"#E0E0E030\" \"#FF7F00\"   \"#FF7F00\"   \"#309C17\"   \"#FF7F00\"   #> [571] \"#FFD700\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#309C17\"   #> [577] \"#FF7F00\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [583] \"#377EB8\"   \"#FF7F00\"   \"#E0E0E030\" \"#A65628\"   \"#E0E0E030\" \"#E0E0E030\" #> [589] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [595] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [601] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [607] \"#A65628\"   \"#A65628\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#9ACD32\"   #> [613] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [619] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [625] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#377EB8\"   \"#E0E0E030\" \"#FFD700\"   #> [631] \"#FFD700\"   \"#E0E0E030\" \"#FF7F00\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [637] \"#E0E0E030\" \"#E0E0E030\" \"#377EB8\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [643] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#00CED1\"   \"#377EB8\"   #> [649] \"#FF7F00\"   \"#E0E0E030\" \"#FFD700\"   \"#E0E0E030\" \"#FFD700\"   \"#377EB8\"   #> [655] \"#E0E0E030\" \"#FFD700\"   \"#FF7F00\"   \"#E41A1C\"   \"#FFD700\"   \"#E0E0E030\" #> [661] \"#FFD700\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E41A1C\"   \"#E0E0E030\" #> [667] \"#377EB8\"   \"#309C17\"   \"#377EB8\"   \"#FFD700\"   \"#E0E0E030\" \"#E0E0E030\" #> [673] \"#E0E0E030\" \"#E0E0E030\" \"#F781BF\"   \"#E0E0E030\" \"#00CED1\"   \"#E0E0E030\" #> [679] \"#E0E0E030\" \"#00CED1\"   \"#E0E0E030\" \"#377EB8\"   \"#FF7F00\"   \"#E0E0E030\" #> [685] \"#E0E0E030\" \"#FF7F00\"   \"#E0E0E030\" \"#FF7F00\"   \"#00CED1\"   #>  #> $pred.col #>   [1] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#FF7F00\"   \"#9ACD32\"   #>   [7] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#FF7F00\"   \"#E0E0E030\" #>  [13] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#377EB8\"   \"#E0E0E030\" #>  [19] \"#E0E0E030\" \"#309C17\"   \"#E41A1C\"   \"#F781BF\"   \"#E0E0E030\" \"#E0E0E030\" #>  [25] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #>  [31] \"#E0E0E030\" \"#E0E0E030\" \"#9ACD32\"   \"#FFD700\"   \"#F781BF\"   \"#E0E0E030\" #>  [37] \"#A65628\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #>  [43] \"#00CED1\"   \"#9ACD32\"   \"#E0E0E030\" \"#E0E0E030\" \"#FFD700\"   \"#E0E0E030\" #>  [49] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#309C17\"   #>  [55] \"#E0E0E030\" \"#309C17\"   \"#E41A1C\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #>  [61] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#FF7F00\"   \"#E0E0E030\" \"#E0E0E030\" #>  [67] \"#FFD700\"   \"#377EB8\"   \"#F781BF\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #>  [73] \"#FFD700\"   \"#E0E0E030\" \"#E0E0E030\" \"#9ACD32\"   \"#F781BF\"   \"#E0E0E030\" #>  [79] \"#E0E0E030\" \"#377EB8\"   \"#377EB8\"   \"#E0E0E030\" \"#E0E0E030\" \"#A65628\"   #>  [85] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#FF7F00\"   \"#FF7F00\"   \"#309C17\"   #>  [91] \"#FF7F00\"   \"#E0E0E030\" \"#E0E0E030\" \"#309C17\"   \"#E0E0E030\" \"#E41A1C\"   #>  [97] \"#FF7F00\"   \"#E0E0E030\" \"#E0E0E030\" \"#F781BF\"   \"#FF7F00\"   \"#9ACD32\"   #> [103] \"#E0E0E030\" \"#F781BF\"   \"#E0E0E030\" \"#377EB8\"   \"#E0E0E030\" \"#E0E0E030\" #> [109] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E41A1C\"   \"#E0E0E030\" \"#E0E0E030\" #> [115] \"#E0E0E030\" \"#377EB8\"   \"#9ACD32\"   \"#377EB8\"   \"#E0E0E030\" \"#E0E0E030\" #> [121] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#FF7F00\"   \"#E0E0E030\" \"#E0E0E030\" #> [127] \"#E0E0E030\" \"#377EB8\"   \"#377EB8\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [133] \"#E41A1C\"   \"#E0E0E030\" \"#E0E0E030\" \"#A65628\"   \"#309C17\"   \"#E0E0E030\" #> [139] \"#309C17\"   \"#FFD700\"   \"#377EB8\"   \"#E0E0E030\" \"#E0E0E030\" \"#377EB8\"   #> [145] \"#E0E0E030\" \"#E41A1C\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#9ACD32\"   #> [151] \"#309C17\"   \"#00CED1\"   \"#E0E0E030\" \"#00CED1\"   \"#E0E0E030\" \"#E0E0E030\" #> [157] \"#E0E0E030\" \"#377EB8\"   \"#FFD700\"   \"#377EB8\"   \"#E0E0E030\" \"#E0E0E030\" #> [163] \"#377EB8\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#FFD700\"   \"#E0E0E030\" #> [169] \"#A65628\"   \"#F781BF\"   \"#F781BF\"   \"#E0E0E030\" \"#FF7F00\"   \"#377EB8\"   #> [175] \"#00CED1\"   \"#E0E0E030\" \"#E0E0E030\" \"#FFD700\"   \"#E0E0E030\" \"#E0E0E030\" #> [181] \"#FF7F00\"   \"#E0E0E030\" \"#FFD700\"   \"#FF7F00\"   \"#E0E0E030\" \"#E0E0E030\" #> [187] \"#309C17\"   \"#A65628\"   \"#FF7F00\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [193] \"#377EB8\"   \"#9ACD32\"   \"#E0E0E030\" \"#FF7F00\"   \"#309C17\"   \"#E0E0E030\" #> [199] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#FF7F00\"   \"#E0E0E030\" \"#E0E0E030\" #> [205] \"#E0E0E030\" \"#FF7F00\"   \"#E0E0E030\" \"#FF7F00\"   \"#E0E0E030\" \"#FF7F00\"   #> [211] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [217] \"#377EB8\"   \"#E41A1C\"   \"#FF7F00\"   \"#FF7F00\"   \"#E0E0E030\" \"#F781BF\"   #> [223] \"#9ACD32\"   \"#E0E0E030\" \"#E0E0E030\" \"#A65628\"   \"#E0E0E030\" \"#FFD700\"   #> [229] \"#E0E0E030\" \"#E0E0E030\" \"#FFD700\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [235] \"#E0E0E030\" \"#309C17\"   \"#377EB8\"   \"#E0E0E030\" \"#E0E0E030\" \"#377EB8\"   #> [241] \"#E0E0E030\" \"#E0E0E030\" \"#9ACD32\"   \"#FF7F00\"   \"#E0E0E030\" \"#FFD700\"   #> [247] \"#E0E0E030\" \"#E0E0E030\" \"#FF7F00\"   \"#377EB8\"   \"#FFD700\"   \"#E0E0E030\" #> [253] \"#FFD700\"   \"#377EB8\"   \"#E0E0E030\" \"#E41A1C\"   \"#309C17\"   \"#9ACD32\"   #> [259] \"#00CED1\"   \"#FF7F00\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [265] \"#309C17\"   \"#E0E0E030\" \"#E0E0E030\" \"#309C17\"   \"#E0E0E030\" \"#E0E0E030\" #> [271] \"#E0E0E030\" \"#A65628\"   \"#377EB8\"   \"#F781BF\"   \"#E0E0E030\" \"#00CED1\"   #> [277] \"#E0E0E030\" \"#A65628\"   \"#E0E0E030\" \"#FFD700\"   \"#377EB8\"   \"#309C17\"   #> [283] \"#FFD700\"   \"#E0E0E030\" \"#FF7F00\"   \"#00CED1\"   \"#00CED1\"   \"#FF7F00\"   #> [289] \"#A65628\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [295] \"#E0E0E030\" \"#9ACD32\"   \"#E0E0E030\" \"#FFD700\"   \"#E0E0E030\" \"#E0E0E030\" #> [301] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E41A1C\"   \"#E0E0E030\" #> [307] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [313] \"#E0E0E030\" \"#E0E0E030\" \"#FF7F00\"   \"#E0E0E030\" \"#309C17\"   \"#E0E0E030\" #> [319] \"#9ACD32\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [325] \"#E0E0E030\" \"#00CED1\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [331] \"#309C17\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [337] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [343] \"#E0E0E030\" \"#9ACD32\"   \"#E0E0E030\" \"#E0E0E030\" \"#9ACD32\"   \"#E0E0E030\" #> [349] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#00CED1\"   \"#E0E0E030\" \"#FFD700\"   #> [355] \"#E0E0E030\" \"#FFD700\"   \"#309C17\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [361] \"#E0E0E030\" \"#E0E0E030\" \"#A65628\"   \"#FF7F00\"   \"#E0E0E030\" \"#E0E0E030\" #> [367] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [373] \"#377EB8\"   \"#FF7F00\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#309C17\"   #> [379] \"#FF7F00\"   \"#E0E0E030\" \"#E41A1C\"   \"#377EB8\"   \"#309C17\"   \"#E0E0E030\" #> [385] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#377EB8\"   \"#377EB8\"   #> [391] \"#E0E0E030\" \"#9ACD32\"   \"#E0E0E030\" \"#FF7F00\"   \"#E0E0E030\" \"#FF7F00\"   #> [397] \"#E0E0E030\" \"#E0E0E030\" \"#FFD700\"   \"#E0E0E030\" \"#309C17\"   \"#E0E0E030\" #> [403] \"#E0E0E030\" \"#9ACD32\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [409] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#FF7F00\"   \"#377EB8\"   #> [415] \"#00CED1\"   \"#FF7F00\"   \"#FFD700\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [421] \"#E0E0E030\" \"#377EB8\"   \"#00CED1\"   \"#9ACD32\"   \"#E0E0E030\" \"#FFD700\"   #> [427] \"#FFD700\"   \"#E0E0E030\" \"#F781BF\"   \"#FFD700\"   \"#E0E0E030\" \"#E0E0E030\" #> [433] \"#E0E0E030\" \"#E0E0E030\" \"#A65628\"   \"#309C17\"   \"#E0E0E030\" \"#E0E0E030\" #> [439] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [445] \"#E0E0E030\" \"#E0E0E030\" \"#A65628\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [451] \"#E0E0E030\" \"#377EB8\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [457] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E41A1C\"   \"#E0E0E030\" \"#FFD700\"   #> [463] \"#FFD700\"   \"#E0E0E030\" \"#FF7F00\"   \"#FFD700\"   \"#E0E0E030\" \"#E0E0E030\" #> [469] \"#FFD700\"   \"#FF7F00\"   \"#FF7F00\"   \"#E0E0E030\" \"#FF7F00\"   \"#E0E0E030\" #> [475] \"#E0E0E030\" \"#FF7F00\"   \"#E0E0E030\" \"#FFD700\"   \"#E0E0E030\" \"#E0E0E030\" #> [481] \"#FFD700\"   \"#E0E0E030\" \"#F781BF\"   \"#E0E0E030\" \"#E0E0E030\" \"#FFD700\"   #> [487] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#A65628\"   \"#377EB8\"   \"#E0E0E030\" #> [493] \"#00CED1\"   \"#E0E0E030\" \"#FF7F00\"   \"#00CED1\"   \"#E0E0E030\" \"#E0E0E030\" #> [499] \"#377EB8\"   \"#E0E0E030\" \"#E0E0E030\" \"#FFD700\"   \"#E0E0E030\" \"#E0E0E030\" #> [505] \"#377EB8\"   \"#E0E0E030\" \"#377EB8\"   \"#FFD700\"   \"#E0E0E030\" \"#E0E0E030\" #> [511] \"#E0E0E030\" \"#377EB8\"   \"#377EB8\"   \"#309C17\"   \"#E0E0E030\" \"#E41A1C\"   #> [517] \"#309C17\"   \"#309C17\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#9ACD32\"   #> [523] \"#FFD700\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [529] \"#E0E0E030\" \"#A65628\"   \"#A65628\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [535] \"#E0E0E030\" \"#FFD700\"   \"#FFD700\"   \"#E0E0E030\" \"#00CED1\"   \"#E0E0E030\" #> [541] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#377EB8\"   \"#FFD700\"   \"#FF7F00\"   #> [547] \"#E0E0E030\" \"#E0E0E030\" \"#9ACD32\"   \"#FF7F00\"   \"#E0E0E030\" \"#A65628\"   #> [553] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [559] \"#E0E0E030\" \"#FF7F00\"   \"#FF7F00\"   \"#E0E0E030\" \"#FF7F00\"   \"#00CED1\"   #> [565] \"#E0E0E030\" \"#E0E0E030\" \"#FF7F00\"   \"#FF7F00\"   \"#309C17\"   \"#FF7F00\"   #> [571] \"#FFD700\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#309C17\"   #> [577] \"#FF7F00\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [583] \"#377EB8\"   \"#FF7F00\"   \"#E0E0E030\" \"#A65628\"   \"#E0E0E030\" \"#E0E0E030\" #> [589] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [595] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [601] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [607] \"#A65628\"   \"#A65628\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#9ACD32\"   #> [613] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [619] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [625] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#377EB8\"   \"#E0E0E030\" \"#FFD700\"   #> [631] \"#FFD700\"   \"#E0E0E030\" \"#FF7F00\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [637] \"#E0E0E030\" \"#E0E0E030\" \"#377EB8\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" #> [643] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#00CED1\"   \"#377EB8\"   #> [649] \"#FF7F00\"   \"#E0E0E030\" \"#FFD700\"   \"#E0E0E030\" \"#FFD700\"   \"#377EB8\"   #> [655] \"#E0E0E030\" \"#FFD700\"   \"#FF7F00\"   \"#E41A1C\"   \"#FFD700\"   \"#E0E0E030\" #> [661] \"#FFD700\"   \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E41A1C\"   \"#E0E0E030\" #> [667] \"#377EB8\"   \"#309C17\"   \"#377EB8\"   \"#FFD700\"   \"#E0E0E030\" \"#E0E0E030\" #> [673] \"#E0E0E030\" \"#E0E0E030\" \"#F781BF\"   \"#E0E0E030\" \"#00CED1\"   \"#E0E0E030\" #> [679] \"#E0E0E030\" \"#00CED1\"   \"#E0E0E030\" \"#377EB8\"   \"#FF7F00\"   \"#E0E0E030\" #> [685] \"#E0E0E030\" \"#FF7F00\"   \"#E0E0E030\" \"#FF7F00\"   \"#00CED1\"   #>  #> attr(,\"class\") #> [1] \"plot2Ds\" \"list\"    head(data1(res)) #>                  PC1        PC2 #> AT1G01610 -0.3535953  1.1842015 #> AT1G02120 -2.9535572  0.7418581 #> AT1G02520 -0.1197655  0.3958698 #> AT1G03220  0.2601386  0.7441646 #> AT1G03860  2.8893018 -0.4735220 #> AT1G04120 -4.1688044 -3.5954428 head(col1(res)) #> [1] \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#E0E0E030\" \"#FF7F00\"   \"#9ACD32\""},{"path":"https://lgatto.github.io/pRoloc/reference/plotConsProfiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot marker consenses profiles. — plotConsProfiles","title":"Plot marker consenses profiles. — plotConsProfiles","text":"function plots marker consensus profiles obtained mrkConsProfile","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/plotConsProfiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot marker consenses profiles. — plotConsProfiles","text":"","code":"plotConsProfiles(object, order = NULL, plot = TRUE)"},{"path":"https://lgatto.github.io/pRoloc/reference/plotConsProfiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot marker consenses profiles. — plotConsProfiles","text":"object matrix containing marker consensus profiles output mrkConsProfiles(). order Order markers (optional). plot logical(1) defining whether heatmap plotted. Default TRUE.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/plotConsProfiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot marker consenses profiles. — plotConsProfiles","text":"Invisibly returns ggplot2 object.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/plotConsProfiles.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot marker consenses profiles. — plotConsProfiles","text":"Tom Smith","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/plotConsProfiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot marker consenses profiles. — plotConsProfiles","text":"","code":"library(\"pRolocdata\") data(E14TG2aS1) hc <- mrkHClust(E14TG2aS1, plot = FALSE) mm <- getMarkerClasses(E14TG2aS1) ord <- levels(factor(mm))[order.dendrogram(hc)] fmat <- mrkConsProfiles(E14TG2aS1) plotConsProfiles(fmat, order = ord)"},{"path":"https://lgatto.github.io/pRoloc/reference/plotDist.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots the distribution of features across fractions — plotDist","title":"Plots the distribution of features across fractions — plotDist","text":"Produces line plot showing feature abundances across fractions.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/plotDist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots the distribution of features across fractions — plotDist","text":"","code":"plotDist(   object,   markers,   fcol = NULL,   mcol = \"steelblue\",   pcol = getUnknowncol(),   alpha = 0.3,   type = \"b\",   lty = 1,   fractions = sampleNames(object),   ylab = \"Intensity\",   xlab = \"Fractions\",   ylim,   ... )"},{"path":"https://lgatto.github.io/pRoloc/reference/plotDist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots the distribution of features across fractions — plotDist","text":"object instance class MSnSet. markers character, numeric logical appropriate length content used subset object define organelle markers. fcol Feature meta-data label (fData column name) defining groups differentiated using different colours. NULL (default) ignored mcol pcol used. mcol character define colour marker features.  Default \"steelblue\". pcol character define colour non-markers features.  Default colour used features unknown localisation, returned getUnknowncol. alpha numeric defining alpha channel (transparency) points, 0 <= alpha <= 1, 0 1 completely transparent opaque. type Character string defining type lines. example \"p\" points, \"l\" lines, \"b\" . See plot possible types. lty Vector line types marker profiles. Default 1 (solid). See par details. fractions character defining phenoData variable used label fraction along x axis. Default use sampleNames(object). ylab y-axis label. Default \"Intensity\". xlab x-axis label. Default \"Fractions\". ylim numeric vector length 2, giving y coordinates range. ... Additional parameters passed plot.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/plotDist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots the distribution of features across fractions — plotDist","text":"Used side effect producing feature     distribution plot. Invisibly returns data matrix.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/plotDist.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plots the distribution of features across fractions — plotDist","text":"Laurent Gatto","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/plotDist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots the distribution of features across fractions — plotDist","text":"","code":"library(\"pRolocdata\") data(tan2009r1) j <- which(fData(tan2009r1)$markers == \"mitochondrion\") i <- which(fData(tan2009r1)$PLSDA == \"mitochondrion\") plotDist(tan2009r1[i, ], markers = featureNames(tan2009r1)[j])  plotDist(tan2009r1[i, ], markers = featureNames(tan2009r1)[j],          fractions = \"Fractions\")  ## plot and colour all marker profiles tanmrk <- markerMSnSet(tan2009r1) plotDist(tanmrk, fcol = \"markers\")"},{"path":"https://lgatto.github.io/pRoloc/reference/plotEllipse.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to plot probabiltiy ellipses on marker PCA plots to visualise and assess TAGM models. — plotEllipse","title":"A function to plot probabiltiy ellipses on marker PCA plots to visualise and assess TAGM models. — plotEllipse","text":"Note running PCA, function scale data (centring performed), opposed [plot2D()]. marker proteins displayed; protein unknown location, used estimate MAP parameters, filtered .","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/plotEllipse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to plot probabiltiy ellipses on marker PCA plots to visualise and assess TAGM models. — plotEllipse","text":"","code":"plotEllipse(object, params, dims = c(1, 2), method = \"MAP\", ...)"},{"path":"https://lgatto.github.io/pRoloc/reference/plotEllipse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to plot probabiltiy ellipses on marker PCA plots to visualise and assess TAGM models. — plotEllipse","text":"object [`MSnbase::MSnset`] containing quantitative spatial proteomics data. params [`MAPParams`] TAGM-MAP parameters, generated `tagmMapTrain`. dims `numeric(2)` principal components along project data. Default `c(1, 2)`. method method used. Currently `\"MAP\"` . ... Additional parameters passed [plot2D()].","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/plotEllipse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to plot probabiltiy ellipses on marker PCA plots to visualise and assess TAGM models. — plotEllipse","text":"PCA plot marker data probability     ellipises. outer ellipse contains 99     probability whilst middle inner ellipses contain 95     90     clusters represented black circumpunct (circled dot).","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/reference/plsdaClassification.html","id":null,"dir":"Reference","previous_headings":"","what":"plsda classification — plsdaClassification","title":"plsda classification — plsdaClassification","text":"Classification using partial least square distcriminant analysis algorithm.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/plsdaClassification.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plsda classification — plsdaClassification","text":"","code":"plsdaClassification(   object,   assessRes,   scores = c(\"prediction\", \"all\", \"none\"),   ncomp,   fcol = \"markers\",   ... )"},{"path":"https://lgatto.github.io/pRoloc/reference/plsdaClassification.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plsda classification — plsdaClassification","text":"object instance class \"MSnSet\". assessRes instance class \"GenRegRes\", generated plsdaOptimisation. scores One \"prediction\", \"\" \"none\" report score predicted class , classes none. ncomp assessRes missing, ncomp must provided. fcol feature meta-data containing marker definitions. Default markers. ... Additional parameters passed plsda package caret.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/plsdaClassification.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plsda classification — plsdaClassification","text":"instance class \"MSnSet\"     plsda plsda.scores feature variables storing     classification results scores respectively.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/plsdaClassification.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"plsda classification — plsdaClassification","text":"Laurent Gatto","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/plsdaClassification.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plsda classification — plsdaClassification","text":"","code":"# \\donttest{ ## not running this one for time considerations library(pRolocdata) data(dunkley2006) ## reducing parameter search space and iterations  params <- plsdaOptimisation(dunkley2006, ncomp = c(3, 10),  times = 2) #>    |                                                                               |                                                                      |   0% #> Error: package klaR is required params #> new(\"standardGeneric\", .Data = function (x, ...)  #> standardGeneric(\"params\"), generic = \"params\", package = \"S4Vectors\",  #>     group = list(), valueClass = character(0), signature = \"x\",  #>     default = NULL, skeleton = (function (x, ...)  #>     stop(gettextf(\"invalid call in method dispatch to '%s' (no default method)\",  #>         \"params\"), domain = NA))(x, ...)) #> <bytecode: 0x55cd603bb8f8> #> <environment: 0x55cd603b7300> #> attr(,\"generic\") #> [1] \"params\" #> attr(,\"generic\")attr(,\"package\") #> [1] \"S4Vectors\" #> attr(,\"package\") #> [1] \"S4Vectors\" #> attr(,\"group\") #> list() #> attr(,\"valueClass\") #> character(0) #> attr(,\"signature\") #> [1] \"x\" #> attr(,\"default\") #> `\\001NULL\\001` #> attr(,\"skeleton\") #> (function (x, ...)  #> stop(gettextf(\"invalid call in method dispatch to '%s' (no default method)\",  #>     \"params\"), domain = NA))(x, ...) #> attr(,\"class\") #> [1] \"standardGeneric\" #> attr(,\"class\")attr(,\"package\") #> [1] \"methods\" plot(params) #> Error: unable to find an inherited method for function ‘params’ for signature ‘x = \"numeric\"’ f1Count(params) #> Error: unable to find an inherited method for function ‘f1Count’ for signature ‘object = \"standardGeneric\"’ levelPlot(params) #> Error: unable to find an inherited method for function ‘levelPlot’ for signature ‘object = \"standardGeneric\"’ getParams(params) #> Error: unable to find an inherited method for function ‘getParams’ for signature ‘object = \"standardGeneric\"’ res <- plsdaClassification(dunkley2006, params) #> Error: unable to find an inherited method for function ‘getParams’ for signature ‘object = \"standardGeneric\"’ getPredictions(res, fcol = \"plsda\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'object' in selecting a method for function 'fData': object 'res' not found getPredictions(res, fcol = \"plsda\", t = 0.9) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'object' in selecting a method for function 'fData': object 'res' not found plot2D(res, fcol = \"plsda\") #> Error: object 'res' not found # }"},{"path":"https://lgatto.github.io/pRoloc/reference/plsdaOptimisation.html","id":null,"dir":"Reference","previous_headings":"","what":"plsda parameter optimisation — plsdaOptimisation","title":"plsda parameter optimisation — plsdaOptimisation","text":"Classification parameter optimisation partial least square distcriminant analysis algorithm.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/plsdaOptimisation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plsda parameter optimisation — plsdaOptimisation","text":"","code":"plsdaOptimisation(   object,   fcol = \"markers\",   ncomp = 2:6,   times = 100,   test.size = 0.2,   xval = 5,   fun = mean,   seed,   verbose = TRUE,   ... )"},{"path":"https://lgatto.github.io/pRoloc/reference/plsdaOptimisation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plsda parameter optimisation — plsdaOptimisation","text":"object instance class \"MSnSet\". fcol feature meta-data containing marker definitions. Default markers. ncomp hyper-parameter. Default values 2:6. times number times internal cross-validation performed. Default 100. test.size size test data. Default 0.2 (20 percent). xval n-cross validation. Default 5. fun function used summarise xval macro F1 matrices. seed optional random number generator seed. verbose logical defining whether progress bar displayed. ... Additional parameters passed plsda package caret.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/plsdaOptimisation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plsda parameter optimisation — plsdaOptimisation","text":"instance class \"GenRegRes\".","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/plsdaOptimisation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"plsda parameter optimisation — plsdaOptimisation","text":"Note performance scores precision, recall (macro) F1 calculated, NA values replaced 0. decision motivated fact class either NA precision recall result NA F1 score , eventually, NA macro F1 (.e. mean(F1)). Replacing NAs 0s leads F1 values 0 reduced yet defined final macro F1 score.","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/reference/plsdaOptimisation.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"plsda parameter optimisation — plsdaOptimisation","text":"Laurent Gatto","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/rfClassification.html","id":null,"dir":"Reference","previous_headings":"","what":"rf classification — rfClassification","title":"rf classification — rfClassification","text":"Classification using random forest algorithm.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/rfClassification.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rf classification — rfClassification","text":"","code":"rfClassification(   object,   assessRes,   scores = c(\"prediction\", \"all\", \"none\"),   mtry,   fcol = \"markers\",   ... )"},{"path":"https://lgatto.github.io/pRoloc/reference/rfClassification.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rf classification — rfClassification","text":"object instance class \"MSnSet\". assessRes instance class \"GenRegRes\", generated rfOptimisation. scores One \"prediction\", \"\" \"none\" report score predicted class , classes none. mtry assessRes missing, mtry must provided. fcol feature meta-data containing marker definitions. Default markers. ... Additional parameters passed randomForest package randomForest.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/rfClassification.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rf classification — rfClassification","text":"instance class \"MSnSet\"     rf rf.scores feature variables storing     classification results scores respectively.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/rfClassification.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"rf classification — rfClassification","text":"Laurent Gatto","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/rfClassification.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"rf classification — rfClassification","text":"","code":"library(pRolocdata) data(dunkley2006) ## reducing parameter search space and iterations  params <- rfOptimisation(dunkley2006, mtry = c(2, 5, 10),  times = 3) #>    |                                                                               |                                                                      |   0%   |                                                                               |=====                                                                 |   7%   |                                                                               |=========                                                             |  13%   |                                                                               |==============                                                        |  20%   |                                                                               |===================                                                   |  27%   |                                                                               |=======================                                               |  33%   |                                                                               |============================                                          |  40%   |                                                                               |=================================                                     |  47%   |                                                                               |=====================================                                 |  53%   |                                                                               |==========================================                            |  60%   |                                                                               |===============================================                       |  67%   |                                                                               |===================================================                   |  73%   |                                                                               |========================================================              |  80%   |                                                                               |=============================================================         |  87%   |                                                                               |=================================================================     |  93%   |                                                                               |======================================================================| 100% params #> Object of class \"GenRegRes\" #> Algorithm: randomForest  #> Hyper-parameters: #>  mtry: 2 5 10 #> Design: #>  Replication: 3 x 5-fold X-validation #>  Partitioning: 0.2/0.8 (test/train) #> Results #>  macro F1: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>  0.9650  0.9748  0.9846  0.9832  0.9923  1.0000  #>  best mtry: 2    plot(params)  f1Count(params) #>  #> 2  #> 1  levelPlot(params)  getParams(params) #> mtry  #>    2  res <- rfClassification(dunkley2006, params) #> [1] \"markers\" getPredictions(res, fcol = \"rf\") #> ans #>      ER lumen   ER membrane         Golgi Mitochondrion            PM  #>            19           179            97           103           135  #>       Plastid      Ribosome           TGN       vacuole  #>            51            51            20            34  #> MSnSet (storageMode: lockedEnvironment) #> assayData: 689 features, 16 samples  #>   element names: exprs  #> protocolData: none #> phenoData #>   sampleNames: M1F1A M1F4A ... M2F11B (16 total) #>   varLabels: membrane.prep fraction replicate #>   varMetadata: labelDescription #> featureData #>   featureNames: AT1G09210 AT1G21750 ... AT4G39080 (689 total) #>   fvarLabels: assigned evidence ... rf.pred (11 total) #>   fvarMetadata: labelDescription #> experimentData: use 'experimentData(object)' #>   pubMedIds: 16618929  #> Annotation:   #> - - - Processing information - - - #> Loaded on Thu Jul 16 22:53:08 2015.  #> Normalised to sum of intensities.  #> Added markers from  'mrk' marker vector. Thu Jul 16 22:53:08 2015  #> Performed random forest prediction (mtry=2) Sat Nov 23 16:04:48 2024  #> Added rf predictions according to global threshold = 0 Sat Nov 23 16:04:48 2024  #>  MSnbase version: 1.17.12  getPredictions(res, fcol = \"rf\", t = 0.75) #> ans #>      ER lumen   ER membrane         Golgi Mitochondrion            PM  #>            14           139            77            89            96  #>       Plastid      Ribosome           TGN       unknown       vacuole  #>            46            20            13           168            27  #> MSnSet (storageMode: lockedEnvironment) #> assayData: 689 features, 16 samples  #>   element names: exprs  #> protocolData: none #> phenoData #>   sampleNames: M1F1A M1F4A ... M2F11B (16 total) #>   varLabels: membrane.prep fraction replicate #>   varMetadata: labelDescription #> featureData #>   featureNames: AT1G09210 AT1G21750 ... AT4G39080 (689 total) #>   fvarLabels: assigned evidence ... rf.pred (11 total) #>   fvarMetadata: labelDescription #> experimentData: use 'experimentData(object)' #>   pubMedIds: 16618929  #> Annotation:   #> - - - Processing information - - - #> Loaded on Thu Jul 16 22:53:08 2015.  #> Normalised to sum of intensities.  #> Added markers from  'mrk' marker vector. Thu Jul 16 22:53:08 2015  #> Performed random forest prediction (mtry=2) Sat Nov 23 16:04:48 2024  #> Added rf predictions according to global threshold = 0.75 Sat Nov 23 16:04:48 2024  #>  MSnbase version: 1.17.12  plot2D(res, fcol = \"rf\")"},{"path":"https://lgatto.github.io/pRoloc/reference/rfOptimisation.html","id":null,"dir":"Reference","previous_headings":"","what":"svm parameter optimisation — rfOptimisation","title":"svm parameter optimisation — rfOptimisation","text":"Classification parameter optimisation random forest algorithm.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/rfOptimisation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"svm parameter optimisation — rfOptimisation","text":"","code":"rfOptimisation(   object,   fcol = \"markers\",   mtry = NULL,   times = 100,   test.size = 0.2,   xval = 5,   fun = mean,   seed,   verbose = TRUE,   ... )"},{"path":"https://lgatto.github.io/pRoloc/reference/rfOptimisation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"svm parameter optimisation — rfOptimisation","text":"object instance class \"MSnSet\". fcol feature meta-data containing marker definitions. Default markers. mtry hyper-parameter. Default value NULL. times number times internal cross-validation performed. Default 100. test.size size test data. Default 0.2 (20 percent). xval n-cross validation. Default 5. fun function used summarise xval macro F1 matrices. seed optional random number generator seed. verbose logical defining whether progress bar displayed. ... Additional parameters passed randomForest package randomForest.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/rfOptimisation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"svm parameter optimisation — rfOptimisation","text":"instance class \"GenRegRes\".","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/rfOptimisation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"svm parameter optimisation — rfOptimisation","text":"Note performance scores precision, recall (macro) F1 calculated, NA values replaced 0. decision motivated fact class either NA precision recall result NA F1 score , eventually, NA macro F1 (.e. mean(F1)). Replacing NAs 0s leads F1 values 0 reduced yet defined final macro F1 score.","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/reference/rfOptimisation.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"svm parameter optimisation — rfOptimisation","text":"Laurent Gatto","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/sampleMSnSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a stratified sample of an MSnSet — sampleMSnSet","title":"Extract a stratified sample of an MSnSet — sampleMSnSet","text":"function extracts stratified sample MSnSet.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/sampleMSnSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a stratified sample of an MSnSet — sampleMSnSet","text":"","code":"sampleMSnSet(object, fcol = \"markers\", size = 0.2, seed)"},{"path":"https://lgatto.github.io/pRoloc/reference/sampleMSnSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a stratified sample of an MSnSet — sampleMSnSet","text":"object instance class MSnSet fcol feature meta-data column name containing marker (vector matrix) definitions MSnSet stratified. Default markers. size size stratified sample extracted. Default 0.2 (20 percent). seed optional random number generator seed.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/sampleMSnSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a stratified sample of an MSnSet — sampleMSnSet","text":"stratified sample (according defined fcol) instance class \"MSnSet\".","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/reference/sampleMSnSet.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract a stratified sample of an MSnSet — sampleMSnSet","text":"Lisa Breckels","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/sampleMSnSet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract a stratified sample of an MSnSet — sampleMSnSet","text":"","code":"library(pRolocdata) data(tan2009r1) dim(tan2009r1) #> [1] 888   4 smp <- sampleMSnSet(tan2009r1, fcol = \"markers\") #> Warning: New sample contains classes with < 6 markers dim(smp) #> [1] 182   4 getMarkers(tan2009r1) #> organelleMarkers #>  Cytoskeleton            ER         Golgi      Lysosome       Nucleus  #>             7            28            13             8            21  #>            PM    Peroxisome    Proteasome  Ribosome 40S  Ribosome 60S  #>            34             4            15            20            32  #> mitochondrion       unknown  #>            29           677  getMarkers(smp) #> organelleMarkers #>  Cytoskeleton            ER         Golgi      Lysosome       Nucleus  #>             2             6             3             2             5  #>            PM    Peroxisome    Proteasome  Ribosome 40S  Ribosome 60S  #>             7             1             3             4             7  #> mitochondrion       unknown  #>             6           136"},{"path":"https://lgatto.github.io/pRoloc/reference/showGOEvidenceCodes.html","id":null,"dir":"Reference","previous_headings":"","what":"GO Evidence Codes — showGOEvidenceCodes","title":"GO Evidence Codes — showGOEvidenceCodes","text":"function prints textual description Gene Ontology evidence codes.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/showGOEvidenceCodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GO Evidence Codes — showGOEvidenceCodes","text":"","code":"showGOEvidenceCodes()  getGOEvidenceCodes()"},{"path":"https://lgatto.github.io/pRoloc/reference/showGOEvidenceCodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GO Evidence Codes — showGOEvidenceCodes","text":"functions used side effects printing evidence codes description.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/showGOEvidenceCodes.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"GO Evidence Codes — showGOEvidenceCodes","text":"Laurent Gatto","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/showGOEvidenceCodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GO Evidence Codes — showGOEvidenceCodes","text":"","code":"showGOEvidenceCodes() #> GO Term Evidence Code #>  Experimental Evidence Codes #>   EXP: Inferred from Experiment #>    IDA: Inferred from Direct Assay #>    IPI: Inferred from Physical Interaction #>    IMP: Inferred from Mutant Phenotype #>    IGI: Inferred from Genetic Interaction #>    IEP: Inferred from Expression Pattern #>  Computational Analysis Evidence Codes #>   ISS: Inferred from Sequence or Structural Similarity #>    ISO: Inferred from Sequence Orthology #>    ISA: Inferred from Sequence Alignment #>    ISM: Inferred from Sequence Model #>    IGC: Inferred from Genomic Context #>    IBA: Inferred from Biological aspect of Ancestor #>    IBD: Inferred from Biological aspect of Descendant #>    IKR: Inferred from Key Residues #>    IRD: Inferred from Rapid Divergence #>    RCA: inferred from Reviewed Computational Analysis #>  Author Statement Evidence Codes #>    TAS: Traceable Author Statement #>    NAS: Non-traceable Author Statement #>  Curator Statement Evidence Codes #>    IC: Inferred by Curator #>    ND: No biological Data available #>  Automatically-assigned Evidence Codes #>    IEA: Inferred from Electronic Annotation #>  Obsolete Evidence Codes #>    NR: Not Recorded getGOEvidenceCodes() #>  [1] \"EXP\" \"IDA\" \"IPI\" \"IMP\" \"IGI\" \"IEP\" \"ISS\" \"ISO\" \"ISA\" \"ISM\" \"IGC\" \"IBA\" #> [13] \"IBD\" \"IKR\" \"IRD\" \"RCA\" \"TAS\" \"NAS\" \"IC\"  \"ND\"  \"IEA\" \"NR\""},{"path":"https://lgatto.github.io/pRoloc/reference/spatial2D.html","id":null,"dir":"Reference","previous_headings":"","what":"Uncertainty plot in localisation probabilities — spatial2D","title":"Uncertainty plot in localisation probabilities — spatial2D","text":"Produces pca plot spatial variation localisation probabilities","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/spatial2D.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uncertainty plot in localisation probabilities — spatial2D","text":"","code":"spatial2D(   object,   dims = c(1, 2),   cov.function = fields::wendland.cov,   theta = 1,   derivative = 2,   k = 1,   breaks = c(0.99, 0.95, 0.9, 0.85, 0.8, 0.75, 0.7),   aspect = 0.5 )"},{"path":"https://lgatto.github.io/pRoloc/reference/spatial2D.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uncertainty plot in localisation probabilities — spatial2D","text":"object valid object class MSnset mcmc prediction results tagmMCMCpredict dims PCA dimension project data, default c(1,2) cov.function covariance function used default wendland.cov. See fields package. theta hyperparameter covariance function. See fields package. Default 1. derivative number derivative wendland kernel. See fields package. Default 2. k hyperparamter covariance function. See fields package. Default 1. breaks Probability values draw contour bands. Default c(0.99, 0.95, 0.9, 0.85, 0.8, 0.75, 0.7) aspect argument change plotting aspect PCA","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/spatial2D.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uncertainty plot in localisation probabilities — spatial2D","text":"Used side effect producing plot. Invisibily returns ggplot     object can manipulated","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/spatial2D.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Uncertainty plot in localisation probabilities — spatial2D","text":"Oliver M. Crook <omc25@cam.ac.uk>","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/spatial2D.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Uncertainty plot in localisation probabilities — spatial2D","text":"","code":"if (FALSE) { # \\dontrun{ library(\"pRolocdata\") data(\"tan2009r1\")  tanres <- tagmMcmcTrain(object = tan2009r1) tanres <- tagmMcmcProcess(tanres) tan2009r1 <- tagmMcmcPredict(object = tan2009r1, params = tanres, probJoint = TRUE) spatial2D(object = tan2009r1) } # }"},{"path":"https://lgatto.github.io/pRoloc/reference/subsetMarkers.html","id":null,"dir":"Reference","previous_headings":"","what":"Subsets markers — subsetMarkers","title":"Subsets markers — subsetMarkers","text":"Subsets matrix markers specific terms","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/subsetMarkers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subsets markers — subsetMarkers","text":"","code":"subsetMarkers(object, fcol = \"GOAnnotations\", keep)"},{"path":"https://lgatto.github.io/pRoloc/reference/subsetMarkers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subsets markers — subsetMarkers","text":"object instance class MSnSet. fcol name markers matrix. Default GOAnnotations. keep Integer character vector specifying columns keep markers matrix, defined fcol.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/subsetMarkers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subsets markers — subsetMarkers","text":"updated MSnSet","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/reference/subsetMarkers.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Subsets markers — subsetMarkers","text":"Lisa M Breckels","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/svmClassification.html","id":null,"dir":"Reference","previous_headings":"","what":"svm classification — svmClassification","title":"svm classification — svmClassification","text":"Classification using support vector machine algorithm.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/svmClassification.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"svm classification — svmClassification","text":"","code":"svmClassification(   object,   assessRes,   scores = c(\"prediction\", \"all\", \"none\"),   cost,   sigma,   fcol = \"markers\",   ... )"},{"path":"https://lgatto.github.io/pRoloc/reference/svmClassification.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"svm classification — svmClassification","text":"object instance class \"MSnSet\". assessRes instance class \"GenRegRes\", generated svmOptimisation. scores One \"prediction\", \"\" \"none\" report score predicted class , classes none. cost assessRes missing, cost must provided. sigma assessRes missing, sigma must provided. fcol feature meta-data containing marker definitions. Default markers. ... Additional parameters passed svm package e1071.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/svmClassification.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"svm classification — svmClassification","text":"instance class \"MSnSet\"     svm svm.scores feature variables storing     classification results scores respectively.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/svmClassification.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"svm classification — svmClassification","text":"Laurent Gatto","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/svmClassification.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"svm classification — svmClassification","text":"","code":"library(pRolocdata) data(dunkley2006) ## reducing parameter search space and iterations  params <- svmOptimisation(dunkley2006, cost = 2^seq(-2,2,2), sigma = 10^seq(-1, 1, 1),  times = 3) #>    |                                                                               |                                                                      |   0%   |                                                                               |=====                                                                 |   7%   |                                                                               |=========                                                             |  13%   |                                                                               |==============                                                        |  20%   |                                                                               |===================                                                   |  27%   |                                                                               |=======================                                               |  33%   |                                                                               |============================                                          |  40%   |                                                                               |=================================                                     |  47%   |                                                                               |=====================================                                 |  53%   |                                                                               |==========================================                            |  60%   |                                                                               |===============================================                       |  67%   |                                                                               |===================================================                   |  73%   |                                                                               |========================================================              |  80%   |                                                                               |=============================================================         |  87%   |                                                                               |=================================================================     |  93%   |                                                                               |======================================================================| 100% params #> Object of class \"GenRegRes\" #> Algorithm: svm  #> Hyper-parameters: #>  cost: 0.25 1 4 #>  sigma: 0.1 1 10 #> Design: #>  Replication: 3 x 5-fold X-validation #>  Partitioning: 0.2/0.8 (test/train) #> Results #>  macro F1: #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>  0.9740  0.9762  0.9783  0.9841  0.9891  1.0000  #>  best sigma: 0.1    #>  best cost: 4 1    plot(params)  f1Count(params) #>     1 4 #> 0.1 1 0 levelPlot(params)  getParams(params) #> sigma  cost  #>   0.1   1.0  res <- svmClassification(dunkley2006, params) #> [1] \"markers\" getPredictions(res, fcol = \"svm\") #> ans #>      ER lumen   ER membrane         Golgi Mitochondrion            PM  #>            16           177            99           102           136  #>       Plastid      Ribosome           TGN       vacuole  #>            52            54            18            35  #> MSnSet (storageMode: lockedEnvironment) #> assayData: 689 features, 16 samples  #>   element names: exprs  #> protocolData: none #> phenoData #>   sampleNames: M1F1A M1F4A ... M2F11B (16 total) #>   varLabels: membrane.prep fraction replicate #>   varMetadata: labelDescription #> featureData #>   featureNames: AT1G09210 AT1G21750 ... AT4G39080 (689 total) #>   fvarLabels: assigned evidence ... svm.pred (11 total) #>   fvarMetadata: labelDescription #> experimentData: use 'experimentData(object)' #>   pubMedIds: 16618929  #> Annotation:   #> - - - Processing information - - - #> Loaded on Thu Jul 16 22:53:08 2015.  #> Normalised to sum of intensities.  #> Added markers from  'mrk' marker vector. Thu Jul 16 22:53:08 2015  #> Performed svm prediction (sigma=0.1 cost=1) Sat Nov 23 16:04:53 2024  #> Added svm predictions according to global threshold = 0 Sat Nov 23 16:04:53 2024  #>  MSnbase version: 1.17.12  getPredictions(res, fcol = \"svm\", t = 0.75) #> ans #>      ER lumen   ER membrane         Golgi Mitochondrion            PM  #>            14           147            70            93           109  #>       Plastid      Ribosome           TGN       unknown       vacuole  #>            44            27            13           144            28  #> MSnSet (storageMode: lockedEnvironment) #> assayData: 689 features, 16 samples  #>   element names: exprs  #> protocolData: none #> phenoData #>   sampleNames: M1F1A M1F4A ... M2F11B (16 total) #>   varLabels: membrane.prep fraction replicate #>   varMetadata: labelDescription #> featureData #>   featureNames: AT1G09210 AT1G21750 ... AT4G39080 (689 total) #>   fvarLabels: assigned evidence ... svm.pred (11 total) #>   fvarMetadata: labelDescription #> experimentData: use 'experimentData(object)' #>   pubMedIds: 16618929  #> Annotation:   #> - - - Processing information - - - #> Loaded on Thu Jul 16 22:53:08 2015.  #> Normalised to sum of intensities.  #> Added markers from  'mrk' marker vector. Thu Jul 16 22:53:08 2015  #> Performed svm prediction (sigma=0.1 cost=1) Sat Nov 23 16:04:53 2024  #> Added svm predictions according to global threshold = 0.75 Sat Nov 23 16:04:53 2024  #>  MSnbase version: 1.17.12  plot2D(res, fcol = \"svm\")"},{"path":"https://lgatto.github.io/pRoloc/reference/svmOptimisation.html","id":null,"dir":"Reference","previous_headings":"","what":"svm parameter optimisation — svmOptimisation","title":"svm parameter optimisation — svmOptimisation","text":"Classification parameter optimisation support vector machine algorithm.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/svmOptimisation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"svm parameter optimisation — svmOptimisation","text":"","code":"svmOptimisation(   object,   fcol = \"markers\",   cost = 2^(-4:4),   sigma = 10^(-3:2),   times = 100,   test.size = 0.2,   xval = 5,   fun = mean,   seed,   verbose = TRUE,   ... )"},{"path":"https://lgatto.github.io/pRoloc/reference/svmOptimisation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"svm parameter optimisation — svmOptimisation","text":"object instance class \"MSnSet\". fcol feature meta-data containing marker definitions. Default markers. cost hyper-parameter. Default values 2^-4:4. sigma hyper-parameter. Default values 10^(-2:3). times number times internal cross-validation performed. Default 100. test.size size test data. Default 0.2 (20 percent). xval n-cross validation. Default 5. fun function used summarise xval macro F1 matrices. seed optional random number generator seed. verbose logical defining whether progress bar displayed. ... Additional parameters passed svm package e1071.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/svmOptimisation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"svm parameter optimisation — svmOptimisation","text":"instance class \"GenRegRes\".","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/svmOptimisation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"svm parameter optimisation — svmOptimisation","text":"Note performance scores precision, recall (macro) F1 calculated, NA values replaced 0. decision motivated fact class either NA precision recall result NA F1 score , eventually, NA macro F1 (.e. mean(F1)). Replacing NAs 0s leads F1 values 0 reduced yet defined final macro F1 score.","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/reference/svmOptimisation.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"svm parameter optimisation — svmOptimisation","text":"Laurent Gatto","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/tagm-map.html","id":null,"dir":"Reference","previous_headings":"","what":"The `logPosteriors` function can be used to extract the log-posteriors at each iteration of the EM algorithm to check for convergence. — MAPParams-class","title":"The `logPosteriors` function can be used to extract the log-posteriors at each iteration of the EM algorithm to check for convergence. — MAPParams-class","text":"functions implement T augmented Gaussian mixture (TAGM) model mass spectrometry-based spatial proteomics datasets using maximum posteriori (MAP) optimisation routine.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/tagm-map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The `logPosteriors` function can be used to extract the log-posteriors at each iteration of the EM algorithm to check for convergence. — MAPParams-class","text":"","code":"# S4 method for class 'MAPParams' show(object)  logPosteriors(x)  tagmMapTrain(   object,   fcol = \"markers\",   method = \"MAP\",   numIter = 100,   mu0 = NULL,   lambda0 = 0.01,   nu0 = NULL,   S0 = NULL,   beta0 = NULL,   u = 2,   v = 10,   seed = NULL )  tagmMapPredict(   object,   params,   fcol = \"markers\",   probJoint = FALSE,   probOutlier = TRUE )"},{"path":"https://lgatto.github.io/pRoloc/reference/tagm-map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The `logPosteriors` function can be used to extract the log-posteriors at each iteration of the EM algorithm to check for convergence. — MAPParams-class","text":"object MSnbase::MSnSet containing spatial proteomics data passed tagmMapTrain tagmPredict. x object class `MAPParams`. fcol feature meta-data containing marker definitions. Default markers. method charachter() describing inference method TAGM algorithm. Default \"MAP\". numIter number iterations expectation-maximisation algorithm. Default 100. mu0 prior mean. Default colMeans expression data. lambda0 prior shrinkage. Default 0.01. nu0 prior degreed freedom. Default ncol(exprs(object)) + 2 S0 prior inverse-wishary scale matrix. Empirical prior used default. beta0 prior Dirichlet distribution concentration. Default 1 class. u prior shape parameter Beta(u, v). Default 2 v prior shape parameter Beta(u, v). Default 10. seed optional random number generator seed. params instance class MAPParams, generated tagmMapTrain(). probJoint logical(1) indicating whether return joint probability matrix, .e. probability classes new tagm.map.joint feature variable. probOutlier logical(1) indicating whether return probability outlier new tagm.map.outlier feature variable. high value indicates protein unlikely belong annotated class (hence considered outlier).","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/tagm-map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The `logPosteriors` function can be used to extract the log-posteriors at each iteration of the EM algorithm to check for convergence. — MAPParams-class","text":"tagmMapTrain returns instance class MAPParams(). tagmPredict returns instance class MSnbase::MSnSet containing localisation predictions new tagm.map.allocation feature variable.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/tagm-map.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The `logPosteriors` function can be used to extract the log-posteriors at each iteration of the EM algorithm to check for convergence. — MAPParams-class","text":"tagmMapTrain function generates MAP parameters (object class MAPParams) based annotated quantitative spatial proteomics dataset (object class MSnbase::MSnSet). passed tagmPredict function predict sub-cellular localisation protein unknown localisation. See pRoloc-bayesian vignette details examples. implementation, numerical instability detected covariance matrix data small multiple identity added. message printed conditioning step performed.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/tagm-map.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"The `logPosteriors` function can be used to extract the log-posteriors at each iteration of the EM algorithm to check for convergence. — MAPParams-class","text":"method character() storing TAGM method name. priors list() priors parameters seed integer() random number generation seed. posteriors list() updated posterior parameters log-posterior model. datasize list() details size data","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/tagm-map.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The `logPosteriors` function can be used to extract the log-posteriors at each iteration of the EM algorithm to check for convergence. — MAPParams-class","text":"Bayesian Mixture Modelling Approach Spatial Proteomics Oliver M Crook, Claire M Mulvey, Paul D. W. Kirk, Kathryn S Lilley, Laurent Gatto bioRxiv 282269; doi: https://doi.org/10.1101/282269","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/reference/tagm-map.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The `logPosteriors` function can be used to extract the log-posteriors at each iteration of the EM algorithm to check for convergence. — MAPParams-class","text":"Laurent Gatto Oliver M. Crook","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/tagm-mcmc.html","id":null,"dir":"Reference","previous_headings":"","what":"Localisation of proteins using the TAGM MCMC method — tagmMcmcTrain","title":"Localisation of proteins using the TAGM MCMC method — tagmMcmcTrain","text":"functions implement T augmented Gaussian mixture (TAGM) model mass spectrometry-based spatial proteomics datasets using Markov-chain Monte-Carlo (MCMC) inference.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/tagm-mcmc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Localisation of proteins using the TAGM MCMC method — tagmMcmcTrain","text":"","code":"tagmMcmcTrain(   object,   fcol = \"markers\",   method = \"MCMC\",   numIter = 1000L,   burnin = 100L,   thin = 5L,   mu0 = NULL,   lambda0 = 0.01,   nu0 = NULL,   S0 = NULL,   beta0 = NULL,   u = 2,   v = 10,   numChains = 4L,   BPPARAM = BiocParallel::bpparam() )  tagmMcmcPredict(   object,   params,   fcol = \"markers\",   probJoint = FALSE,   probOutlier = TRUE )  tagmPredict(   object,   params,   fcol = \"markers\",   probJoint = FALSE,   probOutlier = TRUE )  tagmMcmcProcess(params)"},{"path":"https://lgatto.github.io/pRoloc/reference/tagm-mcmc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Localisation of proteins using the TAGM MCMC method — tagmMcmcTrain","text":"object MSnbase::MSnSet containing spatial proteomics data passed tagmMcmcTrain tagmPredict. fcol feature meta-data containing marker definitions. Default markers. method charachter() describing inference method TAGM algorithm. Default \"MCMC\". numIter number iterations MCMC algorithm. Default 1000. burnin number samples discarded begining chain. Default 100. thin thinning frequency applied MCMC chain.  Default 5. mu0 prior mean. Default colMeans expression data. lambda0 prior shrinkage. Default 0.01. nu0 prior degreed freedom. Default ncol(exprs(object)) + 2 S0 prior inverse-wishart scale matrix. Empirical prior used default. beta0 prior Dirichlet distribution concentration. Default 1 class. u prior shape parameter Beta(u, v). Default 2 v prior shape parameter Beta(u, v). Default 10. numChains number parrallel chains run. Default 4. BPPARAM Support parallel processing using BiocParallel infrastructure. missing (default), default registered BiocParallelParam parameters used. Alternatively, one can pass valid BiocParallelParam parameter instance: SnowParam, MulticoreParam, DoparParam, ... see BiocParallel package details. params instance class MCMCParams, generated tagmMcmcTrain(). probJoint logical(1) indicating whether return joint probability matrix, .e. probability classes new tagm.mcmc.joint feature variable. probOutlier logical(1) indicating whether return probability outlier new tagm.mcmc.outlier feature variable. high value indicates protein unlikely belong annotated class (hence considered outlier).","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/tagm-mcmc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Localisation of proteins using the TAGM MCMC method — tagmMcmcTrain","text":"tagmMcmcTrain returns instance class MCMCParams. tagmMcmcPredict returns instance class MSnbase::MSnSet containing localisation predictions new tagm.mcmc.allocation feature variable. allocation probability encoded tagm.mcmc.probability (corresponding mean distribution probability). additionm upper lower quantiles allocation probability distribution available tagm.mcmc.probability.lowerquantile tagm.mcmc.probability.upperquantile feature variables. Shannon entropy available tagm.mcmc.mean.shannon feature variable, measuring uncertainty allocations (high value representing high uncertainty; highest value natural logarithm number classes). tagmMcmcProcess returns instance class MCMCParams summary slot populated.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/tagm-mcmc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Localisation of proteins using the TAGM MCMC method — tagmMcmcTrain","text":"tagmMcmcTrain function generates samples posterior distributions (object class MCMCParams) based annotated quantitative spatial proteomics dataset (object class MSnbase::MSnSet). passed tagmPredict function predict sub-cellular localisation protein unknown localisation. See pRoloc-bayesian vignette details examples. implementation, numerical instability detected covariance matrix data small multiple identity added. message printed conditioning step performed.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/tagm-mcmc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Localisation of proteins using the TAGM MCMC method — tagmMcmcTrain","text":"Bayesian Mixture Modelling Approach Spatial Proteomics Oliver M Crook, Claire M Mulvey, Paul D. W. Kirk, Kathryn S Lilley, Laurent Gatto bioRxiv 282269; doi: https://doi.org/10.1101/282269","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/reference/testMSnSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a stratified 'test' MSnSet — testMSnSet","title":"Create a stratified 'test' MSnSet — testMSnSet","text":"function creates stratified 'test' MSnSet can used algorihtmic development. \"MSnSet\" containing marker proteins, defined fcol, returned new feature data column appended called test stratified subset markers relabelled 'unknowns'.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/testMSnSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a stratified 'test' MSnSet — testMSnSet","text":"","code":"testMSnSet(object, fcol = \"markers\", size = 0.2, seed)"},{"path":"https://lgatto.github.io/pRoloc/reference/testMSnSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a stratified 'test' MSnSet — testMSnSet","text":"object instance class \"MSnSet\" fcol feature meta-data column name containing marker definitions data stratified. Default markers. size size data set extracted. Default 0.2 (20 percent). seed optional random number generator seed.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/testMSnSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a stratified 'test' MSnSet — testMSnSet","text":"instance class \"MSnSet\" contains proteins labelled localisation .e. marker proteins, defined fcol new column feature data slot called test part labels relabelled \"unknown\" class (number proteins renamed \"unknown\" according parameter size).","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/reference/testMSnSet.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a stratified 'test' MSnSet — testMSnSet","text":"Lisa Breckels","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/testMSnSet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a stratified 'test' MSnSet — testMSnSet","text":"","code":"library(pRolocdata) data(tan2009r1) sample <- testMSnSet(tan2009r1) getMarkers(sample, \"test\") #> organelleMarkers #>  Cytoskeleton            ER         Golgi      Lysosome       Nucleus  #>             5            22            10             6            16  #>            PM    Peroxisome    Proteasome  Ribosome 40S  Ribosome 60S  #>            27             3            12            16            25  #> mitochondrion       unknown  #>            23            46  all(dim(sample) == dim(markerMSnSet(tan2009r1))) #> [1] TRUE"},{"path":"https://lgatto.github.io/pRoloc/reference/testMarkers.html","id":null,"dir":"Reference","previous_headings":"","what":"Tests marker class sizes — testMarkers","title":"Tests marker class sizes — testMarkers","text":"Tests marker class sizes large enough parameter optimisation scheme, .e. size greater xval + n, default xval 5 n 2. test unsuccessful, warning thrown.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/testMarkers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tests marker class sizes — testMarkers","text":"","code":"testMarkers(object, xval = 5, n = 2, fcol = \"markers\", error = FALSE)"},{"path":"https://lgatto.github.io/pRoloc/reference/testMarkers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tests marker class sizes — testMarkers","text":"object instance class \"MSnSet\". xval number cross-validation partitions. See xval argument parameter optimisation function(s). Default 5. n Number additional examples. fcol name prediction column featureData slot. Default \"markers\". error logical specifying error thown, instead warning.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/testMarkers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tests marker class sizes — testMarkers","text":"successfull, test invisibly returns NULL. Else, invisibly returns names classes examples.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/testMarkers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tests marker class sizes — testMarkers","text":"case test indicates class contains examples, advised either add , possible, remove class altogether (see minMarkers) parameter optimisation likely fail , least, produce unreliable results class.","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/reference/testMarkers.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Tests marker class sizes — testMarkers","text":"Laurent Gatto","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/testMarkers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tests marker class sizes — testMarkers","text":"","code":"library(\"pRolocdata\") data(dunkley2006) getMarkers(dunkley2006) #> organelleMarkers #>      ER lumen   ER membrane         Golgi Mitochondrion            PM  #>            14            45            28            55            46  #>       Plastid      Ribosome           TGN       unknown       vacuole  #>            20            19            13           428            21  testMarkers(dunkley2006) toosmall <- testMarkers(dunkley2006, xval = 15) #> Warning: ER lumen, TGN have/has less than 17 markers. toosmall #> [1] \"ER lumen\" \"TGN\"      try(testMarkers(dunkley2006, xval = 15, error = TRUE)) #> Error in testMarkers(dunkley2006, xval = 15, error = TRUE) :  #>   ER lumen, TGN have/has less than 17 markers."},{"path":"https://lgatto.github.io/pRoloc/reference/thetas.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw matrix of thetas to test — thetas","title":"Draw matrix of thetas to test — thetas","text":"possible weights considered sequence 0 (favour auxiliary data) 1 (favour primary data). possible combination weights nclass classes must tested. thetas function produces weight matrix nclass columns (one class) possible weight combinations (number rows).","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/thetas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw matrix of thetas to test — thetas","text":"","code":"thetas(nclass, by = 0.5, length.out, verbose = TRUE)"},{"path":"https://lgatto.github.io/pRoloc/reference/thetas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw matrix of thetas to test — thetas","text":"nclass Number marker classes increment weights. One 1, 0.5, 0.25, 2, 0.1 0.05. length.desired length weight sequence. verbose logical indicating weight sequences printed . Default TRUE.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/thetas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw matrix of thetas to test — thetas","text":"matrix possible theta weight combinations.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/thetas.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Draw matrix of thetas to test — thetas","text":"Lisa Breckels","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/thetas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw matrix of thetas to test — thetas","text":"","code":"dim(thetas(4, by = 0.5)) #> Weigths: #>   (0, 0.5, 1) #> [1] 81  4 dim(thetas(4, by = 0.2)) #> Weigths: #>   (0, 0.2, 0.4, 0.6, 0.8, 1) #> [1] 1296    4 dim(thetas(5, by = 0.2)) #> Weigths: #>   (0, 0.2, 0.4, 0.6, 0.8, 1) #> [1] 7776    5 dim(thetas(5, length.out = 5)) #> Weigths: #>   (0, 0.25, 0.5, 0.75, 1) #> [1] 3125    5 dim(thetas(6, by = 0.2)) #> Weigths: #>   (0, 0.2, 0.4, 0.6, 0.8, 1) #> [1] 46656     6"},{"path":"https://lgatto.github.io/pRoloc/reference/undocumented.html","id":null,"dir":"Reference","previous_headings":"","what":"Undocumented/unexported entries — undocumented","title":"Undocumented/unexported entries — undocumented","text":"just dummy entry methods unexported classes   generate warnings package checking.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/undocumented.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Undocumented/unexported entries — undocumented","text":"Laurent Gatto <lg390@cam.ac.uk>","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/zerosInBinMSnSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the number of non-zero values in each marker classes — zerosInBinMSnSet","title":"Compute the number of non-zero values in each marker classes — zerosInBinMSnSet","text":"function assumes input binary MSnSet computes, marker class, number non-zero expression profiles. function meant used produce heatmaps (see example) visualise binary (GO) MSnSet objects assess utility: zero features/classes informative (can filtered filterBinMSnSet) features/classes many annotations (GO terms) likely informative either.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/zerosInBinMSnSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the number of non-zero values in each marker classes — zerosInBinMSnSet","text":"","code":"zerosInBinMSnSet(object, fcol = \"markers\", as.matrix = TRUE, percent = TRUE)"},{"path":"https://lgatto.github.io/pRoloc/reference/zerosInBinMSnSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the number of non-zero values in each marker classes — zerosInBinMSnSet","text":"object instance class MSnSet binary data. fcol character defining feature data variable used markers. Default \"markers\". .matrix TRUE (default) data formatted returned matrix. Otherwise, list returned. percent TRUE, percentages returned. Otherwise, absolute values.","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/zerosInBinMSnSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the number of non-zero values in each marker classes — zerosInBinMSnSet","text":"matrix list indicating number     non-zero value per marker class.","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/reference/zerosInBinMSnSet.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute the number of non-zero values in each marker classes — zerosInBinMSnSet","text":"Laurent Gatto","code":""},{"path":"https://lgatto.github.io/pRoloc/reference/zerosInBinMSnSet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the number of non-zero values in each marker classes — zerosInBinMSnSet","text":"","code":"library(pRolocdata) data(hyperLOPIT2015goCC) zerosInBinMSnSet(hyperLOPIT2015goCC) #>    40S Ribosome 60S Ribosome Actin cytoskeleton     Cytosol #> 0   0.005089059  0.005089059        0.001272265 0.005089059 #> 1   0.002544529  0.001272265        0.001272265 0.002544529 #> 2   0.005089059  0.005089059        0.001272265 0.011450382 #> 3   0.002544529  0.007633588        0.001272265 0.008905852 #> 4   0.007633588  0.006361323        0.001272265 0.010178117 #> 5   0.005089059  0.008905852        0.003816794 0.003816794 #> 6   0.001272265  0.002544529        0.001272265 0.002544529 #> 7   0.002544529  0.006361323        0.001272265 0.005089059 #> 8   0.001272265  0.005089059        0.002544529 0.001272265 #> 9   0.001272265  0.003816794        0.001272265 0.001272265 #> 10  0.000000000  0.001272265        0.000000000 0.001272265 #> 11  0.000000000  0.001272265        0.000000000 0.001272265 #> 12  0.000000000  0.000000000        0.000000000 0.000000000 #> 13  0.000000000  0.000000000        0.000000000 0.000000000 #> 14  0.000000000  0.000000000        0.000000000 0.000000000 #> 15  0.000000000  0.000000000        0.000000000 0.000000000 #> 16  0.000000000  0.000000000        0.000000000 0.000000000 #> 17  0.000000000  0.000000000        0.000000000 0.000000000 #> 18  0.000000000  0.000000000        0.000000000 0.000000000 #> 19  0.000000000  0.000000000        0.000000000 0.000000000 #> 20  0.000000000  0.000000000        0.000000000 0.000000000 #> 21  0.000000000  0.000000000        0.000000000 0.000000000 #> 22  0.000000000  0.000000000        0.000000000 0.000000000 #>    Endoplasmic reticulum/Golgi apparatus    Endosome Extracellular matrix #> 0                            0.016539440 0.001272265          0.003816794 #> 1                            0.005089059 0.001272265          0.005089059 #> 2                            0.017811705 0.001272265          0.002544529 #> 3                            0.024173028 0.003816794          0.002544529 #> 4                            0.020356234 0.001272265          0.002544529 #> 5                            0.005089059 0.002544529          0.000000000 #> 6                            0.013994911 0.001272265          0.000000000 #> 7                            0.008905852 0.001272265          0.000000000 #> 8                            0.011450382 0.001272265          0.000000000 #> 9                            0.003816794 0.001272265          0.000000000 #> 10                           0.001272265 0.000000000          0.000000000 #> 11                           0.001272265 0.000000000          0.000000000 #> 12                           0.001272265 0.000000000          0.000000000 #> 13                           0.001272265 0.000000000          0.000000000 #> 14                           0.002544529 0.000000000          0.000000000 #> 15                           0.001272265 0.000000000          0.000000000 #> 16                           0.000000000 0.000000000          0.000000000 #> 17                           0.000000000 0.000000000          0.000000000 #> 18                           0.000000000 0.000000000          0.000000000 #> 19                           0.000000000 0.000000000          0.000000000 #> 20                           0.000000000 0.000000000          0.000000000 #> 21                           0.000000000 0.000000000          0.000000000 #> 22                           0.000000000 0.000000000          0.000000000 #>       Lysosome Mitochondrion Nucleus - Chromatin Nucleus - Non-chromatin #> 0  0.001272265   0.043256997         0.013994911             0.016539440 #> 1  0.005089059   0.043256997         0.003816794             0.003816794 #> 2  0.012722646   0.110687023         0.002544529             0.021628499 #> 3  0.007633588   0.110687023         0.010178117             0.017811705 #> 4  0.002544529   0.068702290         0.006361323             0.015267176 #> 5  0.003816794   0.043256997         0.005089059             0.008905852 #> 6  0.003816794   0.025445293         0.008905852             0.006361323 #> 7  0.001272265   0.019083969         0.011450382             0.011450382 #> 8  0.001272265   0.007633588         0.007633588             0.002544529 #> 9  0.001272265   0.007633588         0.006361323             0.002544529 #> 10 0.001272265   0.001272265         0.001272265             0.001272265 #> 11 0.000000000   0.001272265         0.001272265             0.000000000 #> 12 0.000000000   0.002544529         0.002544529             0.000000000 #> 13 0.000000000   0.001272265         0.000000000             0.000000000 #> 14 0.000000000   0.001272265         0.000000000             0.000000000 #> 15 0.000000000   0.000000000         0.000000000             0.000000000 #> 16 0.000000000   0.000000000         0.000000000             0.000000000 #> 17 0.000000000   0.000000000         0.000000000             0.000000000 #> 18 0.000000000   0.000000000         0.000000000             0.000000000 #> 19 0.000000000   0.000000000         0.000000000             0.000000000 #> 20 0.000000000   0.000000000         0.000000000             0.000000000 #> 21 0.000000000   0.000000000         0.000000000             0.000000000 #> 22 0.000000000   0.000000000         0.000000000             0.000000000 #>     Peroxisome Plasma membrane  Proteasome #> 0  0.003816794     0.012722646 0.001272265 #> 1  0.002544529     0.001272265 0.001272265 #> 2  0.003816794     0.002544529 0.001272265 #> 3  0.001272265     0.003816794 0.002544529 #> 4  0.003816794     0.003816794 0.002544529 #> 5  0.002544529     0.001272265 0.006361323 #> 6  0.001272265     0.005089059 0.008905852 #> 7  0.001272265     0.003816794 0.007633588 #> 8  0.001272265     0.002544529 0.005089059 #> 9  0.000000000     0.003816794 0.003816794 #> 10 0.000000000     0.001272265 0.001272265 #> 11 0.000000000     0.003816794 0.001272265 #> 12 0.000000000     0.001272265 0.000000000 #> 13 0.000000000     0.001272265 0.000000000 #> 14 0.000000000     0.001272265 0.000000000 #> 15 0.000000000     0.002544529 0.000000000 #> 16 0.000000000     0.001272265 0.000000000 #> 17 0.000000000     0.002544529 0.000000000 #> 18 0.000000000     0.003816794 0.000000000 #> 19 0.000000000     0.001272265 0.000000000 #> 20 0.000000000     0.001272265 0.000000000 #> 21 0.000000000     0.001272265 0.000000000 #> 22 0.000000000     0.001272265 0.000000000 zerosInBinMSnSet(hyperLOPIT2015goCC, percent = FALSE) #>    40S Ribosome 60S Ribosome Actin cytoskeleton Cytosol #> 0             4            4                  1       4 #> 1             2            1                  1       2 #> 2             4            4                  1       9 #> 3             2            6                  1       7 #> 4             6            5                  1       8 #> 5             4            7                  3       3 #> 6             1            2                  1       2 #> 7             2            5                  1       4 #> 8             1            4                  2       1 #> 9             1            3                  1       1 #> 10            0            1                  0       1 #> 11            0            1                  0       1 #> 12            0            0                  0       0 #> 13            0            0                  0       0 #> 14            0            0                  0       0 #> 15            0            0                  0       0 #> 16            0            0                  0       0 #> 17            0            0                  0       0 #> 18            0            0                  0       0 #> 19            0            0                  0       0 #> 20            0            0                  0       0 #> 21            0            0                  0       0 #> 22            0            0                  0       0 #>    Endoplasmic reticulum/Golgi apparatus Endosome Extracellular matrix Lysosome #> 0                                     13        1                    3        1 #> 1                                      4        1                    4        4 #> 2                                     14        1                    2       10 #> 3                                     19        3                    2        6 #> 4                                     16        1                    2        2 #> 5                                      4        2                    0        3 #> 6                                     11        1                    0        3 #> 7                                      7        1                    0        1 #> 8                                      9        1                    0        1 #> 9                                      3        1                    0        1 #> 10                                     1        0                    0        1 #> 11                                     1        0                    0        0 #> 12                                     1        0                    0        0 #> 13                                     1        0                    0        0 #> 14                                     2        0                    0        0 #> 15                                     1        0                    0        0 #> 16                                     0        0                    0        0 #> 17                                     0        0                    0        0 #> 18                                     0        0                    0        0 #> 19                                     0        0                    0        0 #> 20                                     0        0                    0        0 #> 21                                     0        0                    0        0 #> 22                                     0        0                    0        0 #>    Mitochondrion Nucleus - Chromatin Nucleus - Non-chromatin Peroxisome #> 0             34                  11                      13          3 #> 1             34                   3                       3          2 #> 2             87                   2                      17          3 #> 3             87                   8                      14          1 #> 4             54                   5                      12          3 #> 5             34                   4                       7          2 #> 6             20                   7                       5          1 #> 7             15                   9                       9          1 #> 8              6                   6                       2          1 #> 9              6                   5                       2          0 #> 10             1                   1                       1          0 #> 11             1                   1                       0          0 #> 12             2                   2                       0          0 #> 13             1                   0                       0          0 #> 14             1                   0                       0          0 #> 15             0                   0                       0          0 #> 16             0                   0                       0          0 #> 17             0                   0                       0          0 #> 18             0                   0                       0          0 #> 19             0                   0                       0          0 #> 20             0                   0                       0          0 #> 21             0                   0                       0          0 #> 22             0                   0                       0          0 #>    Plasma membrane Proteasome #> 0               10          1 #> 1                1          1 #> 2                2          1 #> 3                3          2 #> 4                3          2 #> 5                1          5 #> 6                4          7 #> 7                3          6 #> 8                2          4 #> 9                3          3 #> 10               1          1 #> 11               3          1 #> 12               1          0 #> 13               1          0 #> 14               1          0 #> 15               2          0 #> 16               1          0 #> 17               2          0 #> 18               3          0 #> 19               1          0 #> 20               1          0 #> 21               1          0 #> 22               1          0 pal <- colorRampPalette(c(\"white\", \"blue\")) library(lattice) levelplot(zerosInBinMSnSet(hyperLOPIT2015goCC),           xlab = \"Number of non-0s\",           ylab = \"Marker class\",           col.regions = pal(140))"},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-47","dir":"Changelog","previous_headings":"","what":"Changes in version 1.47.1","title":"pRoloc 1.47","text":"Lisa Breckels now maintainer.","code":""},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-47-1","dir":"Changelog","previous_headings":"","what":"Changes in version 1.47.0","title":"pRoloc 1.47","text":"New devel version","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-45","dir":"Changelog","previous_headings":"","what":"Changes in version 1.45.2","title":"pRoloc 1.45","text":"pRolocmarkers() new version argument, allow new markers versions added. 14 new marker sets added pRolocmarkers() version = 2 (new default). Documentation pRolocmarkers() updated include description version = 2 markers.","code":""},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-45-1","dir":"Changelog","previous_headings":"","what":"Changes in version 1.45.1","title":"pRoloc 1.45","text":"Import ’mclust::estep*()’.","code":""},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-45-2","dir":"Changelog","previous_headings":"","what":"Changes in version 1.45.0","title":"pRoloc 1.45","text":"New devel version","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-43","dir":"Changelog","previous_headings":"","what":"Changes in version 1.43.2","title":"pRoloc 1.43","text":"Fix/update dunkley2006param object.","code":""},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-43-1","dir":"Changelog","previous_headings":"","what":"Changes in version 1.43.1","title":"pRoloc 1.43","text":"Fix syntax man pages.","code":""},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-43-2","dir":"Changelog","previous_headings":"","what":"Changes in version 1.43.0","title":"pRoloc 1.43","text":"New devel version","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-39","dir":"Changelog","previous_headings":"","what":"Changes in version 1.39.1","title":"pRoloc 1.39","text":"Update transfer learning vignette use hpar 1.41.","code":""},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-39-1","dir":"Changelog","previous_headings":"","what":"Changes in version 1.39.0","title":"pRoloc 1.39","text":"New devel version (Bioc 3.17)","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-37","dir":"Changelog","previous_headings":"","what":"Changes in version 1.37.1","title":"pRoloc 1.37","text":"Fix bug PerTubro classifiction function (see #146 #147), contributed mgerault.","code":""},{"path":[]},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-31","dir":"Changelog","previous_headings":"","what":"Changes in version 1.31.1","title":"pRoloc 1.31","text":"Fix failing unit test, setting RNGseed SerialParam() (fix ococrook, see #142).","code":""},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-31-1","dir":"Changelog","previous_headings":"","what":"Changes in version 1.31.0","title":"pRoloc 1.31","text":"New devel version (Bioc 3.14)","code":""},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-31-2","dir":"Changelog","previous_headings":"","what":"Changes in version 1.31.3","title":"pRoloc 1.31","text":"lopims() function moved lgatto/lopims package GitHub","code":""},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-31-3","dir":"Changelog","previous_headings":"","what":"Changes in version 1.31.2","title":"pRoloc 1.31","text":"Update dunkley2006params, andy2011params MartInterfaces objects","code":""},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-31-4","dir":"Changelog","previous_headings":"","what":"Changes in version 1.31.1","title":"pRoloc 1.31","text":"Suggest magick (needed build vignette)","code":""},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-31-5","dir":"Changelog","previous_headings":"","what":"Changes in version 1.31.0","title":"pRoloc 1.31","text":"New devel version (Bioc 3.13)","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-29","dir":"Changelog","previous_headings":"","what":"Changes in version 1.29.0","title":"pRoloc 1.29","text":"New devel version (Bioc 3.12)","code":""},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-29-1","dir":"Changelog","previous_headings":"","what":"Changes in version 1.29.1","title":"pRoloc 1.29","text":"Removed duplicate colour getStockCol updated colour palette <Tue 2020-09-08>","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-28","dir":"Changelog","previous_headings":"","what":"Changes in version 1.28.0","title":"pRoloc 1.28","text":"New release version (Bioc 3.11)","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-27","dir":"Changelog","previous_headings":"","what":"Changes in version 1.27.6","title":"pRoloc 1.27","text":"Depend MLInterfaces 1.67.10","code":""},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-27-1","dir":"Changelog","previous_headings":"","what":"Changes in version 1.27.5","title":"pRoloc 1.27","text":"import stats4::plot <2020-03-26 Thu>","code":""},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-27-2","dir":"Changelog","previous_headings":"","what":"Changes in version 1.27.4","title":"pRoloc 1.27","text":"Import missing mclust::mclustBIC","code":""},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-27-3","dir":"Changelog","previous_headings":"","what":"Changes in version 1.27.3","title":"pRoloc 1.27","text":"Remove exprsToRatio man page (function MSnbase deprecated)","code":""},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-27-4","dir":"Changelog","previous_headings":"","what":"Changes in version 1.27.2","title":"pRoloc 1.27","text":"Fix errors related R-devel","code":""},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-27-5","dir":"Changelog","previous_headings":"","what":"Changes in version 1.27.1","title":"pRoloc 1.27","text":"Merged plotting payes PR","code":""},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-27-6","dir":"Changelog","previous_headings":"","what":"Changes in version 1.27.0","title":"pRoloc 1.27","text":"Version bump Bioc 3.11 (devel)","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-25","dir":"Changelog","previous_headings":"","what":"Changes in version 1.25.3","title":"pRoloc 1.25","text":"New spatial2D function <2019-09-24 Tue>","code":""},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-25-1","dir":"Changelog","previous_headings":"","what":"Changes in version 1.25.2","title":"pRoloc 1.25","text":"Fix new biomart attribute <2019-08-09 Fri> Bug fix: pass fcol helper function (see https://support.bioconductor.org/p/123614/) <2019-08-09 Fri>","code":""},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-25-2","dir":"Changelog","previous_headings":"","what":"Changes in version 1.25.1","title":"pRoloc 1.25","text":"Always use mvtnorm::dmvnorm <2019-06-21 Fri>","code":""},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-25-3","dir":"Changelog","previous_headings":"","what":"Changes in version 1.25.0","title":"pRoloc 1.25","text":"Version bump Bioc 3.10 (devel)","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-24","dir":"Changelog","previous_headings":"","what":"Changes in version 1.24.0","title":"pRoloc 1.24","text":"Version bump Bioc 3.9 (release)","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-23","dir":"Changelog","previous_headings":"","what":"Changes in version 1.23.4","title":"pRoloc 1.23","text":"Remove plain NEWS now R supports NEWS.md","code":""},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-23-1","dir":"Changelog","previous_headings":"","what":"Changes in version 1.23.3","title":"pRoloc 1.23","text":"Link TAGM F1000 workflow <2019-04-11 Thu> Add ref TAGM F1000 CITATION README <2019-04-11 Thu> Update biomart interface data AnnotationParams-related code <2019-04-12 Fri>","code":""},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-23-2","dir":"Changelog","previous_headings":"","what":"Changes in version 1.23.2","title":"pRoloc 1.23","text":"Add mcmc helper functions. New logPosteriors accessor MAPParams object. New plotConsProfiles function, contributed Tom Smith (see PR #131). Update TAGM vignette, refering workflow <2019-03-14 Thu>","code":""},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-23-3","dir":"Changelog","previous_headings":"","what":"Changes in version 1.23.1","title":"pRoloc 1.23","text":"Add note missing data QSep man <2018-10-31 Wed> Add mcmc-helper documentation <2018-11-04 Sun> Fixing numerical instability Cholesky decomposition (see #124) <2018-11-30 Fri> Add option display display grid plot2D <2018-12-12 Wed> mrkHClust now uses mrkConsProfiles returns hclust object - see issue #130 details background <2018-12-19 Wed>","code":""},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-23-4","dir":"Changelog","previous_headings":"","what":"Changes in version 1.23.0","title":"pRoloc 1.23","text":"New version Bioc 3.9 devel","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-22","dir":"Changelog","previous_headings":"","what":"Changes in version 1.22.0","title":"pRoloc 1.22","text":"New version Bioc 3.8 release","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-21","dir":"Changelog","previous_headings":"","what":"Changes in version 1.21.9","title":"pRoloc 1.21","text":"Fix type vignette header <2018-09-18 Tue> Fix bug plot method ThetaRegRes object <2018-09-24 Mon>","code":""},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-21-1","dir":"Changelog","previous_headings":"","what":"Changes in version 1.21.8","title":"pRoloc 1.21","text":"Add fcol argument plotDist plot colour profiles <2018-08-09 Thu>","code":""},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-21-2","dir":"Changelog","previous_headings":"","what":"Changes in version 1.21.7","title":"pRoloc 1.21","text":"Use BiocManager vignette Fix bug plot2D: pass … hexbin <2018-08-02 Thu>","code":""},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-21-3","dir":"Changelog","previous_headings":"","what":"Changes in version 1.21.6","title":"pRoloc 1.21","text":"Use BiocManager installation instructions","code":""},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-21-4","dir":"Changelog","previous_headings":"","what":"Changes in version 1.21.5","title":"pRoloc 1.21","text":"Added new section Bayesian spatial proteomics vignette detailing mcmc output processing <2018-07-07 Sat>","code":""},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-21-5","dir":"Changelog","previous_headings":"","what":"Changes in version 1.21.4","title":"pRoloc 1.21","text":"Fix bugs tagmMcmcPredict, fcol ignored <2018-06-05 Tue> Order vignettes prefixing files numbers <2018-06-05 Tue>","code":""},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-21-6","dir":"Changelog","previous_headings":"","what":"Changes in version 1.21.3","title":"pRoloc 1.21","text":"New TAGM-MCMC generative model, contributed Oliver Crook <2018-05-18 Fri>","code":""},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-21-7","dir":"Changelog","previous_headings":"","what":"Changes in version 1.21.2","title":"pRoloc 1.21","text":"Version bump BiocStyle update: Vignette needed rebuilt bug fixed BiocStyle footnote rendering.","code":""},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-21-8","dir":"Changelog","previous_headings":"","what":"Changes in version 1.21.1","title":"pRoloc 1.21","text":"Fix bug higlightOnPlot missing fcol (see #105) <2018-05-03 Thu> New TAGM-MAP generative model, contributed Oliver Crook <2018-05-18 Fri> New plotEllipse function visualise assess TAGM models <2018-05-18 Fri>","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-20","dir":"Changelog","previous_headings":"","what":"Changes in version 1.20.0","title":"pRoloc 1.20","text":"New Bioconductor release 3.7","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-19","dir":"Changelog","previous_headings":"","what":"Changes in version 1.19.4","title":"pRoloc 1.19","text":"Fix regression bug knntl function <2018-04-12 Thu>","code":""},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-19-1","dir":"Changelog","previous_headings":"","what":"Changes in version 1.19.3","title":"pRoloc 1.19","text":"Use dplyr::left_join without attaching dplyr avoid collision Biobase::exprs dplyr::exprs <2018-04-04 Wed>. Typo warning install rgl <2018-03-27 Tue>","code":""},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-19-2","dir":"Changelog","previous_headings":"","what":"Changes in version 1.19.2","title":"pRoloc 1.19","text":"Fix bug QSep prevented set non-default fcol <2018-01-29 Mon>","code":""},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-19-3","dir":"Changelog","previous_headings":"","what":"Changes in version 1.19.1","title":"pRoloc 1.19","text":"Fix bug private dimred set appropriate number colnames <2017-11-07 Tue> New nipals method dimensionality reduction plot2D (closes issue #103) <2018-01-16 Tue>","code":""},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-19-4","dir":"Changelog","previous_headings":"","what":"Changes in version 1.19.0","title":"pRoloc 1.19","text":"Bioconductor devel 3.7","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-18","dir":"Changelog","previous_headings":"","what":"Changes in version 1.18.0","title":"pRoloc 1.18","text":"Bioconductor release 3.6","code":""},{"path":[]},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-17","dir":"Changelog","previous_headings":"","what":"Changes in version 1.17.5","title":"pRoloc 1.17","text":"Filtering unique features running plot2D t-SNE method <2017-10-15 Sun>","code":""},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-17-1","dir":"Changelog","previous_headings":"","what":"Changes in version 1.17.4","title":"pRoloc 1.17","text":"Added new (private) dimred function computes dimensionality reduction <2017-06-05 Mon> Add F1000research workflow citations <2017-06-22 Thu> Classification functions now return classification score matrix classes single column fData, rather class fData column. <2017-09-01 Fri>","code":""},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-17-2","dir":"Changelog","previous_headings":"","what":"Changes in version 1.17.3","title":"pRoloc 1.17","text":"Convert vignettes Rmd html output <2017-05-25 Thu> Import, rather suggest Rtsne <2017-05-25 Thu>","code":""},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-17-3","dir":"Changelog","previous_headings":"","what":"Changes in version 1.17.2","title":"pRoloc 1.17","text":"phenoDisco speed improvements added support t-SNE <2017-05-19 Fri>","code":""},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-17-4","dir":"Changelog","previous_headings":"","what":"Changes in version 1.17.1","title":"pRoloc 1.17","text":"Support Rtsne’s new pca_center pca_scale arguments <2017-05-02 Tue>","code":""},{"path":"https://lgatto.github.io/pRoloc/news/index.html","id":"changes-in-version-1-17-5","dir":"Changelog","previous_headings":"","what":"Changes in version 1.17.0","title":"pRoloc 1.17","text":"Version bump Bioc devel 3.6","code":""}]
